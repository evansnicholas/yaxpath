grammar org.xtext.example.xpath.XPath
hidden(WS)

generate xPath "http://www.xtext.org/example/xpath/XPath"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//Removed ? from "/" singlePath=RelativePathExpr? in RelativePathExpr because this caused the grammar to be 
//ambiguous, couldn't work out how to solve this.
//Did the same for occInd=OccurenceIndicator? This also gave an ambiguity error but should be addressed.

Xpath:
   xpath=Expr
;

Expr:
	exprSingle=ExprSingle (',' exprsSingle+=ExprSingle)*
;

ExprSingle:
	ForExpr | QuantifiedExpr | IfExpr | OrExpr
;

ForExpr:  	
	for=SimpleForClause 'return' return=ExprSingle
;

SimpleForClause:
  'for' '$' forVar=VarName 'in' in=ExprSingle (additionalIn+=AdditionalIn)*
;

AdditionalIn:
  ',' '$' variable=VarName 'in' in=ExprSingle
;

QuantifiedExpr:
	("some" | "every") "$" variable=VarName "in" in=ExprSingle (additionalIn+=AdditionalIn)* "satisfies" satisfy=ExprSingle
;

IfExpr:
    "if" "(" if=Expr ")" "then" then=ExprSingle "else" else=ExprSingle
;

OrExpr:
 	left=AndExpr ("or" rights+=AndExpr )*
;
 
AndExpr:
	left=ComparisonExpr ("and" rights+=ComparisonExpr )*
;

ComparisonExpr:
	left=RangeExpr ( (comp=ValueComp | comp=GeneralComp | comp=NodeComp) right=RangeExpr )?
;

RangeExpr:
	from=AdditiveExpr ("to" to=AdditiveExpr )?
;

AdditiveExpr:
	MultiplicativeExpr (( {Addition.left=current} "+" | {Substraction.left=current} "-") right=MultiplicativeExpr)*
;

MultiplicativeExpr:
	UnionExpr (( {Multiplication.left=current} "*" | {Division.left=current} "div" | {IDivision.left=current} "idiv" | {Mod.left=current} "mod") right=UnionExpr)*
;

UnionExpr:
	IntersectExceptExpr (( {Union.left=current} "union" | {Pipe.left=current} "|") right=IntersectExceptExpr)*
;

IntersectExceptExpr:
	InstanceofExpr (( {Intersect.left=current} "intersect" | {Except.left=current} "except") right=InstanceofExpr)*
;

InstanceofExpr:
	TreatExpr ( {Instanceof.left=current} "instance" "of" right=SequenceType)?
; 

TreatExpr:
	CastableExpr ( {TreatAs.left=current} "treat" "as" right=SequenceType)?
;

CastableExpr:
	CastExpr ( {Castable.left=current} "castable" "as" right=SingleType)?
;

CastExpr:
	UnaryExpr ( {CastAs.left=current} "cast" "as" right=SingleType )?
;

UnaryExpr:
	(unaryOps+=("-" | "+"))* value=ValueExpr
;

ValueExpr:
	value=PathExpr
;

GeneralComp:
   op="=" | op="!=" | op="<" | op="<=" | op=">" | op=">="
;

ValueComp:
	op="eq" | op="ne" | op="lt" | op="le" | op="gt" | op="ge"
;
	
NodeComp:
	op="is" | op="<<" | op=">>"
;

PathExpr:
	"/" RelativePathExpr {RelSingle.relPathExpr=current}
	| "//" RelativePathExpr {RelDouble.relPathExpr=current} 
    | RelativePathExpr {RelNoSelector.relPathExpr=current}
;


RelativePathExpr:
	step=StepExpr (extraSteps+=ExtraStepExpr)*
;

ExtraStepExpr returns StepExpr:
	"/" StepExpr {Single.step=current}
	| "//" StepExpr {Double.step=current}
;

StepExpr:
	stepExpr=FilterExpr | stepExpr=AxisStep 
;

AxisStep:
	(step=ReverseStep | step=ForwardStep) predicateList=PredicateList
;

ForwardStep:
	(forward=ForwardAxis test=NodeTest) | abbrForward=AbbrevForwardStep
;

ForwardAxis:
	  axis="child" "::"
	| axis="descendant" "::"
	| axis="attribute" "::"
	| axis="self" "::"
	| axis="descendant-or-self" "::"
	| axis="following-sibling" "::"
	| axis="following" "::"
	| axis="namespace" "::"	
;

AbbrevForwardStep:
	"@" NodeTest {Attribute.test=current} | NodeTest {Element.test=current}
;

ReverseStep:
	(reverse=REVERSEAXIS test=NodeTest) | abbrRevSet=ABBREVREVERSESTEP
;

NodeTest:
	test=KindTest | test=NameTest
;

NameTest:
	qName=QName | wildcard=Wildcard
;

Wildcard:
	wild="*"
	| (left=NCName ":" "*")
	| ("*" ":" right=NCName)
;

FilterExpr:
	primary=PrimaryExpr predicateList=PredicateList
;

PredicateList:
	{PredicateList} predicates+=Predicate*
;

Predicate:
	"[" expr=Expr "]"
;

PrimaryExpr:
	literal=Literal 
	| varRef=VarRef 
	| parExpr=ParenthesizedExpr 
	| conItemExpr=CONTEXTITEMEXPR 
	| functionCall=FunctionCall
;

Literal:
	num=NumericLiteral | string=STRINGLITERAL
;

NumericLiteral:
	intLit=INTLITERAL
	| decLit=DECIMALLITERAL 
	| doubleLit=DOUBLELITERAL
;

VarRef:
	"$" VarName
;

VarName:
  qName=QName
; 

ParenthesizedExpr:
	{ParenthesizedExpr} "(" expr=Expr? ")"
;

FunctionCall:
	qName=QName "(" (expr=ExprSingle ("," exprs+=ExprSingle)*)? ")"
;

SingleType:
	AtomicType "?"?
;

SequenceType:
	empty=EMPTYSEQUENCETYPE
	| (itemType=ItemType occInd=OccurenceIndicator)
;

OccurenceIndicator:
	"?" | "*" | "+"
;

ItemType:
	kindTest=KindTest | empty=EMPTYITEMTYPE | atomicType=AtomicType
;
	
AtomicType:
	type=ID
;

KindTest:
	docTest=DocumentTest
	| elemTest=ElementTest
	| attributeTest=AttributeTest
	| schemaElemTest=SchemaElementTest
	| schemaAttributeTest=SchemaAttributeTest
	| pitTest=PITest
	| commentTest=COMMENTTEST
	| textTest=TEXTTEST
	| anyKindTest=ANYKINDTEST
;

DocumentTest:
	{DocumentTest} "document-node" "(" (elemTest=ElementTest | schemaElemTest=SchemaElementTest)? ")"
;

PITest:
	{PITTest} "processing-instruction" "(" (ncName=NCName | string=STRINGLITERAL)? ")"
;

AttributeTest:
	{AttributeTest} "attribute" "(" (attrOrWild=AttribNameOrWildcard ("," typeName=TypeName)?)? ")"
;

AttribNameOrWildcard:
	attName=AttributeName | {AttribNameOrWildcard} "*"
;

SchemaAttributeTest:
	"schema-attribute" "(" attDec=AttributeDeclaration ")"
;

AttributeDeclaration:
	attName=AttributeName
;

ElementTest:
	{ElementTest} "element" "(" (elemOrWild=ElementNameOrWildcard ("," typeName=TypeName "?"?)?)? ")"
;

ElementNameOrWildcard:
	elemName = ElementName | {ElementNameOrWildcard} "*"
;

SchemaElementTest:
	"schema-element" "(" elemDec=ElementDeclaration ")"
;

ElementDeclaration:
	ElementName
;

AttributeName:
	qName = QName
;

ElementName:
	qName=QName
;

TypeName:
	qName=QName
;

NCName:
	ncName=ID
;

QName:
  PrefixedName | UnprefixedName	
;

PrefixedName:
	prefix=NCName ':' localPart=NCName
;

UnprefixedName:
	localPart=NCName
;

	
terminal ABBREVREVERSESTEP:
	".."
;

terminal CONTEXTITEMEXPR:
	"."
;

terminal ANYKINDTEST:
	"node" "(" ")"
;

terminal TEXTTEST:
	"text" "(" ")"
;

terminal COMMENTTEST:
	"comment" "(" ")"
;

terminal EMPTYITEMTYPE:
	"item" "(" ")"
;

terminal EMPTYSEQUENCETYPE:
	"empty-sequence" "(" ")"
;

terminal REVERSEAXIS:
	("parent" "::")
	| ("ancestor" "::")
	| ("preceding-sibling" "::")
	| ("preceding" "::")
	| ("ancestor-or-self" "::")
;	

terminal ID :
	'^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;
	
terminal INTLITERAL returns ecore::EInt:
	('0'..'9')+
;

terminal DECIMALLITERAL: 
	('.' INTLITERAL) | (INTLITERAL '.' INTLITERAL)
;
	
terminal DOUBLELITERAL:
	(("." INTLITERAL) | (INTLITERAL ("." ('0'..'9')*)?)) ('e'|'E') ('+'|'-')? INTLITERAL
;

terminal STRINGLITERAL :
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	"'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
;

terminal WS :
(' '|'\t'|'\r'|'\n')+;

