/*
* generated by Xtext
*/
grammar InternalXPath;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.xpath.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.xpath.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.xpath.services.XPathGrammarAccess;

}

@parser::members {

 	private XPathGrammarAccess grammarAccess;
 	
    public InternalXPathParser(TokenStream input, XPathGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Expr";	
   	}
   	
   	@Override
   	protected XPathGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExprSingleExprSingleParserRuleCall_0_0()); 
	    }
		lv_exprSingle_0_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"exprSingle",
        		lv_exprSingle_0_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExprAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExprsSingleExprSingleParserRuleCall_1_1_0()); 
	    }
		lv_exprsSingle_2_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		add(
       			$current, 
       			"exprsSingle",
        		lv_exprsSingle_2_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprSingle
entryRuleExprSingle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprSingleRule()); }
	 iv_ruleExprSingle=ruleExprSingle 
	 { $current=$iv_ruleExprSingle.current; } 
	 EOF 
;

// Rule ExprSingle
ruleExprSingle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprSingleAccess().getForExprParserRuleCall_0()); 
    }
    this_ForExpr_0=ruleForExpr
    { 
        $current = $this_ForExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprSingleAccess().getQuantifiedExprParserRuleCall_1()); 
    }
    this_QuantifiedExpr_1=ruleQuantifiedExpr
    { 
        $current = $this_QuantifiedExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprSingleAccess().getIfExprParserRuleCall_2()); 
    }
    this_IfExpr_2=ruleIfExpr
    { 
        $current = $this_IfExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprSingleAccess().getOrExprParserRuleCall_3()); 
    }
    this_OrExpr_3=ruleOrExpr
    { 
        $current = $this_OrExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForExpr
entryRuleForExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForExprRule()); }
	 iv_ruleForExpr=ruleForExpr 
	 { $current=$iv_ruleForExpr.current; } 
	 EOF 
;

// Rule ForExpr
ruleForExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForExprAccess().getForSimpleForClauseParserRuleCall_0_0()); 
	    }
		lv_for_0_0=ruleSimpleForClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForExprRule());
	        }
       		set(
       			$current, 
       			"for",
        		lv_for_0_0, 
        		"SimpleForClause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForExprAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForExprAccess().getReturnExprSingleParserRuleCall_2_0()); 
	    }
		lv_return_2_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForExprRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_2_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSimpleForClause
entryRuleSimpleForClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleForClauseRule()); }
	 iv_ruleSimpleForClause=ruleSimpleForClause 
	 { $current=$iv_ruleSimpleForClause.current; } 
	 EOF 
;

// Rule SimpleForClause
ruleSimpleForClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleForClauseAccess().getForKeyword_0());
    }
	otherlv_1='$' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleForClauseAccess().getForVarVarNameParserRuleCall_2_0()); 
	    }
		lv_forVar_2_0=ruleVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleForClauseRule());
	        }
       		set(
       			$current, 
       			"forVar",
        		lv_forVar_2_0, 
        		"VarName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleForClauseAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleForClauseAccess().getInExprSingleParserRuleCall_4_0()); 
	    }
		lv_in_4_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleForClauseRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_4_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleForClauseAccess().getAdditionalInAdditionalInParserRuleCall_5_0()); 
	    }
		lv_additionalIn_5_0=ruleAdditionalIn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleForClauseRule());
	        }
       		add(
       			$current, 
       			"additionalIn",
        		lv_additionalIn_5_0, 
        		"AdditionalIn");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAdditionalIn
entryRuleAdditionalIn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionalInRule()); }
	 iv_ruleAdditionalIn=ruleAdditionalIn 
	 { $current=$iv_ruleAdditionalIn.current; } 
	 EOF 
;

// Rule AdditionalIn
ruleAdditionalIn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=',' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAdditionalInAccess().getCommaKeyword_0());
    }
	otherlv_1='$' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdditionalInAccess().getDollarSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionalInAccess().getVariableVarNameParserRuleCall_2_0()); 
	    }
		lv_variable_2_0=ruleVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionalInRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"VarName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAdditionalInAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionalInAccess().getInExprSingleParserRuleCall_4_0()); 
	    }
		lv_in_4_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionalInRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_4_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQuantifiedExpr
entryRuleQuantifiedExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifiedExprRule()); }
	 iv_ruleQuantifiedExpr=ruleQuantifiedExpr 
	 { $current=$iv_ruleQuantifiedExpr.current; } 
	 EOF 
;

// Rule QuantifiedExpr
ruleQuantifiedExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='some' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuantifiedExprAccess().getSomeKeyword_0_0());
    }

    |	otherlv_1='every' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuantifiedExprAccess().getEveryKeyword_0_1());
    }
)	otherlv_2='$' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_2_0()); 
	    }
		lv_variable_3_0=ruleVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_3_0, 
        		"VarName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuantifiedExprAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getInExprSingleParserRuleCall_4_0()); 
	    }
		lv_in_5_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_5_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getAdditionalInAdditionalInParserRuleCall_5_0()); 
	    }
		lv_additionalIn_6_0=ruleAdditionalIn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		add(
       			$current, 
       			"additionalIn",
        		lv_additionalIn_6_0, 
        		"AdditionalIn");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='satisfies' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getQuantifiedExprAccess().getSatisfiesKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getSatisfyExprSingleParserRuleCall_7_0()); 
	    }
		lv_satisfy_8_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		set(
       			$current, 
       			"satisfy",
        		lv_satisfy_8_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIfExpr
entryRuleIfExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExprRule()); }
	 iv_ruleIfExpr=ruleIfExpr 
	 { $current=$iv_ruleIfExpr.current; } 
	 EOF 
;

// Rule IfExpr
ruleIfExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfExprAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExprAccess().getIfExprParserRuleCall_2_0()); 
	    }
		lv_if_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExprRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfExprAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExprAccess().getThenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExprAccess().getThenExprSingleParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfExprAccess().getElseKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExprAccess().getElseExprSingleParserRuleCall_7_0()); 
	    }
		lv_else_7_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExprRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getLeftAndExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrExprAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightsAndExprParserRuleCall_1_1_0()); 
	    }
		lv_rights_2_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		add(
       			$current, 
       			"rights",
        		lv_rights_2_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getLeftComparisonExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleComparisonExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"ComparisonExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAndExprAccess().getAndKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightsComparisonExprParserRuleCall_1_1_0()); 
	    }
		lv_rights_2_0=ruleComparisonExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		add(
       			$current, 
       			"rights",
        		lv_rights_2_0, 
        		"ComparisonExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparisonExpr
entryRuleComparisonExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonExprRule()); }
	 iv_ruleComparisonExpr=ruleComparisonExpr 
	 { $current=$iv_ruleComparisonExpr.current; } 
	 EOF 
;

// Rule ComparisonExpr
ruleComparisonExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getRangeRangeExprParserRuleCall_0_0()); 
	    }
		lv_range_0_0=ruleRangeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_0_0, 
        		"RangeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		lv_value_1_0=RULE_VALUECOMP
		{
			newLeafNode(lv_value_1_0, grammarAccess.getComparisonExprAccess().getValueVALUECOMPTerminalRuleCall_1_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"VALUECOMP");
	    }

)
)
    |(
(
		lv_gen_2_0=RULE_GENERALCOMP
		{
			newLeafNode(lv_gen_2_0, grammarAccess.getComparisonExprAccess().getGenGENERALCOMPTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"gen",
        		lv_gen_2_0, 
        		"GENERALCOMP");
	    }

)
)
    |(
(
		lv_node_3_0=RULE_NODECOMP
		{
			newLeafNode(lv_node_3_0, grammarAccess.getComparisonExprAccess().getNodeNODECOMPTerminalRuleCall_1_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"node",
        		lv_node_3_0, 
        		"NODECOMP");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getOtherRangeRangeExprParserRuleCall_1_1_0()); 
	    }
		lv_otherRange_4_0=ruleRangeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"otherRange",
        		lv_otherRange_4_0, 
        		"RangeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRangeExpr
entryRuleRangeExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeExprRule()); }
	 iv_ruleRangeExpr=ruleRangeExpr 
	 { $current=$iv_ruleRangeExpr.current; } 
	 EOF 
;

// Rule RangeExpr
ruleRangeExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRangeExprAccess().getFromAdditiveExprParserRuleCall_0_0()); 
	    }
		lv_from_0_0=ruleAdditiveExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeExprRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_0_0, 
        		"AdditiveExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeExprAccess().getToKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeExprAccess().getToAdditiveExprParserRuleCall_1_1_0()); 
	    }
		lv_to_2_0=ruleAdditiveExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeExprRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_2_0, 
        		"AdditiveExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAdditiveExpr
entryRuleAdditiveExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExprRule()); }
	 iv_ruleAdditiveExpr=ruleAdditiveExpr 
	 { $current=$iv_ruleAdditiveExpr.current; } 
	 EOF 
;

// Rule AdditiveExpr
ruleAdditiveExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getLeftMultiplicativeExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleMultiplicativeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"MultiplicativeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdditiveExprAccess().getPlusSignKeyword_1_0_0());
    }

    |	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditiveExprAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getRightsMultiplicativeExprParserRuleCall_1_1_0()); 
	    }
		lv_rights_3_0=ruleMultiplicativeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		add(
       			$current, 
       			"rights",
        		lv_rights_3_0, 
        		"MultiplicativeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpr
entryRuleMultiplicativeExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExprRule()); }
	 iv_ruleMultiplicativeExpr=ruleMultiplicativeExpr 
	 { $current=$iv_ruleMultiplicativeExpr.current; } 
	 EOF 
;

// Rule MultiplicativeExpr
ruleMultiplicativeExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getLeftUnionExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleUnionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"UnionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiplicativeExprAccess().getAsteriskKeyword_1_0_0());
    }

    |	otherlv_2='div' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicativeExprAccess().getDivKeyword_1_0_1());
    }

    |	otherlv_3='idiv' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicativeExprAccess().getIdivKeyword_1_0_2());
    }

    |	otherlv_4='mod' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicativeExprAccess().getModKeyword_1_0_3());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getRightsUnionExprParserRuleCall_1_1_0()); 
	    }
		lv_rights_5_0=ruleUnionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		add(
       			$current, 
       			"rights",
        		lv_rights_5_0, 
        		"UnionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnionExpr
entryRuleUnionExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionExprRule()); }
	 iv_ruleUnionExpr=ruleUnionExpr 
	 { $current=$iv_ruleUnionExpr.current; } 
	 EOF 
;

// Rule UnionExpr
ruleUnionExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnionExprAccess().getLeftIntersectExceptExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleIntersectExceptExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"IntersectExceptExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='union' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnionExprAccess().getUnionKeyword_1_0_0());
    }

    |	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnionExprAccess().getVerticalLineKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionExprAccess().getRightsIntersectExceptExprParserRuleCall_1_1_0()); 
	    }
		lv_rights_3_0=ruleIntersectExceptExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionExprRule());
	        }
       		add(
       			$current, 
       			"rights",
        		lv_rights_3_0, 
        		"IntersectExceptExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleIntersectExceptExpr
entryRuleIntersectExceptExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntersectExceptExprRule()); }
	 iv_ruleIntersectExceptExpr=ruleIntersectExceptExpr 
	 { $current=$iv_ruleIntersectExceptExpr.current; } 
	 EOF 
;

// Rule IntersectExceptExpr
ruleIntersectExceptExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntersectExceptExprAccess().getLeftInstanceofExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleInstanceofExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntersectExceptExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"InstanceofExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='intersect' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntersectExceptExprAccess().getIntersectKeyword_1_0_0());
    }

    |	otherlv_2='except' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntersectExceptExprAccess().getExceptKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIntersectExceptExprAccess().getRightsInstanceofExprParserRuleCall_1_1_0()); 
	    }
		lv_rights_3_0=ruleInstanceofExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntersectExceptExprRule());
	        }
       		add(
       			$current, 
       			"rights",
        		lv_rights_3_0, 
        		"InstanceofExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceofExpr
entryRuleInstanceofExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceofExprRule()); }
	 iv_ruleInstanceofExpr=ruleInstanceofExpr 
	 { $current=$iv_ruleInstanceofExpr.current; } 
	 EOF 
;

// Rule InstanceofExpr
ruleInstanceofExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceofExprAccess().getLeftTreatExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleTreatExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceofExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"TreatExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='instance' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceofExprAccess().getInstanceKeyword_1_0());
    }
	otherlv_2='of' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstanceofExprAccess().getOfKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceofExprAccess().getRightSequenceTypeParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSequenceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceofExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SequenceType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTreatExpr
entryRuleTreatExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTreatExprRule()); }
	 iv_ruleTreatExpr=ruleTreatExpr 
	 { $current=$iv_ruleTreatExpr.current; } 
	 EOF 
;

// Rule TreatExpr
ruleTreatExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTreatExprAccess().getLeftCastableExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleCastableExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTreatExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"CastableExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='treat' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTreatExprAccess().getTreatKeyword_1_0());
    }
	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTreatExprAccess().getAsKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTreatExprAccess().getRightSequenceTypeParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSequenceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTreatExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SequenceType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCastableExpr
entryRuleCastableExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastableExprRule()); }
	 iv_ruleCastableExpr=ruleCastableExpr 
	 { $current=$iv_ruleCastableExpr.current; } 
	 EOF 
;

// Rule CastableExpr
ruleCastableExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCastableExprAccess().getLeftCastExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleCastExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastableExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"CastExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='castable' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCastableExprAccess().getCastableKeyword_1_0());
    }
	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastableExprAccess().getAsKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastableExprAccess().getRightSingleTypeParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSingleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastableExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SingleType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCastExpr
entryRuleCastExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastExprRule()); }
	 iv_ruleCastExpr=ruleCastExpr 
	 { $current=$iv_ruleCastExpr.current; } 
	 EOF 
;

// Rule CastExpr
ruleCastExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCastExprAccess().getLeftUnaryExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='cast' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCastExprAccess().getCastKeyword_1_0());
    }
	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastExprAccess().getAsKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExprAccess().getRightSingleTypeParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSingleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SingleType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	 iv_ruleUnaryExpr=ruleUnaryExpr 
	 { $current=$iv_ruleUnaryExpr.current; } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_0_0());
    }

    |	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnaryExprAccess().getPlusSignKeyword_0_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getUnaryValueExprParserRuleCall_1_0()); 
	    }
		lv_unary_2_0=ruleValueExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"unary",
        		lv_unary_2_0, 
        		"ValueExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValueExpr
entryRuleValueExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueExprRule()); }
	 iv_ruleValueExpr=ruleValueExpr 
	 { $current=$iv_ruleValueExpr.current; } 
	 EOF 
;

// Rule ValueExpr
ruleValueExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueExprAccess().getValuePathExprParserRuleCall_0()); 
	    }
		lv_value_0_0=rulePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"PathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePathExpr
entryRulePathExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathExprRule()); }
	 iv_rulePathExpr=rulePathExpr 
	 { $current=$iv_rulePathExpr.current; } 
	 EOF 
;

// Rule PathExpr
rulePathExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPathExprAccess().getPathExprAction_0_0(),
            $current);
    }
)(	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPathExprAccess().getSolidusKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprAccess().getSinglePathRelativePathExprParserRuleCall_0_1_1_0()); 
	    }
		lv_singlePath_2_0=ruleRelativePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprRule());
	        }
       		set(
       			$current, 
       			"singlePath",
        		lv_singlePath_2_0, 
        		"RelativePathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(	otherlv_3='//' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPathExprAccess().getSolidusSolidusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprAccess().getDoublePathRelativePathExprParserRuleCall_1_1_0()); 
	    }
		lv_doublePath_4_0=ruleRelativePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprRule());
	        }
       		set(
       			$current, 
       			"doublePath",
        		lv_doublePath_4_0, 
        		"RelativePathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprAccess().getPathRelativePathExprParserRuleCall_2_0()); 
	    }
		lv_path_5_0=ruleRelativePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_5_0, 
        		"RelativePathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRelativePathExpr
entryRuleRelativePathExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelativePathExprRule()); }
	 iv_ruleRelativePathExpr=ruleRelativePathExpr 
	 { $current=$iv_ruleRelativePathExpr.current; } 
	 EOF 
;

// Rule RelativePathExpr
ruleRelativePathExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelativePathExprAccess().getLeftStepExprParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleStepExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelativePathExprRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"StepExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRelativePathExprAccess().getSolidusKeyword_1_0_0());
    }

    |	otherlv_2='//' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelativePathExprAccess().getSolidusSolidusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelativePathExprAccess().getRightsStepExprParserRuleCall_1_1_0()); 
	    }
		lv_rights_3_0=ruleStepExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelativePathExprRule());
	        }
       		add(
       			$current, 
       			"rights",
        		lv_rights_3_0, 
        		"StepExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleStepExpr
entryRuleStepExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepExprRule()); }
	 iv_ruleStepExpr=ruleStepExpr 
	 { $current=$iv_ruleStepExpr.current; } 
	 EOF 
;

// Rule StepExpr
ruleStepExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStepExprAccess().getFilterFilterExprParserRuleCall_0_0()); 
	    }
		lv_filter_0_0=ruleFilterExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepExprRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_0_0, 
        		"FilterExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStepExprAccess().getStepAxisStepParserRuleCall_1_0()); 
	    }
		lv_step_1_0=ruleAxisStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepExprRule());
	        }
       		set(
       			$current, 
       			"step",
        		lv_step_1_0, 
        		"AxisStep");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAxisStep
entryRuleAxisStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAxisStepRule()); }
	 iv_ruleAxisStep=ruleAxisStep 
	 { $current=$iv_ruleAxisStep.current; } 
	 EOF 
;

// Rule AxisStep
ruleAxisStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getAxisStepAccess().getReverseReverseStepParserRuleCall_0_0_0()); 
	    }
		lv_reverse_0_0=ruleReverseStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxisStepRule());
	        }
       		set(
       			$current, 
       			"reverse",
        		lv_reverse_0_0, 
        		"ReverseStep");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAxisStepAccess().getForwardForwardStepParserRuleCall_0_1_0()); 
	    }
		lv_forward_1_0=ruleForwardStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxisStepRule());
	        }
       		set(
       			$current, 
       			"forward",
        		lv_forward_1_0, 
        		"ForwardStep");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAxisStepAccess().getPredicatePredicateListParserRuleCall_1_0()); 
	    }
		lv_predicate_2_0=rulePredicateList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxisStepRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_2_0, 
        		"PredicateList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForwardStep
entryRuleForwardStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForwardStepRule()); }
	 iv_ruleForwardStep=ruleForwardStep 
	 { $current=$iv_ruleForwardStep.current; } 
	 EOF 
;

// Rule ForwardStep
ruleForwardStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_forward_0_0=RULE_FORWARDAXIS
		{
			newLeafNode(lv_forward_0_0, grammarAccess.getForwardStepAccess().getForwardFORWARDAXISTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForwardStepRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"forward",
        		lv_forward_0_0, 
        		"FORWARDAXIS");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForwardStepAccess().getTestNodeTestParserRuleCall_0_1_0()); 
	    }
		lv_test_1_0=ruleNodeTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForwardStepRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"NodeTest");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getForwardStepAccess().getAbbrForwardAbbrevForwardStepParserRuleCall_1_0()); 
	    }
		lv_abbrForward_2_0=ruleAbbrevForwardStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForwardStepRule());
	        }
       		set(
       			$current, 
       			"abbrForward",
        		lv_abbrForward_2_0, 
        		"AbbrevForwardStep");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAbbrevForwardStep
entryRuleAbbrevForwardStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbbrevForwardStepRule()); }
	 iv_ruleAbbrevForwardStep=ruleAbbrevForwardStep 
	 { $current=$iv_ruleAbbrevForwardStep.current; } 
	 EOF 
;

// Rule AbbrevForwardStep
ruleAbbrevForwardStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbbrevForwardStepAccess().getCommercialAtKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAbbrevForwardStepAccess().getTestNodeTestParserRuleCall_1_0()); 
	    }
		lv_test_1_0=ruleNodeTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbbrevForwardStepRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"NodeTest");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReverseStep
entryRuleReverseStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReverseStepRule()); }
	 iv_ruleReverseStep=ruleReverseStep 
	 { $current=$iv_ruleReverseStep.current; } 
	 EOF 
;

// Rule ReverseStep
ruleReverseStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_reverse_0_0=RULE_REVERSEAXIS
		{
			newLeafNode(lv_reverse_0_0, grammarAccess.getReverseStepAccess().getReverseREVERSEAXISTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReverseStepRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"reverse",
        		lv_reverse_0_0, 
        		"REVERSEAXIS");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReverseStepAccess().getTestNodeTestParserRuleCall_0_1_0()); 
	    }
		lv_test_1_0=ruleNodeTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReverseStepRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"NodeTest");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_abbrRevSet_2_0=RULE_ABBREVREVERSESTEP
		{
			newLeafNode(lv_abbrRevSet_2_0, grammarAccess.getReverseStepAccess().getAbbrRevSetABBREVREVERSESTEPTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReverseStepRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"abbrRevSet",
        		lv_abbrRevSet_2_0, 
        		"ABBREVREVERSESTEP");
	    }

)
))
;





// Entry rule entryRuleNodeTest
entryRuleNodeTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeTestRule()); }
	 iv_ruleNodeTest=ruleNodeTest 
	 { $current=$iv_ruleNodeTest.current; } 
	 EOF 
;

// Rule NodeTest
ruleNodeTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeTestAccess().getKindTestKindTestParserRuleCall_0_0()); 
	    }
		lv_kindTest_0_0=ruleKindTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeTestRule());
	        }
       		set(
       			$current, 
       			"kindTest",
        		lv_kindTest_0_0, 
        		"KindTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeTestAccess().getNodeTestNameTestParserRuleCall_1_0()); 
	    }
		lv_nodeTest_1_0=ruleNameTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeTestRule());
	        }
       		set(
       			$current, 
       			"nodeTest",
        		lv_nodeTest_1_0, 
        		"NameTest");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNameTest
entryRuleNameTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameTestRule()); }
	 iv_ruleNameTest=ruleNameTest 
	 { $current=$iv_ruleNameTest.current; } 
	 EOF 
;

// Rule NameTest
ruleNameTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_qName_0_0=RULE_ID
		{
			newLeafNode(lv_qName_0_0, grammarAccess.getNameTestAccess().getQNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameTestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"qName",
        		lv_qName_0_0, 
        		"ID");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNameTestAccess().getWildcardWildcardParserRuleCall_1_0()); 
	    }
		lv_wildcard_1_0=ruleWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameTestRule());
	        }
       		set(
       			$current, 
       			"wildcard",
        		lv_wildcard_1_0, 
        		"Wildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWildcard
entryRuleWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWildcardRule()); }
	 iv_ruleWildcard=ruleWildcard 
	 { $current=$iv_ruleWildcard.current; } 
	 EOF 
;

// Rule Wildcard
ruleWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_wild_0_0=	'*' 
    {
        newLeafNode(lv_wild_0_0, grammarAccess.getWildcardAccess().getWildAsteriskKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWildcardRule());
	        }
       		setWithLastConsumed($current, "wild", lv_wild_0_0, "*");
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getWildcardAccess().getLeftNCNameParserRuleCall_1_0_0()); 
	    }
		lv_left_1_0=ruleNCName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWildcardRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"NCName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWildcardAccess().getColonKeyword_1_1());
    }
	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWildcardAccess().getAsteriskKeyword_1_2());
    }
)
    |(	otherlv_4='*' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWildcardAccess().getAsteriskKeyword_2_0());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getWildcardAccess().getColonKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWildcardAccess().getRightNCNameParserRuleCall_2_2_0()); 
	    }
		lv_right_6_0=ruleNCName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWildcardRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"NCName");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFilterExpr
entryRuleFilterExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterExprRule()); }
	 iv_ruleFilterExpr=ruleFilterExpr 
	 { $current=$iv_ruleFilterExpr.current; } 
	 EOF 
;

// Rule FilterExpr
ruleFilterExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFilterExprAccess().getPrimaryPrimaryExprParserRuleCall_0_0()); 
	    }
		lv_primary_0_0=rulePrimaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterExprRule());
	        }
       		set(
       			$current, 
       			"primary",
        		lv_primary_0_0, 
        		"PrimaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterExprAccess().getPredicatePredicateListParserRuleCall_1_0()); 
	    }
		lv_predicate_1_0=rulePredicateList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterExprRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_1_0, 
        		"PredicateList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePredicateList
entryRulePredicateList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateListRule()); }
	 iv_rulePredicateList=rulePredicateList 
	 { $current=$iv_rulePredicateList.current; } 
	 EOF 
;

// Rule PredicateList
rulePredicateList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateListAccess().getPredicateListAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateListAccess().getPredicatesPredicateParserRuleCall_1_0()); 
	    }
		lv_predicates_1_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateListRule());
	        }
       		add(
       			$current, 
       			"predicates",
        		lv_predicates_1_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current; } 
	 EOF 
;

// Rule Predicate
rulePredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getExprExprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	 iv_rulePrimaryExpr=rulePrimaryExpr 
	 { $current=$iv_rulePrimaryExpr.current; } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExprAccess().getLiteralLiteralParserRuleCall_0_0()); 
	    }
		lv_literal_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_0_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExprAccess().getVarRefVarRefParserRuleCall_1_0()); 
	    }
		lv_varRef_1_0=ruleVarRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
	        }
       		set(
       			$current, 
       			"varRef",
        		lv_varRef_1_0, 
        		"VarRef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExprAccess().getParExprParenthesizedExprParserRuleCall_2_0()); 
	    }
		lv_parExpr_2_0=ruleParenthesizedExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
	        }
       		set(
       			$current, 
       			"parExpr",
        		lv_parExpr_2_0, 
        		"ParenthesizedExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_conItemExpr_3_0=RULE_CONTEXTITEMEXPR
		{
			newLeafNode(lv_conItemExpr_3_0, grammarAccess.getPrimaryExprAccess().getConItemExprCONTEXTITEMEXPRTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"conItemExpr",
        		lv_conItemExpr_3_0, 
        		"CONTEXTITEMEXPR");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExprAccess().getFunctionCallFunctionCallParserRuleCall_4_0()); 
	    }
		lv_functionCall_4_0=ruleFunctionCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
	        }
       		set(
       			$current, 
       			"functionCall",
        		lv_functionCall_4_0, 
        		"FunctionCall");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getNumNumericLiteralParserRuleCall_0_0()); 
	    }
		lv_num_0_0=ruleNumericLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"num",
        		lv_num_0_0, 
        		"NumericLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_string_1_0=RULE_STRINGLITERAL
		{
			newLeafNode(lv_string_1_0, grammarAccess.getLiteralAccess().getStringSTRINGLITERALTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_1_0, 
        		"STRINGLITERAL");
	    }

)
))
;





// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	 iv_ruleNumericLiteral=ruleNumericLiteral 
	 { $current=$iv_ruleNumericLiteral.current; } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_intLit_0_0=RULE_INTLITERAL
		{
			newLeafNode(lv_intLit_0_0, grammarAccess.getNumericLiteralAccess().getIntLitINTLITERALTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumericLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intLit",
        		lv_intLit_0_0, 
        		"INTLITERAL");
	    }

)
)
    |(
(
		lv_decLit_1_0=RULE_DECIMALLITERAL
		{
			newLeafNode(lv_decLit_1_0, grammarAccess.getNumericLiteralAccess().getDecLitDECIMALLITERALTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumericLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"decLit",
        		lv_decLit_1_0, 
        		"DECIMALLITERAL");
	    }

)
)
    |(
(
		lv_doubleLit_2_0=RULE_DOUBLELITERAL
		{
			newLeafNode(lv_doubleLit_2_0, grammarAccess.getNumericLiteralAccess().getDoubleLitDOUBLELITERALTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumericLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"doubleLit",
        		lv_doubleLit_2_0, 
        		"DOUBLELITERAL");
	    }

)
))
;





// Entry rule entryRuleVarRef
entryRuleVarRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRefRule()); }
	 iv_ruleVarRef=ruleVarRef 
	 { $current=$iv_ruleVarRef.current; } 
	 EOF 
;

// Rule VarRef
ruleVarRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='$' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVarRefAccess().getDollarSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getVarRefAccess().getVarNameParserRuleCall_1()); 
    }
    this_VarName_1=ruleVarName
    { 
        $current = $this_VarName_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVarName
entryRuleVarName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarNameRule()); }
	 iv_ruleVarName=ruleVarName 
	 { $current=$iv_ruleVarName.current; } 
	 EOF 
;

// Rule VarName
ruleVarName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_qName_0_0=RULE_ID
		{
			newLeafNode(lv_qName_0_0, grammarAccess.getVarNameAccess().getQNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"qName",
        		lv_qName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleParenthesizedExpr
entryRuleParenthesizedExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExprRule()); }
	 iv_ruleParenthesizedExpr=ruleParenthesizedExpr 
	 { $current=$iv_ruleParenthesizedExpr.current; } 
	 EOF 
;

// Rule ParenthesizedExpr
ruleParenthesizedExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParenthesizedExprAccess().getParenthesizedExprAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParenthesizedExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExprAccess().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParenthesizedExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_qName_0_0=RULE_ID
		{
			newLeafNode(lv_qName_0_0, grammarAccess.getFunctionCallAccess().getQNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"qName",
        		lv_qName_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getExprExprSingleParserRuleCall_2_0_0()); 
	    }
		lv_expr_2_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getExprsExprSingleParserRuleCall_2_1_1_0()); 
	    }
		lv_exprs_4_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_4_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSingleType
entryRuleSingleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleTypeRule()); }
	 iv_ruleSingleType=ruleSingleType 
	 { $current=$iv_ruleSingleType.current; } 
	 EOF 
;

// Rule SingleType
ruleSingleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSingleTypeAccess().getAtomicTypeParserRuleCall_0()); 
    }
    this_AtomicType_0=ruleAtomicType
    { 
        $current = $this_AtomicType_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSingleTypeAccess().getQuestionMarkKeyword_1());
    }
)?)
;





// Entry rule entryRuleSequenceType
entryRuleSequenceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceTypeRule()); }
	 iv_ruleSequenceType=ruleSequenceType 
	 { $current=$iv_ruleSequenceType.current; } 
	 EOF 
;

// Rule SequenceType
ruleSequenceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_empty_0_0=RULE_EMPTYSEQUENCETYPE
		{
			newLeafNode(lv_empty_0_0, grammarAccess.getSequenceTypeAccess().getEmptyEMPTYSEQUENCETYPETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"empty",
        		lv_empty_0_0, 
        		"EMPTYSEQUENCETYPE");
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceTypeAccess().getItemTypeItemTypeParserRuleCall_1_0_0()); 
	    }
		lv_itemType_1_0=ruleItemType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceTypeRule());
	        }
       		set(
       			$current, 
       			"itemType",
        		lv_itemType_1_0, 
        		"ItemType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceTypeAccess().getOccIndOccurenceIndicatorParserRuleCall_1_1_0()); 
	    }
		lv_occInd_2_0=ruleOccurenceIndicator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceTypeRule());
	        }
       		set(
       			$current, 
       			"occInd",
        		lv_occInd_2_0, 
        		"OccurenceIndicator");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleOccurenceIndicator
entryRuleOccurenceIndicator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOccurenceIndicatorRule()); } 
	 iv_ruleOccurenceIndicator=ruleOccurenceIndicator 
	 { $current=$iv_ruleOccurenceIndicator.current.getText(); }  
	 EOF 
;

// Rule OccurenceIndicator
ruleOccurenceIndicator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOccurenceIndicatorAccess().getQuestionMarkKeyword_0()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOccurenceIndicatorAccess().getAsteriskKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOccurenceIndicatorAccess().getPlusSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleItemType
entryRuleItemType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemTypeRule()); }
	 iv_ruleItemType=ruleItemType 
	 { $current=$iv_ruleItemType.current; } 
	 EOF 
;

// Rule ItemType
ruleItemType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getItemTypeAccess().getKindTestKindTestParserRuleCall_0_0()); 
	    }
		lv_kindTest_0_0=ruleKindTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemTypeRule());
	        }
       		set(
       			$current, 
       			"kindTest",
        		lv_kindTest_0_0, 
        		"KindTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_empty_1_0=RULE_EMPTYITEMTYPE
		{
			newLeafNode(lv_empty_1_0, grammarAccess.getItemTypeAccess().getEmptyEMPTYITEMTYPETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"empty",
        		lv_empty_1_0, 
        		"EMPTYITEMTYPE");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getItemTypeAccess().getAtomicTypeAtomicTypeParserRuleCall_2_0()); 
	    }
		lv_atomicType_2_0=ruleAtomicType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemTypeRule());
	        }
       		set(
       			$current, 
       			"atomicType",
        		lv_atomicType_2_0, 
        		"AtomicType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAtomicType
entryRuleAtomicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicTypeRule()); }
	 iv_ruleAtomicType=ruleAtomicType 
	 { $current=$iv_ruleAtomicType.current; } 
	 EOF 
;

// Rule AtomicType
ruleAtomicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getAtomicTypeAccess().getTypeIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleKindTest
entryRuleKindTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKindTestRule()); }
	 iv_ruleKindTest=ruleKindTest 
	 { $current=$iv_ruleKindTest.current; } 
	 EOF 
;

// Rule KindTest
ruleKindTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getKindTestAccess().getDocTestDocumentTestParserRuleCall_0_0()); 
	    }
		lv_docTest_0_0=ruleDocumentTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKindTestRule());
	        }
       		set(
       			$current, 
       			"docTest",
        		lv_docTest_0_0, 
        		"DocumentTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKindTestAccess().getElemTestElementTestParserRuleCall_1_0()); 
	    }
		lv_elemTest_1_0=ruleElementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKindTestRule());
	        }
       		set(
       			$current, 
       			"elemTest",
        		lv_elemTest_1_0, 
        		"ElementTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKindTestAccess().getAttributeTestAttributeTestParserRuleCall_2_0()); 
	    }
		lv_attributeTest_2_0=ruleAttributeTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKindTestRule());
	        }
       		set(
       			$current, 
       			"attributeTest",
        		lv_attributeTest_2_0, 
        		"AttributeTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKindTestAccess().getSchemaElemTestSchemaElementTestParserRuleCall_3_0()); 
	    }
		lv_schemaElemTest_3_0=ruleSchemaElementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKindTestRule());
	        }
       		set(
       			$current, 
       			"schemaElemTest",
        		lv_schemaElemTest_3_0, 
        		"SchemaElementTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKindTestAccess().getSchemaAttributeTestSchemaAttributeTestParserRuleCall_4_0()); 
	    }
		lv_schemaAttributeTest_4_0=ruleSchemaAttributeTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKindTestRule());
	        }
       		set(
       			$current, 
       			"schemaAttributeTest",
        		lv_schemaAttributeTest_4_0, 
        		"SchemaAttributeTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKindTestAccess().getPitTestPITestParserRuleCall_5_0()); 
	    }
		lv_pitTest_5_0=rulePITest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKindTestRule());
	        }
       		set(
       			$current, 
       			"pitTest",
        		lv_pitTest_5_0, 
        		"PITest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_commentTest_6_0=RULE_COMMENTTEST
		{
			newLeafNode(lv_commentTest_6_0, grammarAccess.getKindTestAccess().getCommentTestCOMMENTTESTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKindTestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"commentTest",
        		lv_commentTest_6_0, 
        		"COMMENTTEST");
	    }

)
)
    |(
(
		lv_textTest_7_0=RULE_TEXTTEST
		{
			newLeafNode(lv_textTest_7_0, grammarAccess.getKindTestAccess().getTextTestTEXTTESTTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKindTestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"textTest",
        		lv_textTest_7_0, 
        		"TEXTTEST");
	    }

)
)
    |(
(
		lv_anyKindTest_8_0=RULE_ANYKINDTEST
		{
			newLeafNode(lv_anyKindTest_8_0, grammarAccess.getKindTestAccess().getAnyKindTestANYKINDTESTTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKindTestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"anyKindTest",
        		lv_anyKindTest_8_0, 
        		"ANYKINDTEST");
	    }

)
))
;





// Entry rule entryRuleDocumentTest
entryRuleDocumentTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentTestRule()); }
	 iv_ruleDocumentTest=ruleDocumentTest 
	 { $current=$iv_ruleDocumentTest.current; } 
	 EOF 
;

// Rule DocumentTest
ruleDocumentTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDocumentTestAccess().getDocumentTestAction_0(),
            $current);
    }
)	otherlv_1='document-node' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDocumentTestAccess().getDocumentNodeKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDocumentTestAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentTestAccess().getElemTestElementTestParserRuleCall_3_0_0()); 
	    }
		lv_elemTest_3_0=ruleElementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentTestRule());
	        }
       		set(
       			$current, 
       			"elemTest",
        		lv_elemTest_3_0, 
        		"ElementTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentTestAccess().getSchemaElemTestSchemaElementTestParserRuleCall_3_1_0()); 
	    }
		lv_schemaElemTest_4_0=ruleSchemaElementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentTestRule());
	        }
       		set(
       			$current, 
       			"schemaElemTest",
        		lv_schemaElemTest_4_0, 
        		"SchemaElementTest");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDocumentTestAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRulePITest
entryRulePITest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPITestRule()); }
	 iv_rulePITest=rulePITest 
	 { $current=$iv_rulePITest.current; } 
	 EOF 
;

// Rule PITest
rulePITest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPITestAccess().getPITTestAction_0(),
            $current);
    }
)	otherlv_1='processing-instruction' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPITestAccess().getProcessingInstructionKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPITestAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPITestAccess().getNcNameNCNameParserRuleCall_3_0_0()); 
	    }
		lv_ncName_3_0=ruleNCName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPITestRule());
	        }
       		set(
       			$current, 
       			"ncName",
        		lv_ncName_3_0, 
        		"NCName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_string_4_0=RULE_STRINGLITERAL
		{
			newLeafNode(lv_string_4_0, grammarAccess.getPITestAccess().getStringSTRINGLITERALTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPITestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_4_0, 
        		"STRINGLITERAL");
	    }

)
))?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPITestAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAttributeTest
entryRuleAttributeTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeTestRule()); }
	 iv_ruleAttributeTest=ruleAttributeTest 
	 { $current=$iv_ruleAttributeTest.current; } 
	 EOF 
;

// Rule AttributeTest
ruleAttributeTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeTestAccess().getAttributeTestAction_0(),
            $current);
    }
)	otherlv_1='attribute' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeTestAccess().getAttributeKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeTestAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeTestAccess().getAttrOrWildAttribNameOrWildcardParserRuleCall_3_0_0()); 
	    }
		lv_attrOrWild_3_0=ruleAttribNameOrWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeTestRule());
	        }
       		set(
       			$current, 
       			"attrOrWild",
        		lv_attrOrWild_3_0, 
        		"AttribNameOrWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeTestAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeTestAccess().getTypeNameTypeNameParserRuleCall_3_1_1_0()); 
	    }
		lv_typeName_5_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeTestRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_5_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttributeTestAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAttribNameOrWildcard
entryRuleAttribNameOrWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttribNameOrWildcardRule()); }
	 iv_ruleAttribNameOrWildcard=ruleAttribNameOrWildcard 
	 { $current=$iv_ruleAttribNameOrWildcard.current; } 
	 EOF 
;

// Rule AttribNameOrWildcard
ruleAttribNameOrWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttribNameOrWildcardAccess().getAttNameAttributeNameParserRuleCall_0_0()); 
	    }
		lv_attName_0_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttribNameOrWildcardRule());
	        }
       		set(
       			$current, 
       			"attName",
        		lv_attName_0_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttribNameOrWildcardAccess().getAttribNameOrWildcardAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttribNameOrWildcardAccess().getAsteriskKeyword_1_1());
    }
))
;





// Entry rule entryRuleSchemaAttributeTest
entryRuleSchemaAttributeTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSchemaAttributeTestRule()); }
	 iv_ruleSchemaAttributeTest=ruleSchemaAttributeTest 
	 { $current=$iv_ruleSchemaAttributeTest.current; } 
	 EOF 
;

// Rule SchemaAttributeTest
ruleSchemaAttributeTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='schema-attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSchemaAttributeTestAccess().getSchemaAttributeKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSchemaAttributeTestAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAttributeTestAccess().getAttDecAttributeDeclarationParserRuleCall_2_0()); 
	    }
		lv_attDec_2_0=ruleAttributeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaAttributeTestRule());
	        }
       		set(
       			$current, 
       			"attDec",
        		lv_attDec_2_0, 
        		"AttributeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSchemaAttributeTestAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeDeclarationRule()); }
	 iv_ruleAttributeDeclaration=ruleAttributeDeclaration 
	 { $current=$iv_ruleAttributeDeclaration.current; } 
	 EOF 
;

// Rule AttributeDeclaration
ruleAttributeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeDeclarationAccess().getAttNameAttributeNameParserRuleCall_0()); 
	    }
		lv_attName_0_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeDeclarationRule());
	        }
       		set(
       			$current, 
       			"attName",
        		lv_attName_0_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleElementTest
entryRuleElementTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementTestRule()); }
	 iv_ruleElementTest=ruleElementTest 
	 { $current=$iv_ruleElementTest.current; } 
	 EOF 
;

// Rule ElementTest
ruleElementTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElementTestAccess().getElementTestAction_0(),
            $current);
    }
)	otherlv_1='element' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementTestAccess().getElementKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElementTestAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getElementTestAccess().getElemOrWildElementNameOrWildcardParserRuleCall_3_0_0()); 
	    }
		lv_elemOrWild_3_0=ruleElementNameOrWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementTestRule());
	        }
       		set(
       			$current, 
       			"elemOrWild",
        		lv_elemOrWild_3_0, 
        		"ElementNameOrWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getElementTestAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementTestAccess().getTypeNameTypeNameParserRuleCall_3_1_1_0()); 
	    }
		lv_typeName_5_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementTestRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_5_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='?' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getElementTestAccess().getQuestionMarkKeyword_3_1_2());
    }
)?)?)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getElementTestAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleElementNameOrWildcard
entryRuleElementNameOrWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementNameOrWildcardRule()); }
	 iv_ruleElementNameOrWildcard=ruleElementNameOrWildcard 
	 { $current=$iv_ruleElementNameOrWildcard.current; } 
	 EOF 
;

// Rule ElementNameOrWildcard
ruleElementNameOrWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getElementNameOrWildcardAccess().getElemNameElementNameParserRuleCall_0_0()); 
	    }
		lv_elemName_0_0=ruleElementName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementNameOrWildcardRule());
	        }
       		set(
       			$current, 
       			"elemName",
        		lv_elemName_0_0, 
        		"ElementName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElementNameOrWildcardAccess().getElementNameOrWildcardAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElementNameOrWildcardAccess().getAsteriskKeyword_1_1());
    }
))
;





// Entry rule entryRuleSchemaElementTest
entryRuleSchemaElementTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSchemaElementTestRule()); }
	 iv_ruleSchemaElementTest=ruleSchemaElementTest 
	 { $current=$iv_ruleSchemaElementTest.current; } 
	 EOF 
;

// Rule SchemaElementTest
ruleSchemaElementTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='schema-element' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSchemaElementTestAccess().getSchemaElementKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSchemaElementTestAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaElementTestAccess().getElemDecElementDeclarationParserRuleCall_2_0()); 
	    }
		lv_elemDec_2_0=ruleElementDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaElementTestRule());
	        }
       		set(
       			$current, 
       			"elemDec",
        		lv_elemDec_2_0, 
        		"ElementDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSchemaElementTestAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleElementDeclaration
entryRuleElementDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementDeclarationRule()); }
	 iv_ruleElementDeclaration=ruleElementDeclaration 
	 { $current=$iv_ruleElementDeclaration.current; } 
	 EOF 
;

// Rule ElementDeclaration
ruleElementDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getElementDeclarationAccess().getElementNameParserRuleCall()); 
    }
    this_ElementName_0=ruleElementName
    { 
        $current = $this_ElementName_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeNameRule()); }
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current; } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_qName_0_0=RULE_ID
		{
			newLeafNode(lv_qName_0_0, grammarAccess.getAttributeNameAccess().getQNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"qName",
        		lv_qName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleElementName
entryRuleElementName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementNameRule()); }
	 iv_ruleElementName=ruleElementName 
	 { $current=$iv_ruleElementName.current; } 
	 EOF 
;

// Rule ElementName
ruleElementName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_qName_0_0=RULE_ID
		{
			newLeafNode(lv_qName_0_0, grammarAccess.getElementNameAccess().getQNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"qName",
        		lv_qName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	 iv_ruleTypeName=ruleTypeName 
	 { $current=$iv_ruleTypeName.current; } 
	 EOF 
;

// Rule TypeName
ruleTypeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_qName_0_0=RULE_ID
		{
			newLeafNode(lv_qName_0_0, grammarAccess.getTypeNameAccess().getQNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"qName",
        		lv_qName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleNCName
entryRuleNCName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNCNameRule()); }
	 iv_ruleNCName=ruleNCName 
	 { $current=$iv_ruleNCName.current; } 
	 EOF 
;

// Rule NCName
ruleNCName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_ncName_0_0=RULE_ID
		{
			newLeafNode(lv_ncName_0_0, grammarAccess.getNCNameAccess().getNcNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNCNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ncName",
        		lv_ncName_0_0, 
        		"ID");
	    }

)
)
;





RULE_ABBREVREVERSESTEP : '..';

RULE_CONTEXTITEMEXPR : '.';

RULE_ANYKINDTEST : 'node' '(' ')';

RULE_TEXTTEST : 'text' '(' ')';

RULE_COMMENTTEST : 'comment' '(' ')';

RULE_EMPTYITEMTYPE : 'item' '(' ')';

RULE_EMPTYSEQUENCETYPE : 'empty-sequence' '(' ')';

RULE_REVERSEAXIS : ('parent' '::'|'ancestor' '::'|'preceding-sibling' '::'|'preceding' '::'|'ancestor-or-self' '::');

RULE_FORWARDAXIS : ('child' '::'|'descendant' '::'|'attribute' '::'|'self' '::'|'descendant-or-self' '::'|'following-sibling' '::'|'following' '::'|'namespace' '::');

RULE_NODECOMP : ('is'|'<<'|'>>');

RULE_VALUECOMP : ('eq'|'ne'|'lt'|'le'|'gt'|'ge');

RULE_GENERALCOMP : ('='|'!='|'<'|'<='|'>'|'>=');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INTLITERAL : ('0'..'9')+;

RULE_DECIMALLITERAL : ('.' RULE_INTLITERAL|RULE_INTLITERAL '.' RULE_INTLITERAL);

RULE_DOUBLELITERAL : ('.' RULE_INTLITERAL|RULE_INTLITERAL ('.' ('0'..'9')*)?) ('e'|'E') ('+'|'-')? RULE_INTLITERAL;

RULE_STRINGLITERAL : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;


