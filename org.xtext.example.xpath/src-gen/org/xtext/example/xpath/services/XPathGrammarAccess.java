/*
* generated by Xtext
*/
package org.xtext.example.xpath.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class XPathGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprSingleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprSingleExprSingleParserRuleCall_0_0 = (RuleCall)cExprSingleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprsSingleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprsSingleExprSingleParserRuleCall_1_1_0 = (RuleCall)cExprsSingleAssignment_1_1.eContents().get(0);
		
		////Removed ? from "/" singlePath=RelativePathExpr? in RelativePathExpr because this caused the grammar to be 
		////ambiguous, couldn't work out how to solve this.
		////Did the same for occInd=OccurenceIndicator? This also gave an ambiguity error but should be addressed.
		//Expr:
		//	exprSingle=ExprSingle ("," exprsSingle+=ExprSingle)*;
		public ParserRule getRule() { return rule; }

		//exprSingle=ExprSingle ("," exprsSingle+=ExprSingle)*
		public Group getGroup() { return cGroup; }

		//exprSingle=ExprSingle
		public Assignment getExprSingleAssignment_0() { return cExprSingleAssignment_0; }

		//ExprSingle
		public RuleCall getExprSingleExprSingleParserRuleCall_0_0() { return cExprSingleExprSingleParserRuleCall_0_0; }

		//("," exprsSingle+=ExprSingle)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//exprsSingle+=ExprSingle
		public Assignment getExprsSingleAssignment_1_1() { return cExprsSingleAssignment_1_1; }

		//ExprSingle
		public RuleCall getExprsSingleExprSingleParserRuleCall_1_1_0() { return cExprsSingleExprSingleParserRuleCall_1_1_0; }
	}

	public class ExprSingleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSingle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuantifiedExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ExprSingle:
		//	ForExpr | QuantifiedExpr | IfExpr | OrExpr;
		public ParserRule getRule() { return rule; }

		//ForExpr | QuantifiedExpr | IfExpr | OrExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//ForExpr
		public RuleCall getForExprParserRuleCall_0() { return cForExprParserRuleCall_0; }

		//QuantifiedExpr
		public RuleCall getQuantifiedExprParserRuleCall_1() { return cQuantifiedExprParserRuleCall_1; }

		//IfExpr
		public RuleCall getIfExprParserRuleCall_2() { return cIfExprParserRuleCall_2; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_3() { return cOrExprParserRuleCall_3; }
	}

	public class ForExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cForAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cForSimpleForClauseParserRuleCall_0_0 = (RuleCall)cForAssignment_0.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnExprSingleParserRuleCall_2_0 = (RuleCall)cReturnAssignment_2.eContents().get(0);
		
		//ForExpr:
		//	for=SimpleForClause "return" return=ExprSingle;
		public ParserRule getRule() { return rule; }

		//for=SimpleForClause "return" return=ExprSingle
		public Group getGroup() { return cGroup; }

		//for=SimpleForClause
		public Assignment getForAssignment_0() { return cForAssignment_0; }

		//SimpleForClause
		public RuleCall getForSimpleForClauseParserRuleCall_0_0() { return cForSimpleForClauseParserRuleCall_0_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//return=ExprSingle
		public Assignment getReturnAssignment_2() { return cReturnAssignment_2; }

		//ExprSingle
		public RuleCall getReturnExprSingleParserRuleCall_2_0() { return cReturnExprSingleParserRuleCall_2_0; }
	}

	public class SimpleForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cForVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cForVarVarNameParserRuleCall_2_0 = (RuleCall)cForVarAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInExprSingleParserRuleCall_4_0 = (RuleCall)cInAssignment_4.eContents().get(0);
		private final Assignment cAdditionalInAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAdditionalInAdditionalInParserRuleCall_5_0 = (RuleCall)cAdditionalInAssignment_5.eContents().get(0);
		
		//SimpleForClause:
		//	"for" "$" forVar=VarName "in" in=ExprSingle additionalIn+=AdditionalIn*;
		public ParserRule getRule() { return rule; }

		//"for" "$" forVar=VarName "in" in=ExprSingle additionalIn+=AdditionalIn*
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }

		//forVar=VarName
		public Assignment getForVarAssignment_2() { return cForVarAssignment_2; }

		//VarName
		public RuleCall getForVarVarNameParserRuleCall_2_0() { return cForVarVarNameParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//in=ExprSingle
		public Assignment getInAssignment_4() { return cInAssignment_4; }

		//ExprSingle
		public RuleCall getInExprSingleParserRuleCall_4_0() { return cInExprSingleParserRuleCall_4_0; }

		//additionalIn+=AdditionalIn*
		public Assignment getAdditionalInAssignment_5() { return cAdditionalInAssignment_5; }

		//AdditionalIn
		public RuleCall getAdditionalInAdditionalInParserRuleCall_5_0() { return cAdditionalInAdditionalInParserRuleCall_5_0; }
	}

	public class AdditionalInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionalIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVarNameParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInExprSingleParserRuleCall_4_0 = (RuleCall)cInAssignment_4.eContents().get(0);
		
		//AdditionalIn:
		//	"," "$" variable=VarName "in" in=ExprSingle;
		public ParserRule getRule() { return rule; }

		//"," "$" variable=VarName "in" in=ExprSingle
		public Group getGroup() { return cGroup; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }

		//variable=VarName
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VarName
		public RuleCall getVariableVarNameParserRuleCall_2_0() { return cVariableVarNameParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//in=ExprSingle
		public Assignment getInAssignment_4() { return cInAssignment_4; }

		//ExprSingle
		public RuleCall getInExprSingleParserRuleCall_4_0() { return cInExprSingleParserRuleCall_4_0; }
	}

	public class QuantifiedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantifiedExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSomeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEveryKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVarNameParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInExprSingleParserRuleCall_4_0 = (RuleCall)cInAssignment_4.eContents().get(0);
		private final Assignment cAdditionalInAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAdditionalInAdditionalInParserRuleCall_5_0 = (RuleCall)cAdditionalInAssignment_5.eContents().get(0);
		private final Keyword cSatisfiesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSatisfyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSatisfyExprSingleParserRuleCall_7_0 = (RuleCall)cSatisfyAssignment_7.eContents().get(0);
		
		//QuantifiedExpr:
		//	("some" | "every") "$" variable=VarName "in" in=ExprSingle additionalIn+=AdditionalIn* "satisfies" satisfy=ExprSingle;
		public ParserRule getRule() { return rule; }

		//("some" | "every") "$" variable=VarName "in" in=ExprSingle additionalIn+=AdditionalIn* "satisfies" satisfy=ExprSingle
		public Group getGroup() { return cGroup; }

		//"some" | "every"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"some"
		public Keyword getSomeKeyword_0_0() { return cSomeKeyword_0_0; }

		//"every"
		public Keyword getEveryKeyword_0_1() { return cEveryKeyword_0_1; }

		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }

		//variable=VarName
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VarName
		public RuleCall getVariableVarNameParserRuleCall_2_0() { return cVariableVarNameParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//in=ExprSingle
		public Assignment getInAssignment_4() { return cInAssignment_4; }

		//ExprSingle
		public RuleCall getInExprSingleParserRuleCall_4_0() { return cInExprSingleParserRuleCall_4_0; }

		//additionalIn+=AdditionalIn*
		public Assignment getAdditionalInAssignment_5() { return cAdditionalInAssignment_5; }

		//AdditionalIn
		public RuleCall getAdditionalInAdditionalInParserRuleCall_5_0() { return cAdditionalInAdditionalInParserRuleCall_5_0; }

		//"satisfies"
		public Keyword getSatisfiesKeyword_6() { return cSatisfiesKeyword_6; }

		//satisfy=ExprSingle
		public Assignment getSatisfyAssignment_7() { return cSatisfyAssignment_7; }

		//ExprSingle
		public RuleCall getSatisfyExprSingleParserRuleCall_7_0() { return cSatisfyExprSingleParserRuleCall_7_0; }
	}

	public class IfExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfExprParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenExprSingleParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Keyword cElseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElseExprSingleParserRuleCall_7_0 = (RuleCall)cElseAssignment_7.eContents().get(0);
		
		//IfExpr:
		//	"if" "(" if=Expr ")" "then" then=ExprSingle "else" else=ExprSingle;
		public ParserRule getRule() { return rule; }

		//"if" "(" if=Expr ")" "then" then=ExprSingle "else" else=ExprSingle
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//if=Expr
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }

		//Expr
		public RuleCall getIfExprParserRuleCall_2_0() { return cIfExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//then=ExprSingle
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//ExprSingle
		public RuleCall getThenExprSingleParserRuleCall_5_0() { return cThenExprSingleParserRuleCall_5_0; }

		//"else"
		public Keyword getElseKeyword_6() { return cElseKeyword_6; }

		//else=ExprSingle
		public Assignment getElseAssignment_7() { return cElseAssignment_7; }

		//ExprSingle
		public RuleCall getElseExprSingleParserRuleCall_7_0() { return cElseExprSingleParserRuleCall_7_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAndExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightsAndExprParserRuleCall_1_1_0 = (RuleCall)cRightsAssignment_1_1.eContents().get(0);
		
		//OrExpr:
		//	left=AndExpr ("or" rights+=AndExpr)*;
		public ParserRule getRule() { return rule; }

		//left=AndExpr ("or" rights+=AndExpr)*
		public Group getGroup() { return cGroup; }

		//left=AndExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//AndExpr
		public RuleCall getLeftAndExprParserRuleCall_0_0() { return cLeftAndExprParserRuleCall_0_0; }

		//("or" rights+=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//rights+=AndExpr
		public Assignment getRightsAssignment_1_1() { return cRightsAssignment_1_1; }

		//AndExpr
		public RuleCall getRightsAndExprParserRuleCall_1_1_0() { return cRightsAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftComparisonExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightsComparisonExprParserRuleCall_1_1_0 = (RuleCall)cRightsAssignment_1_1.eContents().get(0);
		
		//AndExpr:
		//	left=ComparisonExpr ("and" rights+=ComparisonExpr)*;
		public ParserRule getRule() { return rule; }

		//left=ComparisonExpr ("and" rights+=ComparisonExpr)*
		public Group getGroup() { return cGroup; }

		//left=ComparisonExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//ComparisonExpr
		public RuleCall getLeftComparisonExprParserRuleCall_0_0() { return cLeftComparisonExprParserRuleCall_0_0; }

		//("and" rights+=ComparisonExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//rights+=ComparisonExpr
		public Assignment getRightsAssignment_1_1() { return cRightsAssignment_1_1; }

		//ComparisonExpr
		public RuleCall getRightsComparisonExprParserRuleCall_1_1_0() { return cRightsComparisonExprParserRuleCall_1_1_0; }
	}

	public class ComparisonExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangeRangeExprParserRuleCall_0_0 = (RuleCall)cRangeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueVALUECOMPTerminalRuleCall_1_0_0_0 = (RuleCall)cValueAssignment_1_0_0.eContents().get(0);
		private final Assignment cGenAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cGenGENERALCOMPTerminalRuleCall_1_0_1_0 = (RuleCall)cGenAssignment_1_0_1.eContents().get(0);
		private final Assignment cNodeAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNodeNODECOMPTerminalRuleCall_1_0_2_0 = (RuleCall)cNodeAssignment_1_0_2.eContents().get(0);
		private final Assignment cOtherRangeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOtherRangeRangeExprParserRuleCall_1_1_0 = (RuleCall)cOtherRangeAssignment_1_1.eContents().get(0);
		
		//ComparisonExpr:
		//	range=RangeExpr ((value=VALUECOMP | gen=GENERALCOMP | node=NODECOMP) otherRange=RangeExpr)?;
		public ParserRule getRule() { return rule; }

		//range=RangeExpr ((value=VALUECOMP | gen=GENERALCOMP | node=NODECOMP) otherRange=RangeExpr)?
		public Group getGroup() { return cGroup; }

		//range=RangeExpr
		public Assignment getRangeAssignment_0() { return cRangeAssignment_0; }

		//RangeExpr
		public RuleCall getRangeRangeExprParserRuleCall_0_0() { return cRangeRangeExprParserRuleCall_0_0; }

		//((value=VALUECOMP | gen=GENERALCOMP | node=NODECOMP) otherRange=RangeExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//value=VALUECOMP | gen=GENERALCOMP | node=NODECOMP
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//value=VALUECOMP
		public Assignment getValueAssignment_1_0_0() { return cValueAssignment_1_0_0; }

		//VALUECOMP
		public RuleCall getValueVALUECOMPTerminalRuleCall_1_0_0_0() { return cValueVALUECOMPTerminalRuleCall_1_0_0_0; }

		//gen=GENERALCOMP
		public Assignment getGenAssignment_1_0_1() { return cGenAssignment_1_0_1; }

		//GENERALCOMP
		public RuleCall getGenGENERALCOMPTerminalRuleCall_1_0_1_0() { return cGenGENERALCOMPTerminalRuleCall_1_0_1_0; }

		//node=NODECOMP
		public Assignment getNodeAssignment_1_0_2() { return cNodeAssignment_1_0_2; }

		//NODECOMP
		public RuleCall getNodeNODECOMPTerminalRuleCall_1_0_2_0() { return cNodeNODECOMPTerminalRuleCall_1_0_2_0; }

		//otherRange=RangeExpr
		public Assignment getOtherRangeAssignment_1_1() { return cOtherRangeAssignment_1_1; }

		//RangeExpr
		public RuleCall getOtherRangeRangeExprParserRuleCall_1_1_0() { return cOtherRangeRangeExprParserRuleCall_1_1_0; }
	}

	public class RangeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromAdditiveExprParserRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cToAdditiveExprParserRuleCall_1_1_0 = (RuleCall)cToAssignment_1_1.eContents().get(0);
		
		//RangeExpr:
		//	from=AdditiveExpr ("to" to=AdditiveExpr)?;
		public ParserRule getRule() { return rule; }

		//from=AdditiveExpr ("to" to=AdditiveExpr)?
		public Group getGroup() { return cGroup; }

		//from=AdditiveExpr
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//AdditiveExpr
		public RuleCall getFromAdditiveExprParserRuleCall_0_0() { return cFromAdditiveExprParserRuleCall_0_0; }

		//("to" to=AdditiveExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//to=AdditiveExpr
		public Assignment getToAssignment_1_1() { return cToAssignment_1_1; }

		//AdditiveExpr
		public RuleCall getToAdditiveExprParserRuleCall_1_1_0() { return cToAdditiveExprParserRuleCall_1_1_0; }
	}

	public class AdditiveExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftMultiplicativeExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cRightsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightsMultiplicativeExprParserRuleCall_1_1_0 = (RuleCall)cRightsAssignment_1_1.eContents().get(0);
		
		//AdditiveExpr:
		//	left=MultiplicativeExpr (("+" | "-") rights+=MultiplicativeExpr)*;
		public ParserRule getRule() { return rule; }

		//left=MultiplicativeExpr (("+" | "-") rights+=MultiplicativeExpr)*
		public Group getGroup() { return cGroup; }

		//left=MultiplicativeExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//MultiplicativeExpr
		public RuleCall getLeftMultiplicativeExprParserRuleCall_0_0() { return cLeftMultiplicativeExprParserRuleCall_0_0; }

		//(("+" | "-") rights+=MultiplicativeExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//rights+=MultiplicativeExpr
		public Assignment getRightsAssignment_1_1() { return cRightsAssignment_1_1; }

		//MultiplicativeExpr
		public RuleCall getRightsMultiplicativeExprParserRuleCall_1_1_0() { return cRightsMultiplicativeExprParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftUnionExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cDivKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cIdivKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cModKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Assignment cRightsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightsUnionExprParserRuleCall_1_1_0 = (RuleCall)cRightsAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpr:
		//	left=UnionExpr (("*" | "div" | "idiv" | "mod") rights+=UnionExpr)*;
		public ParserRule getRule() { return rule; }

		//left=UnionExpr (("*" | "div" | "idiv" | "mod") rights+=UnionExpr)*
		public Group getGroup() { return cGroup; }

		//left=UnionExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//UnionExpr
		public RuleCall getLeftUnionExprParserRuleCall_0_0() { return cLeftUnionExprParserRuleCall_0_0; }

		//(("*" | "div" | "idiv" | "mod") rights+=UnionExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "div" | "idiv" | "mod"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"div"
		public Keyword getDivKeyword_1_0_1() { return cDivKeyword_1_0_1; }

		//"idiv"
		public Keyword getIdivKeyword_1_0_2() { return cIdivKeyword_1_0_2; }

		//"mod"
		public Keyword getModKeyword_1_0_3() { return cModKeyword_1_0_3; }

		//rights+=UnionExpr
		public Assignment getRightsAssignment_1_1() { return cRightsAssignment_1_1; }

		//UnionExpr
		public RuleCall getRightsUnionExprParserRuleCall_1_1_0() { return cRightsUnionExprParserRuleCall_1_1_0; }
	}

	public class UnionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftIntersectExceptExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cUnionKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cRightsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightsIntersectExceptExprParserRuleCall_1_1_0 = (RuleCall)cRightsAssignment_1_1.eContents().get(0);
		
		//UnionExpr:
		//	left=IntersectExceptExpr (("union" | "|") rights+=IntersectExceptExpr)*;
		public ParserRule getRule() { return rule; }

		//left=IntersectExceptExpr (("union" | "|") rights+=IntersectExceptExpr)*
		public Group getGroup() { return cGroup; }

		//left=IntersectExceptExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//IntersectExceptExpr
		public RuleCall getLeftIntersectExceptExprParserRuleCall_0_0() { return cLeftIntersectExceptExprParserRuleCall_0_0; }

		//(("union" | "|") rights+=IntersectExceptExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"union" | "|"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"union"
		public Keyword getUnionKeyword_1_0_0() { return cUnionKeyword_1_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_1() { return cVerticalLineKeyword_1_0_1; }

		//rights+=IntersectExceptExpr
		public Assignment getRightsAssignment_1_1() { return cRightsAssignment_1_1; }

		//IntersectExceptExpr
		public RuleCall getRightsIntersectExceptExprParserRuleCall_1_1_0() { return cRightsIntersectExceptExprParserRuleCall_1_1_0; }
	}

	public class IntersectExceptExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntersectExceptExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftInstanceofExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cIntersectKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExceptKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cRightsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightsInstanceofExprParserRuleCall_1_1_0 = (RuleCall)cRightsAssignment_1_1.eContents().get(0);
		
		//IntersectExceptExpr:
		//	left=InstanceofExpr (("intersect" | "except") rights+=InstanceofExpr)*;
		public ParserRule getRule() { return rule; }

		//left=InstanceofExpr (("intersect" | "except") rights+=InstanceofExpr)*
		public Group getGroup() { return cGroup; }

		//left=InstanceofExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//InstanceofExpr
		public RuleCall getLeftInstanceofExprParserRuleCall_0_0() { return cLeftInstanceofExprParserRuleCall_0_0; }

		//(("intersect" | "except") rights+=InstanceofExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"intersect" | "except"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"intersect"
		public Keyword getIntersectKeyword_1_0_0() { return cIntersectKeyword_1_0_0; }

		//"except"
		public Keyword getExceptKeyword_1_0_1() { return cExceptKeyword_1_0_1; }

		//rights+=InstanceofExpr
		public Assignment getRightsAssignment_1_1() { return cRightsAssignment_1_1; }

		//InstanceofExpr
		public RuleCall getRightsInstanceofExprParserRuleCall_1_1_0() { return cRightsInstanceofExprParserRuleCall_1_1_0; }
	}

	public class InstanceofExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceofExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftTreatExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInstanceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSequenceTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//InstanceofExpr:
		//	left=TreatExpr ("instance" "of" right=SequenceType)?;
		public ParserRule getRule() { return rule; }

		//left=TreatExpr ("instance" "of" right=SequenceType)?
		public Group getGroup() { return cGroup; }

		//left=TreatExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//TreatExpr
		public RuleCall getLeftTreatExprParserRuleCall_0_0() { return cLeftTreatExprParserRuleCall_0_0; }

		//("instance" "of" right=SequenceType)?
		public Group getGroup_1() { return cGroup_1; }

		//"instance"
		public Keyword getInstanceKeyword_1_0() { return cInstanceKeyword_1_0; }

		//"of"
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }

		//right=SequenceType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SequenceType
		public RuleCall getRightSequenceTypeParserRuleCall_1_2_0() { return cRightSequenceTypeParserRuleCall_1_2_0; }
	}

	public class TreatExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TreatExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftCastableExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTreatKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSequenceTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//TreatExpr:
		//	left=CastableExpr ("treat" "as" right=SequenceType)?;
		public ParserRule getRule() { return rule; }

		//left=CastableExpr ("treat" "as" right=SequenceType)?
		public Group getGroup() { return cGroup; }

		//left=CastableExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//CastableExpr
		public RuleCall getLeftCastableExprParserRuleCall_0_0() { return cLeftCastableExprParserRuleCall_0_0; }

		//("treat" "as" right=SequenceType)?
		public Group getGroup_1() { return cGroup_1; }

		//"treat"
		public Keyword getTreatKeyword_1_0() { return cTreatKeyword_1_0; }

		//"as"
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//right=SequenceType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SequenceType
		public RuleCall getRightSequenceTypeParserRuleCall_1_2_0() { return cRightSequenceTypeParserRuleCall_1_2_0; }
	}

	public class CastableExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastableExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftCastExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCastableKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSingleTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CastableExpr:
		//	left=CastExpr ("castable" "as" right=SingleType)?;
		public ParserRule getRule() { return rule; }

		//left=CastExpr ("castable" "as" right=SingleType)?
		public Group getGroup() { return cGroup; }

		//left=CastExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//CastExpr
		public RuleCall getLeftCastExprParserRuleCall_0_0() { return cLeftCastExprParserRuleCall_0_0; }

		//("castable" "as" right=SingleType)?
		public Group getGroup_1() { return cGroup_1; }

		//"castable"
		public Keyword getCastableKeyword_1_0() { return cCastableKeyword_1_0; }

		//"as"
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//right=SingleType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SingleType
		public RuleCall getRightSingleTypeParserRuleCall_1_2_0() { return cRightSingleTypeParserRuleCall_1_2_0; }
	}

	public class CastExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftUnaryExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCastKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSingleTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CastExpr:
		//	left=UnaryExpr ("cast" "as" right=SingleType)?;
		public ParserRule getRule() { return rule; }

		//left=UnaryExpr ("cast" "as" right=SingleType)?
		public Group getGroup() { return cGroup; }

		//left=UnaryExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//UnaryExpr
		public RuleCall getLeftUnaryExprParserRuleCall_0_0() { return cLeftUnaryExprParserRuleCall_0_0; }

		//("cast" "as" right=SingleType)?
		public Group getGroup_1() { return cGroup_1; }

		//"cast"
		public Keyword getCastKeyword_1_0() { return cCastKeyword_1_0; }

		//"as"
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//right=SingleType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SingleType
		public RuleCall getRightSingleTypeParserRuleCall_1_2_0() { return cRightSingleTypeParserRuleCall_1_2_0; }
	}

	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cUnaryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnaryValueExprParserRuleCall_1_0 = (RuleCall)cUnaryAssignment_1.eContents().get(0);
		
		//UnaryExpr:
		//	("-" | "+")* unary=ValueExpr;
		public ParserRule getRule() { return rule; }

		//("-" | "+")* unary=ValueExpr
		public Group getGroup() { return cGroup; }

		//("-" | "+")*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }

		//unary=ValueExpr
		public Assignment getUnaryAssignment_1() { return cUnaryAssignment_1; }

		//ValueExpr
		public RuleCall getUnaryValueExprParserRuleCall_1_0() { return cUnaryValueExprParserRuleCall_1_0; }
	}

	public class ValueExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpr");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePathExprParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValueExpr:
		//	value=PathExpr;
		public ParserRule getRule() { return rule; }

		//value=PathExpr
		public Assignment getValueAssignment() { return cValueAssignment; }

		//PathExpr
		public RuleCall getValuePathExprParserRuleCall_0() { return cValuePathExprParserRuleCall_0; }
	}

	public class PathExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRelativePathExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Action cRelSingleRelPathExprAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRelativePathExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Action cRelDoubleRelPathExprAction_1_2 = (Action)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cRelativePathExprParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Action cRelNoSelectorRelPathExprAction_2_1 = (Action)cGroup_2.eContents().get(1);
		
		//PathExpr:
		//	"/" RelativePathExpr {RelSingle.relPathExpr=current} | "//" RelativePathExpr {RelDouble.relPathExpr=current} |
		//	RelativePathExpr {RelNoSelector.relPathExpr=current};
		public ParserRule getRule() { return rule; }

		//"/" RelativePathExpr {RelSingle.relPathExpr=current} | "//" RelativePathExpr {RelDouble.relPathExpr=current} |
		//RelativePathExpr {RelNoSelector.relPathExpr=current}
		public Alternatives getAlternatives() { return cAlternatives; }

		//"/" RelativePathExpr {RelSingle.relPathExpr=current}
		public Group getGroup_0() { return cGroup_0; }

		//"/"
		public Keyword getSolidusKeyword_0_0() { return cSolidusKeyword_0_0; }

		//RelativePathExpr
		public RuleCall getRelativePathExprParserRuleCall_0_1() { return cRelativePathExprParserRuleCall_0_1; }

		//{RelSingle.relPathExpr=current}
		public Action getRelSingleRelPathExprAction_0_2() { return cRelSingleRelPathExprAction_0_2; }

		//"//" RelativePathExpr {RelDouble.relPathExpr=current}
		public Group getGroup_1() { return cGroup_1; }

		//"//"
		public Keyword getSolidusSolidusKeyword_1_0() { return cSolidusSolidusKeyword_1_0; }

		//RelativePathExpr
		public RuleCall getRelativePathExprParserRuleCall_1_1() { return cRelativePathExprParserRuleCall_1_1; }

		//{RelDouble.relPathExpr=current}
		public Action getRelDoubleRelPathExprAction_1_2() { return cRelDoubleRelPathExprAction_1_2; }

		//RelativePathExpr {RelNoSelector.relPathExpr=current}
		public Group getGroup_2() { return cGroup_2; }

		//RelativePathExpr
		public RuleCall getRelativePathExprParserRuleCall_2_0() { return cRelativePathExprParserRuleCall_2_0; }

		//{RelNoSelector.relPathExpr=current}
		public Action getRelNoSelectorRelPathExprAction_2_1() { return cRelNoSelectorRelPathExprAction_2_1; }
	}

	public class RelativePathExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelativePathExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStepAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStepStepExprParserRuleCall_0_0 = (RuleCall)cStepAssignment_0.eContents().get(0);
		private final Assignment cExtraStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtraStepsExtraStepExprParserRuleCall_1_0 = (RuleCall)cExtraStepsAssignment_1.eContents().get(0);
		
		//RelativePathExpr:
		//	step=StepExpr extraSteps+=ExtraStepExpr*;
		public ParserRule getRule() { return rule; }

		//step=StepExpr extraSteps+=ExtraStepExpr*
		public Group getGroup() { return cGroup; }

		//step=StepExpr
		public Assignment getStepAssignment_0() { return cStepAssignment_0; }

		//StepExpr
		public RuleCall getStepStepExprParserRuleCall_0_0() { return cStepStepExprParserRuleCall_0_0; }

		//extraSteps+=ExtraStepExpr*
		public Assignment getExtraStepsAssignment_1() { return cExtraStepsAssignment_1; }

		//ExtraStepExpr
		public RuleCall getExtraStepsExtraStepExprParserRuleCall_1_0() { return cExtraStepsExtraStepExprParserRuleCall_1_0; }
	}

	public class ExtraStepExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtraStepExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cStepExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Action cSingleStepAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cStepExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Action cDoubleStepAction_1_2 = (Action)cGroup_1.eContents().get(2);
		
		//ExtraStepExpr returns StepExpr:
		//	"/" StepExpr {Single.step=current} | "//" StepExpr {Double.step=current};
		public ParserRule getRule() { return rule; }

		//"/" StepExpr {Single.step=current} | "//" StepExpr {Double.step=current}
		public Alternatives getAlternatives() { return cAlternatives; }

		//"/" StepExpr {Single.step=current}
		public Group getGroup_0() { return cGroup_0; }

		//"/"
		public Keyword getSolidusKeyword_0_0() { return cSolidusKeyword_0_0; }

		//StepExpr
		public RuleCall getStepExprParserRuleCall_0_1() { return cStepExprParserRuleCall_0_1; }

		//{Single.step=current}
		public Action getSingleStepAction_0_2() { return cSingleStepAction_0_2; }

		//"//" StepExpr {Double.step=current}
		public Group getGroup_1() { return cGroup_1; }

		//"//"
		public Keyword getSolidusSolidusKeyword_1_0() { return cSolidusSolidusKeyword_1_0; }

		//StepExpr
		public RuleCall getStepExprParserRuleCall_1_1() { return cStepExprParserRuleCall_1_1; }

		//{Double.step=current}
		public Action getDoubleStepAction_1_2() { return cDoubleStepAction_1_2; }
	}

	public class StepExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StepExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStepExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStepExprFilterExprParserRuleCall_0_0 = (RuleCall)cStepExprAssignment_0.eContents().get(0);
		private final Assignment cStepExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStepExprAxisStepParserRuleCall_1_0 = (RuleCall)cStepExprAssignment_1.eContents().get(0);
		
		//StepExpr:
		//	stepExpr=FilterExpr | stepExpr=AxisStep;
		public ParserRule getRule() { return rule; }

		//stepExpr=FilterExpr | stepExpr=AxisStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//stepExpr=FilterExpr
		public Assignment getStepExprAssignment_0() { return cStepExprAssignment_0; }

		//FilterExpr
		public RuleCall getStepExprFilterExprParserRuleCall_0_0() { return cStepExprFilterExprParserRuleCall_0_0; }

		//stepExpr=AxisStep
		public Assignment getStepExprAssignment_1() { return cStepExprAssignment_1; }

		//AxisStep
		public RuleCall getStepExprAxisStepParserRuleCall_1_0() { return cStepExprAxisStepParserRuleCall_1_0; }
	}

	public class AxisStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AxisStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cStepAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cStepReverseStepParserRuleCall_0_0_0 = (RuleCall)cStepAssignment_0_0.eContents().get(0);
		private final Assignment cStepAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cStepForwardStepParserRuleCall_0_1_0 = (RuleCall)cStepAssignment_0_1.eContents().get(0);
		private final Assignment cPredicateListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateListPredicateListParserRuleCall_1_0 = (RuleCall)cPredicateListAssignment_1.eContents().get(0);
		
		//AxisStep:
		//	(step=ReverseStep | step=ForwardStep) predicateList=PredicateList;
		public ParserRule getRule() { return rule; }

		//(step=ReverseStep | step=ForwardStep) predicateList=PredicateList
		public Group getGroup() { return cGroup; }

		//step=ReverseStep | step=ForwardStep
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//step=ReverseStep
		public Assignment getStepAssignment_0_0() { return cStepAssignment_0_0; }

		//ReverseStep
		public RuleCall getStepReverseStepParserRuleCall_0_0_0() { return cStepReverseStepParserRuleCall_0_0_0; }

		//step=ForwardStep
		public Assignment getStepAssignment_0_1() { return cStepAssignment_0_1; }

		//ForwardStep
		public RuleCall getStepForwardStepParserRuleCall_0_1_0() { return cStepForwardStepParserRuleCall_0_1_0; }

		//predicateList=PredicateList
		public Assignment getPredicateListAssignment_1() { return cPredicateListAssignment_1; }

		//PredicateList
		public RuleCall getPredicateListPredicateListParserRuleCall_1_0() { return cPredicateListPredicateListParserRuleCall_1_0; }
	}

	public class ForwardStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForwardStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cForwardAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cForwardForwardAxisParserRuleCall_0_0_0 = (RuleCall)cForwardAssignment_0_0.eContents().get(0);
		private final Assignment cTestAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTestNodeTestParserRuleCall_0_1_0 = (RuleCall)cTestAssignment_0_1.eContents().get(0);
		private final Assignment cAbbrForwardAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAbbrForwardAbbrevForwardStepParserRuleCall_1_0 = (RuleCall)cAbbrForwardAssignment_1.eContents().get(0);
		
		//ForwardStep:
		//	forward=ForwardAxis test=NodeTest | abbrForward=AbbrevForwardStep;
		public ParserRule getRule() { return rule; }

		//forward=ForwardAxis test=NodeTest | abbrForward=AbbrevForwardStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//forward=ForwardAxis test=NodeTest
		public Group getGroup_0() { return cGroup_0; }

		//forward=ForwardAxis
		public Assignment getForwardAssignment_0_0() { return cForwardAssignment_0_0; }

		//ForwardAxis
		public RuleCall getForwardForwardAxisParserRuleCall_0_0_0() { return cForwardForwardAxisParserRuleCall_0_0_0; }

		//test=NodeTest
		public Assignment getTestAssignment_0_1() { return cTestAssignment_0_1; }

		//NodeTest
		public RuleCall getTestNodeTestParserRuleCall_0_1_0() { return cTestNodeTestParserRuleCall_0_1_0; }

		//abbrForward=AbbrevForwardStep
		public Assignment getAbbrForwardAssignment_1() { return cAbbrForwardAssignment_1; }

		//AbbrevForwardStep
		public RuleCall getAbbrForwardAbbrevForwardStepParserRuleCall_1_0() { return cAbbrForwardAbbrevForwardStepParserRuleCall_1_0; }
	}

	public class ForwardAxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForwardAxis");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAxisAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cAxisChildKeyword_0_0_0 = (Keyword)cAxisAssignment_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAxisAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cAxisDescendantKeyword_1_0_0 = (Keyword)cAxisAssignment_1_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cAxisAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cAxisAttributeKeyword_2_0_0 = (Keyword)cAxisAssignment_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cAxisAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cAxisSelfKeyword_3_0_0 = (Keyword)cAxisAssignment_3_0.eContents().get(0);
		private final Keyword cColonColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cAxisAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cAxisDescendantOrSelfKeyword_4_0_0 = (Keyword)cAxisAssignment_4_0.eContents().get(0);
		private final Keyword cColonColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cAxisAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cAxisFollowingSiblingKeyword_5_0_0 = (Keyword)cAxisAssignment_5_0.eContents().get(0);
		private final Keyword cColonColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cAxisAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cAxisFollowingKeyword_6_0_0 = (Keyword)cAxisAssignment_6_0.eContents().get(0);
		private final Keyword cColonColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cAxisAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cAxisNamespaceKeyword_7_0_0 = (Keyword)cAxisAssignment_7_0.eContents().get(0);
		private final Keyword cColonColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//ForwardAxis:
		//	axis="child" "::" | axis="descendant" "::" | axis="attribute" "::" | axis="self" "::" | axis="descendant-or-self" "::"
		//	| axis="following-sibling" "::" | axis="following" "::" | axis="namespace" "::";
		public ParserRule getRule() { return rule; }

		//axis="child" "::" | axis="descendant" "::" | axis="attribute" "::" | axis="self" "::" | axis="descendant-or-self" "::" |
		//axis="following-sibling" "::" | axis="following" "::" | axis="namespace" "::"
		public Alternatives getAlternatives() { return cAlternatives; }

		//axis="child" "::"
		public Group getGroup_0() { return cGroup_0; }

		//axis="child"
		public Assignment getAxisAssignment_0_0() { return cAxisAssignment_0_0; }

		//"child"
		public Keyword getAxisChildKeyword_0_0_0() { return cAxisChildKeyword_0_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//axis="descendant" "::"
		public Group getGroup_1() { return cGroup_1; }

		//axis="descendant"
		public Assignment getAxisAssignment_1_0() { return cAxisAssignment_1_0; }

		//"descendant"
		public Keyword getAxisDescendantKeyword_1_0_0() { return cAxisDescendantKeyword_1_0_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1() { return cColonColonKeyword_1_1; }

		//axis="attribute" "::"
		public Group getGroup_2() { return cGroup_2; }

		//axis="attribute"
		public Assignment getAxisAssignment_2_0() { return cAxisAssignment_2_0; }

		//"attribute"
		public Keyword getAxisAttributeKeyword_2_0_0() { return cAxisAttributeKeyword_2_0_0; }

		//"::"
		public Keyword getColonColonKeyword_2_1() { return cColonColonKeyword_2_1; }

		//axis="self" "::"
		public Group getGroup_3() { return cGroup_3; }

		//axis="self"
		public Assignment getAxisAssignment_3_0() { return cAxisAssignment_3_0; }

		//"self"
		public Keyword getAxisSelfKeyword_3_0_0() { return cAxisSelfKeyword_3_0_0; }

		//"::"
		public Keyword getColonColonKeyword_3_1() { return cColonColonKeyword_3_1; }

		//axis="descendant-or-self" "::"
		public Group getGroup_4() { return cGroup_4; }

		//axis="descendant-or-self"
		public Assignment getAxisAssignment_4_0() { return cAxisAssignment_4_0; }

		//"descendant-or-self"
		public Keyword getAxisDescendantOrSelfKeyword_4_0_0() { return cAxisDescendantOrSelfKeyword_4_0_0; }

		//"::"
		public Keyword getColonColonKeyword_4_1() { return cColonColonKeyword_4_1; }

		//axis="following-sibling" "::"
		public Group getGroup_5() { return cGroup_5; }

		//axis="following-sibling"
		public Assignment getAxisAssignment_5_0() { return cAxisAssignment_5_0; }

		//"following-sibling"
		public Keyword getAxisFollowingSiblingKeyword_5_0_0() { return cAxisFollowingSiblingKeyword_5_0_0; }

		//"::"
		public Keyword getColonColonKeyword_5_1() { return cColonColonKeyword_5_1; }

		//axis="following" "::"
		public Group getGroup_6() { return cGroup_6; }

		//axis="following"
		public Assignment getAxisAssignment_6_0() { return cAxisAssignment_6_0; }

		//"following"
		public Keyword getAxisFollowingKeyword_6_0_0() { return cAxisFollowingKeyword_6_0_0; }

		//"::"
		public Keyword getColonColonKeyword_6_1() { return cColonColonKeyword_6_1; }

		//axis="namespace" "::"
		public Group getGroup_7() { return cGroup_7; }

		//axis="namespace"
		public Assignment getAxisAssignment_7_0() { return cAxisAssignment_7_0; }

		//"namespace"
		public Keyword getAxisNamespaceKeyword_7_0_0() { return cAxisNamespaceKeyword_7_0_0; }

		//"::"
		public Keyword getColonColonKeyword_7_1() { return cColonColonKeyword_7_1; }
	}

	public class AbbrevForwardStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbbrevForwardStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cNodeTestParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Action cAttributeTestAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cNodeTestParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Action cElementTestAction_1_1 = (Action)cGroup_1.eContents().get(1);
		
		//AbbrevForwardStep:
		//	"@" NodeTest {Attribute.test=current} | NodeTest {Element.test=current};
		public ParserRule getRule() { return rule; }

		//"@" NodeTest {Attribute.test=current} | NodeTest {Element.test=current}
		public Alternatives getAlternatives() { return cAlternatives; }

		//"@" NodeTest {Attribute.test=current}
		public Group getGroup_0() { return cGroup_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_0() { return cCommercialAtKeyword_0_0; }

		//NodeTest
		public RuleCall getNodeTestParserRuleCall_0_1() { return cNodeTestParserRuleCall_0_1; }

		//{Attribute.test=current}
		public Action getAttributeTestAction_0_2() { return cAttributeTestAction_0_2; }

		//NodeTest {Element.test=current}
		public Group getGroup_1() { return cGroup_1; }

		//NodeTest
		public RuleCall getNodeTestParserRuleCall_1_0() { return cNodeTestParserRuleCall_1_0; }

		//{Element.test=current}
		public Action getElementTestAction_1_1() { return cElementTestAction_1_1; }
	}

	public class ReverseStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReverseStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReverseAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cReverseREVERSEAXISTerminalRuleCall_0_0_0 = (RuleCall)cReverseAssignment_0_0.eContents().get(0);
		private final Assignment cTestAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTestNodeTestParserRuleCall_0_1_0 = (RuleCall)cTestAssignment_0_1.eContents().get(0);
		private final Assignment cAbbrRevSetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAbbrRevSetABBREVREVERSESTEPTerminalRuleCall_1_0 = (RuleCall)cAbbrRevSetAssignment_1.eContents().get(0);
		
		//ReverseStep:
		//	reverse=REVERSEAXIS test=NodeTest | abbrRevSet=ABBREVREVERSESTEP;
		public ParserRule getRule() { return rule; }

		//reverse=REVERSEAXIS test=NodeTest | abbrRevSet=ABBREVREVERSESTEP
		public Alternatives getAlternatives() { return cAlternatives; }

		//reverse=REVERSEAXIS test=NodeTest
		public Group getGroup_0() { return cGroup_0; }

		//reverse=REVERSEAXIS
		public Assignment getReverseAssignment_0_0() { return cReverseAssignment_0_0; }

		//REVERSEAXIS
		public RuleCall getReverseREVERSEAXISTerminalRuleCall_0_0_0() { return cReverseREVERSEAXISTerminalRuleCall_0_0_0; }

		//test=NodeTest
		public Assignment getTestAssignment_0_1() { return cTestAssignment_0_1; }

		//NodeTest
		public RuleCall getTestNodeTestParserRuleCall_0_1_0() { return cTestNodeTestParserRuleCall_0_1_0; }

		//abbrRevSet=ABBREVREVERSESTEP
		public Assignment getAbbrRevSetAssignment_1() { return cAbbrRevSetAssignment_1; }

		//ABBREVREVERSESTEP
		public RuleCall getAbbrRevSetABBREVREVERSESTEPTerminalRuleCall_1_0() { return cAbbrRevSetABBREVREVERSESTEPTerminalRuleCall_1_0; }
	}

	public class NodeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTestAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTestKindTestParserRuleCall_0_0 = (RuleCall)cTestAssignment_0.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTestNameTestParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		
		//NodeTest:
		//	test=KindTest | test=NameTest;
		public ParserRule getRule() { return rule; }

		//test=KindTest | test=NameTest
		public Alternatives getAlternatives() { return cAlternatives; }

		//test=KindTest
		public Assignment getTestAssignment_0() { return cTestAssignment_0; }

		//KindTest
		public RuleCall getTestKindTestParserRuleCall_0_0() { return cTestKindTestParserRuleCall_0_0; }

		//test=NameTest
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//NameTest
		public RuleCall getTestNameTestParserRuleCall_1_0() { return cTestNameTestParserRuleCall_1_0; }
	}

	public class NameTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cQNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cQNameQNameParserRuleCall_0_0 = (RuleCall)cQNameAssignment_0.eContents().get(0);
		private final Assignment cWildcardAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWildcardWildcardParserRuleCall_1_0 = (RuleCall)cWildcardAssignment_1.eContents().get(0);
		
		//NameTest:
		//	qName=QName | wildcard=Wildcard;
		public ParserRule getRule() { return rule; }

		//qName=QName | wildcard=Wildcard
		public Alternatives getAlternatives() { return cAlternatives; }

		//qName=QName
		public Assignment getQNameAssignment_0() { return cQNameAssignment_0; }

		//QName
		public RuleCall getQNameQNameParserRuleCall_0_0() { return cQNameQNameParserRuleCall_0_0; }

		//wildcard=Wildcard
		public Assignment getWildcardAssignment_1() { return cWildcardAssignment_1; }

		//Wildcard
		public RuleCall getWildcardWildcardParserRuleCall_1_0() { return cWildcardWildcardParserRuleCall_1_0; }
	}

	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Wildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWildAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cWildAsteriskKeyword_0_0 = (Keyword)cWildAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLeftNCNameParserRuleCall_1_0_0 = (RuleCall)cLeftAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightNCNameParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		
		//Wildcard:
		//	wild="*" | left=NCName ":" "*" | "*" ":" right=NCName;
		public ParserRule getRule() { return rule; }

		//wild="*" | left=NCName ":" "*" | "*" ":" right=NCName
		public Alternatives getAlternatives() { return cAlternatives; }

		//wild="*"
		public Assignment getWildAssignment_0() { return cWildAssignment_0; }

		//"*"
		public Keyword getWildAsteriskKeyword_0_0() { return cWildAsteriskKeyword_0_0; }

		//left=NCName ":" "*"
		public Group getGroup_1() { return cGroup_1; }

		//left=NCName
		public Assignment getLeftAssignment_1_0() { return cLeftAssignment_1_0; }

		//NCName
		public RuleCall getLeftNCNameParserRuleCall_1_0_0() { return cLeftNCNameParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_2() { return cAsteriskKeyword_1_2; }

		//"*" ":" right=NCName
		public Group getGroup_2() { return cGroup_2; }

		//"*"
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//right=NCName
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }

		//NCName
		public RuleCall getRightNCNameParserRuleCall_2_2_0() { return cRightNCNameParserRuleCall_2_2_0; }
	}

	public class FilterExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrimaryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrimaryPrimaryExprParserRuleCall_0_0 = (RuleCall)cPrimaryAssignment_0.eContents().get(0);
		private final Assignment cPredicateListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateListPredicateListParserRuleCall_1_0 = (RuleCall)cPredicateListAssignment_1.eContents().get(0);
		
		//FilterExpr:
		//	primary=PrimaryExpr predicateList=PredicateList;
		public ParserRule getRule() { return rule; }

		//primary=PrimaryExpr predicateList=PredicateList
		public Group getGroup() { return cGroup; }

		//primary=PrimaryExpr
		public Assignment getPrimaryAssignment_0() { return cPrimaryAssignment_0; }

		//PrimaryExpr
		public RuleCall getPrimaryPrimaryExprParserRuleCall_0_0() { return cPrimaryPrimaryExprParserRuleCall_0_0; }

		//predicateList=PredicateList
		public Assignment getPredicateListAssignment_1() { return cPredicateListAssignment_1; }

		//PredicateList
		public RuleCall getPredicateListPredicateListParserRuleCall_1_0() { return cPredicateListPredicateListParserRuleCall_1_0; }
	}

	public class PredicateListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPredicateListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPredicatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_1_0 = (RuleCall)cPredicatesAssignment_1.eContents().get(0);
		
		//PredicateList:
		//	{PredicateList} predicates+=Predicate*;
		public ParserRule getRule() { return rule; }

		//{PredicateList} predicates+=Predicate*
		public Group getGroup() { return cGroup; }

		//{PredicateList}
		public Action getPredicateListAction_0() { return cPredicateListAction_0; }

		//predicates+=Predicate*
		public Assignment getPredicatesAssignment_1() { return cPredicatesAssignment_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_1_0() { return cPredicatesPredicateParserRuleCall_1_0; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Predicate:
		//	"[" expr=Expr "]";
		public ParserRule getRule() { return rule; }

		//"[" expr=Expr "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cVarRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarRefVarRefParserRuleCall_1_0 = (RuleCall)cVarRefAssignment_1.eContents().get(0);
		private final Assignment cParExprAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cParExprParenthesizedExprParserRuleCall_2_0 = (RuleCall)cParExprAssignment_2.eContents().get(0);
		private final Assignment cConItemExprAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cConItemExprCONTEXTITEMEXPRTerminalRuleCall_3_0 = (RuleCall)cConItemExprAssignment_3.eContents().get(0);
		private final Assignment cFunctionCallAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionCallFunctionCallParserRuleCall_4_0 = (RuleCall)cFunctionCallAssignment_4.eContents().get(0);
		
		//PrimaryExpr:
		//	literal=Literal | varRef=VarRef | parExpr=ParenthesizedExpr | conItemExpr=CONTEXTITEMEXPR | functionCall=FunctionCall;
		public ParserRule getRule() { return rule; }

		//literal=Literal | varRef=VarRef | parExpr=ParenthesizedExpr | conItemExpr=CONTEXTITEMEXPR | functionCall=FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//varRef=VarRef
		public Assignment getVarRefAssignment_1() { return cVarRefAssignment_1; }

		//VarRef
		public RuleCall getVarRefVarRefParserRuleCall_1_0() { return cVarRefVarRefParserRuleCall_1_0; }

		//parExpr=ParenthesizedExpr
		public Assignment getParExprAssignment_2() { return cParExprAssignment_2; }

		//ParenthesizedExpr
		public RuleCall getParExprParenthesizedExprParserRuleCall_2_0() { return cParExprParenthesizedExprParserRuleCall_2_0; }

		//conItemExpr=CONTEXTITEMEXPR
		public Assignment getConItemExprAssignment_3() { return cConItemExprAssignment_3; }

		//CONTEXTITEMEXPR
		public RuleCall getConItemExprCONTEXTITEMEXPRTerminalRuleCall_3_0() { return cConItemExprCONTEXTITEMEXPRTerminalRuleCall_3_0; }

		//functionCall=FunctionCall
		public Assignment getFunctionCallAssignment_4() { return cFunctionCallAssignment_4; }

		//FunctionCall
		public RuleCall getFunctionCallFunctionCallParserRuleCall_4_0() { return cFunctionCallFunctionCallParserRuleCall_4_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumNumericLiteralParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGLITERALTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//Literal:
		//	num=NumericLiteral | string=STRINGLITERAL;
		public ParserRule getRule() { return rule; }

		//num=NumericLiteral | string=STRINGLITERAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//num=NumericLiteral
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }

		//NumericLiteral
		public RuleCall getNumNumericLiteralParserRuleCall_0_0() { return cNumNumericLiteralParserRuleCall_0_0; }

		//string=STRINGLITERAL
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }

		//STRINGLITERAL
		public RuleCall getStringSTRINGLITERALTerminalRuleCall_1_0() { return cStringSTRINGLITERALTerminalRuleCall_1_0; }
	}

	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntLitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntLitINTLITERALTerminalRuleCall_0_0 = (RuleCall)cIntLitAssignment_0.eContents().get(0);
		private final Assignment cDecLitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDecLitDECIMALLITERALTerminalRuleCall_1_0 = (RuleCall)cDecLitAssignment_1.eContents().get(0);
		private final Assignment cDoubleLitAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleLitDOUBLELITERALTerminalRuleCall_2_0 = (RuleCall)cDoubleLitAssignment_2.eContents().get(0);
		
		//NumericLiteral:
		//	intLit=INTLITERAL | decLit=DECIMALLITERAL | doubleLit=DOUBLELITERAL;
		public ParserRule getRule() { return rule; }

		//intLit=INTLITERAL | decLit=DECIMALLITERAL | doubleLit=DOUBLELITERAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//intLit=INTLITERAL
		public Assignment getIntLitAssignment_0() { return cIntLitAssignment_0; }

		//INTLITERAL
		public RuleCall getIntLitINTLITERALTerminalRuleCall_0_0() { return cIntLitINTLITERALTerminalRuleCall_0_0; }

		//decLit=DECIMALLITERAL
		public Assignment getDecLitAssignment_1() { return cDecLitAssignment_1; }

		//DECIMALLITERAL
		public RuleCall getDecLitDECIMALLITERALTerminalRuleCall_1_0() { return cDecLitDECIMALLITERALTerminalRuleCall_1_0; }

		//doubleLit=DOUBLELITERAL
		public Assignment getDoubleLitAssignment_2() { return cDoubleLitAssignment_2; }

		//DOUBLELITERAL
		public RuleCall getDoubleLitDOUBLELITERALTerminalRuleCall_2_0() { return cDoubleLitDOUBLELITERALTerminalRuleCall_2_0; }
	}

	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVarNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VarRef:
		//	"$" VarName;
		public ParserRule getRule() { return rule; }

		//"$" VarName
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//VarName
		public RuleCall getVarNameParserRuleCall_1() { return cVarNameParserRuleCall_1; }
	}

	public class VarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarName");
		private final Assignment cQNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQNameQNameParserRuleCall_0 = (RuleCall)cQNameAssignment.eContents().get(0);
		
		//VarName:
		//	qName=QName;
		public ParserRule getRule() { return rule; }

		//qName=QName
		public Assignment getQNameAssignment() { return cQNameAssignment; }

		//QName
		public RuleCall getQNameQNameParserRuleCall_0() { return cQNameQNameParserRuleCall_0; }
	}

	public class ParenthesizedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesizedExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParenthesizedExpr:
		//	{ParenthesizedExpr} "(" expr=Expr? ")";
		public ParserRule getRule() { return rule; }

		//{ParenthesizedExpr} "(" expr=Expr? ")"
		public Group getGroup() { return cGroup; }

		//{ParenthesizedExpr}
		public Action getParenthesizedExprAction_0() { return cParenthesizedExprAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expr?
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQNameQNameParserRuleCall_0_0 = (RuleCall)cQNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprExprSingleParserRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExprsExprSingleParserRuleCall_2_1_1_0 = (RuleCall)cExprsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	qName=QName "(" (expr=ExprSingle ("," exprs+=ExprSingle)*)? ")";
		public ParserRule getRule() { return rule; }

		//qName=QName "(" (expr=ExprSingle ("," exprs+=ExprSingle)*)? ")"
		public Group getGroup() { return cGroup; }

		//qName=QName
		public Assignment getQNameAssignment_0() { return cQNameAssignment_0; }

		//QName
		public RuleCall getQNameQNameParserRuleCall_0_0() { return cQNameQNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(expr=ExprSingle ("," exprs+=ExprSingle)*)?
		public Group getGroup_2() { return cGroup_2; }

		//expr=ExprSingle
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }

		//ExprSingle
		public RuleCall getExprExprSingleParserRuleCall_2_0_0() { return cExprExprSingleParserRuleCall_2_0_0; }

		//("," exprs+=ExprSingle)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//exprs+=ExprSingle
		public Assignment getExprsAssignment_2_1_1() { return cExprsAssignment_2_1_1; }

		//ExprSingle
		public RuleCall getExprsExprSingleParserRuleCall_2_1_1_0() { return cExprsExprSingleParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SingleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SingleType:
		//	AtomicType "?"?;
		public ParserRule getRule() { return rule; }

		//AtomicType "?"?
		public Group getGroup() { return cGroup; }

		//AtomicType
		public RuleCall getAtomicTypeParserRuleCall_0() { return cAtomicTypeParserRuleCall_0; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class SequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEmptyAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyEMPTYSEQUENCETYPETerminalRuleCall_0_0 = (RuleCall)cEmptyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cItemTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cItemTypeItemTypeParserRuleCall_1_0_0 = (RuleCall)cItemTypeAssignment_1_0.eContents().get(0);
		private final Assignment cOccIndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOccIndOccurenceIndicatorParserRuleCall_1_1_0 = (RuleCall)cOccIndAssignment_1_1.eContents().get(0);
		
		//SequenceType:
		//	empty=EMPTYSEQUENCETYPE | itemType=ItemType occInd=OccurenceIndicator;
		public ParserRule getRule() { return rule; }

		//empty=EMPTYSEQUENCETYPE | itemType=ItemType occInd=OccurenceIndicator
		public Alternatives getAlternatives() { return cAlternatives; }

		//empty=EMPTYSEQUENCETYPE
		public Assignment getEmptyAssignment_0() { return cEmptyAssignment_0; }

		//EMPTYSEQUENCETYPE
		public RuleCall getEmptyEMPTYSEQUENCETYPETerminalRuleCall_0_0() { return cEmptyEMPTYSEQUENCETYPETerminalRuleCall_0_0; }

		//itemType=ItemType occInd=OccurenceIndicator
		public Group getGroup_1() { return cGroup_1; }

		//itemType=ItemType
		public Assignment getItemTypeAssignment_1_0() { return cItemTypeAssignment_1_0; }

		//ItemType
		public RuleCall getItemTypeItemTypeParserRuleCall_1_0_0() { return cItemTypeItemTypeParserRuleCall_1_0_0; }

		//occInd=OccurenceIndicator
		public Assignment getOccIndAssignment_1_1() { return cOccIndAssignment_1_1; }

		//OccurenceIndicator
		public RuleCall getOccIndOccurenceIndicatorParserRuleCall_1_1_0() { return cOccIndOccurenceIndicatorParserRuleCall_1_1_0; }
	}

	public class OccurenceIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OccurenceIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OccurenceIndicator:
		//	"?" | "*" | "+";
		public ParserRule getRule() { return rule; }

		//"?" | "*" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}

	public class ItemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindTestAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindTestKindTestParserRuleCall_0_0 = (RuleCall)cKindTestAssignment_0.eContents().get(0);
		private final Assignment cEmptyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEmptyEMPTYITEMTYPETerminalRuleCall_1_0 = (RuleCall)cEmptyAssignment_1.eContents().get(0);
		private final Assignment cAtomicTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAtomicTypeAtomicTypeParserRuleCall_2_0 = (RuleCall)cAtomicTypeAssignment_2.eContents().get(0);
		
		//ItemType:
		//	kindTest=KindTest | empty=EMPTYITEMTYPE | atomicType=AtomicType;
		public ParserRule getRule() { return rule; }

		//kindTest=KindTest | empty=EMPTYITEMTYPE | atomicType=AtomicType
		public Alternatives getAlternatives() { return cAlternatives; }

		//kindTest=KindTest
		public Assignment getKindTestAssignment_0() { return cKindTestAssignment_0; }

		//KindTest
		public RuleCall getKindTestKindTestParserRuleCall_0_0() { return cKindTestKindTestParserRuleCall_0_0; }

		//empty=EMPTYITEMTYPE
		public Assignment getEmptyAssignment_1() { return cEmptyAssignment_1; }

		//EMPTYITEMTYPE
		public RuleCall getEmptyEMPTYITEMTYPETerminalRuleCall_1_0() { return cEmptyEMPTYITEMTYPETerminalRuleCall_1_0; }

		//atomicType=AtomicType
		public Assignment getAtomicTypeAssignment_2() { return cAtomicTypeAssignment_2; }

		//AtomicType
		public RuleCall getAtomicTypeAtomicTypeParserRuleCall_2_0() { return cAtomicTypeAtomicTypeParserRuleCall_2_0; }
	}

	public class AtomicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//AtomicType:
		//	type=ID;
		public ParserRule getRule() { return rule; }

		//type=ID
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0() { return cTypeIDTerminalRuleCall_0; }
	}

	public class KindTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KindTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDocTestAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDocTestDocumentTestParserRuleCall_0_0 = (RuleCall)cDocTestAssignment_0.eContents().get(0);
		private final Assignment cElemTestAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElemTestElementTestParserRuleCall_1_0 = (RuleCall)cElemTestAssignment_1.eContents().get(0);
		private final Assignment cAttributeTestAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAttributeTestAttributeTestParserRuleCall_2_0 = (RuleCall)cAttributeTestAssignment_2.eContents().get(0);
		private final Assignment cSchemaElemTestAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSchemaElemTestSchemaElementTestParserRuleCall_3_0 = (RuleCall)cSchemaElemTestAssignment_3.eContents().get(0);
		private final Assignment cSchemaAttributeTestAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSchemaAttributeTestSchemaAttributeTestParserRuleCall_4_0 = (RuleCall)cSchemaAttributeTestAssignment_4.eContents().get(0);
		private final Assignment cPitTestAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cPitTestPITestParserRuleCall_5_0 = (RuleCall)cPitTestAssignment_5.eContents().get(0);
		private final Assignment cCommentTestAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cCommentTestCOMMENTTESTTerminalRuleCall_6_0 = (RuleCall)cCommentTestAssignment_6.eContents().get(0);
		private final Assignment cTextTestAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cTextTestTEXTTESTTerminalRuleCall_7_0 = (RuleCall)cTextTestAssignment_7.eContents().get(0);
		private final Assignment cAnyKindTestAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cAnyKindTestANYKINDTESTTerminalRuleCall_8_0 = (RuleCall)cAnyKindTestAssignment_8.eContents().get(0);
		
		//KindTest:
		//	docTest=DocumentTest | elemTest=ElementTest | attributeTest=AttributeTest | schemaElemTest=SchemaElementTest |
		//	schemaAttributeTest=SchemaAttributeTest | pitTest=PITest | commentTest=COMMENTTEST | textTest=TEXTTEST |
		//	anyKindTest=ANYKINDTEST;
		public ParserRule getRule() { return rule; }

		//docTest=DocumentTest | elemTest=ElementTest | attributeTest=AttributeTest | schemaElemTest=SchemaElementTest |
		//schemaAttributeTest=SchemaAttributeTest | pitTest=PITest | commentTest=COMMENTTEST | textTest=TEXTTEST |
		//anyKindTest=ANYKINDTEST
		public Alternatives getAlternatives() { return cAlternatives; }

		//docTest=DocumentTest
		public Assignment getDocTestAssignment_0() { return cDocTestAssignment_0; }

		//DocumentTest
		public RuleCall getDocTestDocumentTestParserRuleCall_0_0() { return cDocTestDocumentTestParserRuleCall_0_0; }

		//elemTest=ElementTest
		public Assignment getElemTestAssignment_1() { return cElemTestAssignment_1; }

		//ElementTest
		public RuleCall getElemTestElementTestParserRuleCall_1_0() { return cElemTestElementTestParserRuleCall_1_0; }

		//attributeTest=AttributeTest
		public Assignment getAttributeTestAssignment_2() { return cAttributeTestAssignment_2; }

		//AttributeTest
		public RuleCall getAttributeTestAttributeTestParserRuleCall_2_0() { return cAttributeTestAttributeTestParserRuleCall_2_0; }

		//schemaElemTest=SchemaElementTest
		public Assignment getSchemaElemTestAssignment_3() { return cSchemaElemTestAssignment_3; }

		//SchemaElementTest
		public RuleCall getSchemaElemTestSchemaElementTestParserRuleCall_3_0() { return cSchemaElemTestSchemaElementTestParserRuleCall_3_0; }

		//schemaAttributeTest=SchemaAttributeTest
		public Assignment getSchemaAttributeTestAssignment_4() { return cSchemaAttributeTestAssignment_4; }

		//SchemaAttributeTest
		public RuleCall getSchemaAttributeTestSchemaAttributeTestParserRuleCall_4_0() { return cSchemaAttributeTestSchemaAttributeTestParserRuleCall_4_0; }

		//pitTest=PITest
		public Assignment getPitTestAssignment_5() { return cPitTestAssignment_5; }

		//PITest
		public RuleCall getPitTestPITestParserRuleCall_5_0() { return cPitTestPITestParserRuleCall_5_0; }

		//commentTest=COMMENTTEST
		public Assignment getCommentTestAssignment_6() { return cCommentTestAssignment_6; }

		//COMMENTTEST
		public RuleCall getCommentTestCOMMENTTESTTerminalRuleCall_6_0() { return cCommentTestCOMMENTTESTTerminalRuleCall_6_0; }

		//textTest=TEXTTEST
		public Assignment getTextTestAssignment_7() { return cTextTestAssignment_7; }

		//TEXTTEST
		public RuleCall getTextTestTEXTTESTTerminalRuleCall_7_0() { return cTextTestTEXTTESTTerminalRuleCall_7_0; }

		//anyKindTest=ANYKINDTEST
		public Assignment getAnyKindTestAssignment_8() { return cAnyKindTestAssignment_8; }

		//ANYKINDTEST
		public RuleCall getAnyKindTestANYKINDTESTTerminalRuleCall_8_0() { return cAnyKindTestANYKINDTESTTerminalRuleCall_8_0; }
	}

	public class DocumentTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocumentTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDocumentTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDocumentNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cElemTestAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cElemTestElementTestParserRuleCall_3_0_0 = (RuleCall)cElemTestAssignment_3_0.eContents().get(0);
		private final Assignment cSchemaElemTestAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSchemaElemTestSchemaElementTestParserRuleCall_3_1_0 = (RuleCall)cSchemaElemTestAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DocumentTest:
		//	{DocumentTest} "document-node" "(" (elemTest=ElementTest | schemaElemTest=SchemaElementTest)? ")";
		public ParserRule getRule() { return rule; }

		//{DocumentTest} "document-node" "(" (elemTest=ElementTest | schemaElemTest=SchemaElementTest)? ")"
		public Group getGroup() { return cGroup; }

		//{DocumentTest}
		public Action getDocumentTestAction_0() { return cDocumentTestAction_0; }

		//"document-node"
		public Keyword getDocumentNodeKeyword_1() { return cDocumentNodeKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(elemTest=ElementTest | schemaElemTest=SchemaElementTest)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//elemTest=ElementTest
		public Assignment getElemTestAssignment_3_0() { return cElemTestAssignment_3_0; }

		//ElementTest
		public RuleCall getElemTestElementTestParserRuleCall_3_0_0() { return cElemTestElementTestParserRuleCall_3_0_0; }

		//schemaElemTest=SchemaElementTest
		public Assignment getSchemaElemTestAssignment_3_1() { return cSchemaElemTestAssignment_3_1; }

		//SchemaElementTest
		public RuleCall getSchemaElemTestSchemaElementTestParserRuleCall_3_1_0() { return cSchemaElemTestSchemaElementTestParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class PITestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PITest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPITTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcessingInstructionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNcNameAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNcNameNCNameParserRuleCall_3_0_0 = (RuleCall)cNcNameAssignment_3_0.eContents().get(0);
		private final Assignment cStringAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cStringSTRINGLITERALTerminalRuleCall_3_1_0 = (RuleCall)cStringAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PITest:
		//	{PITTest} "processing-instruction" "(" (ncName=NCName | string=STRINGLITERAL)? ")";
		public ParserRule getRule() { return rule; }

		//{PITTest} "processing-instruction" "(" (ncName=NCName | string=STRINGLITERAL)? ")"
		public Group getGroup() { return cGroup; }

		//{PITTest}
		public Action getPITTestAction_0() { return cPITTestAction_0; }

		//"processing-instruction"
		public Keyword getProcessingInstructionKeyword_1() { return cProcessingInstructionKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(ncName=NCName | string=STRINGLITERAL)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ncName=NCName
		public Assignment getNcNameAssignment_3_0() { return cNcNameAssignment_3_0; }

		//NCName
		public RuleCall getNcNameNCNameParserRuleCall_3_0_0() { return cNcNameNCNameParserRuleCall_3_0_0; }

		//string=STRINGLITERAL
		public Assignment getStringAssignment_3_1() { return cStringAssignment_3_1; }

		//STRINGLITERAL
		public RuleCall getStringSTRINGLITERALTerminalRuleCall_3_1_0() { return cStringSTRINGLITERALTerminalRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AttributeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAttrOrWildAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAttrOrWildAttribNameOrWildcardParserRuleCall_3_0_0 = (RuleCall)cAttrOrWildAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_3_1_1_0 = (RuleCall)cTypeNameAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AttributeTest:
		//	{AttributeTest} "attribute" "(" (attrOrWild=AttribNameOrWildcard ("," typeName=TypeName)?)? ")";
		public ParserRule getRule() { return rule; }

		//{AttributeTest} "attribute" "(" (attrOrWild=AttribNameOrWildcard ("," typeName=TypeName)?)? ")"
		public Group getGroup() { return cGroup; }

		//{AttributeTest}
		public Action getAttributeTestAction_0() { return cAttributeTestAction_0; }

		//"attribute"
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(attrOrWild=AttribNameOrWildcard ("," typeName=TypeName)?)?
		public Group getGroup_3() { return cGroup_3; }

		//attrOrWild=AttribNameOrWildcard
		public Assignment getAttrOrWildAssignment_3_0() { return cAttrOrWildAssignment_3_0; }

		//AttribNameOrWildcard
		public RuleCall getAttrOrWildAttribNameOrWildcardParserRuleCall_3_0_0() { return cAttrOrWildAttribNameOrWildcardParserRuleCall_3_0_0; }

		//("," typeName=TypeName)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//typeName=TypeName
		public Assignment getTypeNameAssignment_3_1_1() { return cTypeNameAssignment_3_1_1; }

		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_3_1_1_0() { return cTypeNameTypeNameParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AttribNameOrWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttribNameOrWildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAttNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAttNameAttributeNameParserRuleCall_0_0 = (RuleCall)cAttNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttribNameOrWildcardAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//AttribNameOrWildcard:
		//	attName=AttributeName | {AttribNameOrWildcard} "*";
		public ParserRule getRule() { return rule; }

		//attName=AttributeName | {AttribNameOrWildcard} "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//attName=AttributeName
		public Assignment getAttNameAssignment_0() { return cAttNameAssignment_0; }

		//AttributeName
		public RuleCall getAttNameAttributeNameParserRuleCall_0_0() { return cAttNameAttributeNameParserRuleCall_0_0; }

		//{AttribNameOrWildcard} "*"
		public Group getGroup_1() { return cGroup_1; }

		//{AttribNameOrWildcard}
		public Action getAttribNameOrWildcardAction_1_0() { return cAttribNameOrWildcardAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class SchemaAttributeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemaAttributeTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttDecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttDecAttributeDeclarationParserRuleCall_2_0 = (RuleCall)cAttDecAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SchemaAttributeTest:
		//	"schema-attribute" "(" attDec=AttributeDeclaration ")";
		public ParserRule getRule() { return rule; }

		//"schema-attribute" "(" attDec=AttributeDeclaration ")"
		public Group getGroup() { return cGroup; }

		//"schema-attribute"
		public Keyword getSchemaAttributeKeyword_0() { return cSchemaAttributeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attDec=AttributeDeclaration
		public Assignment getAttDecAssignment_2() { return cAttDecAssignment_2; }

		//AttributeDeclaration
		public RuleCall getAttDecAttributeDeclarationParserRuleCall_2_0() { return cAttDecAttributeDeclarationParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDeclaration");
		private final Assignment cAttNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAttNameAttributeNameParserRuleCall_0 = (RuleCall)cAttNameAssignment.eContents().get(0);
		
		//AttributeDeclaration:
		//	attName=AttributeName;
		public ParserRule getRule() { return rule; }

		//attName=AttributeName
		public Assignment getAttNameAssignment() { return cAttNameAssignment; }

		//AttributeName
		public RuleCall getAttNameAttributeNameParserRuleCall_0() { return cAttNameAttributeNameParserRuleCall_0; }
	}

	public class ElementTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElemOrWildAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElemOrWildElementNameOrWildcardParserRuleCall_3_0_0 = (RuleCall)cElemOrWildAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_3_1_1_0 = (RuleCall)cTypeNameAssignment_3_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ElementTest:
		//	{ElementTest} "element" "(" (elemOrWild=ElementNameOrWildcard ("," typeName=TypeName "?"?)?)? ")";
		public ParserRule getRule() { return rule; }

		//{ElementTest} "element" "(" (elemOrWild=ElementNameOrWildcard ("," typeName=TypeName "?"?)?)? ")"
		public Group getGroup() { return cGroup; }

		//{ElementTest}
		public Action getElementTestAction_0() { return cElementTestAction_0; }

		//"element"
		public Keyword getElementKeyword_1() { return cElementKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(elemOrWild=ElementNameOrWildcard ("," typeName=TypeName "?"?)?)?
		public Group getGroup_3() { return cGroup_3; }

		//elemOrWild=ElementNameOrWildcard
		public Assignment getElemOrWildAssignment_3_0() { return cElemOrWildAssignment_3_0; }

		//ElementNameOrWildcard
		public RuleCall getElemOrWildElementNameOrWildcardParserRuleCall_3_0_0() { return cElemOrWildElementNameOrWildcardParserRuleCall_3_0_0; }

		//("," typeName=TypeName "?"?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//typeName=TypeName
		public Assignment getTypeNameAssignment_3_1_1() { return cTypeNameAssignment_3_1_1; }

		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_3_1_1_0() { return cTypeNameTypeNameParserRuleCall_3_1_1_0; }

		//"?"?
		public Keyword getQuestionMarkKeyword_3_1_2() { return cQuestionMarkKeyword_3_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ElementNameOrWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementNameOrWildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElemNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElemNameElementNameParserRuleCall_0_0 = (RuleCall)cElemNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cElementNameOrWildcardAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ElementNameOrWildcard:
		//	elemName=ElementName | {ElementNameOrWildcard} "*";
		public ParserRule getRule() { return rule; }

		//elemName=ElementName | {ElementNameOrWildcard} "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//elemName=ElementName
		public Assignment getElemNameAssignment_0() { return cElemNameAssignment_0; }

		//ElementName
		public RuleCall getElemNameElementNameParserRuleCall_0_0() { return cElemNameElementNameParserRuleCall_0_0; }

		//{ElementNameOrWildcard} "*"
		public Group getGroup_1() { return cGroup_1; }

		//{ElementNameOrWildcard}
		public Action getElementNameOrWildcardAction_1_0() { return cElementNameOrWildcardAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class SchemaElementTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemaElementTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElemDecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElemDecElementDeclarationParserRuleCall_2_0 = (RuleCall)cElemDecAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SchemaElementTest:
		//	"schema-element" "(" elemDec=ElementDeclaration ")";
		public ParserRule getRule() { return rule; }

		//"schema-element" "(" elemDec=ElementDeclaration ")"
		public Group getGroup() { return cGroup; }

		//"schema-element"
		public Keyword getSchemaElementKeyword_0() { return cSchemaElementKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//elemDec=ElementDeclaration
		public Assignment getElemDecAssignment_2() { return cElemDecAssignment_2; }

		//ElementDeclaration
		public RuleCall getElemDecElementDeclarationParserRuleCall_2_0() { return cElemDecElementDeclarationParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ElementDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementDeclaration");
		private final RuleCall cElementNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ElementDeclaration:
		//	ElementName;
		public ParserRule getRule() { return rule; }

		//ElementName
		public RuleCall getElementNameParserRuleCall() { return cElementNameParserRuleCall; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final Assignment cQNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQNameQNameParserRuleCall_0 = (RuleCall)cQNameAssignment.eContents().get(0);
		
		//AttributeName:
		//	qName=QName;
		public ParserRule getRule() { return rule; }

		//qName=QName
		public Assignment getQNameAssignment() { return cQNameAssignment; }

		//QName
		public RuleCall getQNameQNameParserRuleCall_0() { return cQNameQNameParserRuleCall_0; }
	}

	public class ElementNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementName");
		private final Assignment cQNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQNameQNameParserRuleCall_0 = (RuleCall)cQNameAssignment.eContents().get(0);
		
		//ElementName:
		//	qName=QName;
		public ParserRule getRule() { return rule; }

		//qName=QName
		public Assignment getQNameAssignment() { return cQNameAssignment; }

		//QName
		public RuleCall getQNameQNameParserRuleCall_0() { return cQNameQNameParserRuleCall_0; }
	}

	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeName");
		private final Assignment cQNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQNameQNameParserRuleCall_0 = (RuleCall)cQNameAssignment.eContents().get(0);
		
		//TypeName:
		//	qName=QName;
		public ParserRule getRule() { return rule; }

		//qName=QName
		public Assignment getQNameAssignment() { return cQNameAssignment; }

		//QName
		public RuleCall getQNameQNameParserRuleCall_0() { return cQNameQNameParserRuleCall_0; }
	}

	public class NCNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NCName");
		private final Assignment cNcNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNcNameIDTerminalRuleCall_0 = (RuleCall)cNcNameAssignment.eContents().get(0);
		
		//NCName:
		//	ncName=ID;
		public ParserRule getRule() { return rule; }

		//ncName=ID
		public Assignment getNcNameAssignment() { return cNcNameAssignment; }

		//ID
		public RuleCall getNcNameIDTerminalRuleCall_0() { return cNcNameIDTerminalRuleCall_0; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrefixedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnprefixedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QName:
		//	PrefixedName | UnprefixedName;
		public ParserRule getRule() { return rule; }

		//PrefixedName | UnprefixedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrefixedName
		public RuleCall getPrefixedNameParserRuleCall_0() { return cPrefixedNameParserRuleCall_0; }

		//UnprefixedName
		public RuleCall getUnprefixedNameParserRuleCall_1() { return cUnprefixedNameParserRuleCall_1; }
	}

	public class PrefixedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixNCNameParserRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocalPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocalPartNCNameParserRuleCall_2_0 = (RuleCall)cLocalPartAssignment_2.eContents().get(0);
		
		//PrefixedName:
		//	prefix=NCName ":" localPart=NCName;
		public ParserRule getRule() { return rule; }

		//prefix=NCName ":" localPart=NCName
		public Group getGroup() { return cGroup; }

		//prefix=NCName
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//NCName
		public RuleCall getPrefixNCNameParserRuleCall_0_0() { return cPrefixNCNameParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//localPart=NCName
		public Assignment getLocalPartAssignment_2() { return cLocalPartAssignment_2; }

		//NCName
		public RuleCall getLocalPartNCNameParserRuleCall_2_0() { return cLocalPartNCNameParserRuleCall_2_0; }
	}

	public class UnprefixedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnprefixedName");
		private final Assignment cLocalPartAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLocalPartNCNameParserRuleCall_0 = (RuleCall)cLocalPartAssignment.eContents().get(0);
		
		//UnprefixedName:
		//	localPart=NCName;
		public ParserRule getRule() { return rule; }

		//localPart=NCName
		public Assignment getLocalPartAssignment() { return cLocalPartAssignment; }

		//NCName
		public RuleCall getLocalPartNCNameParserRuleCall_0() { return cLocalPartNCNameParserRuleCall_0; }
	}
	
	
	private ExprElements pExpr;
	private ExprSingleElements pExprSingle;
	private ForExprElements pForExpr;
	private SimpleForClauseElements pSimpleForClause;
	private AdditionalInElements pAdditionalIn;
	private QuantifiedExprElements pQuantifiedExpr;
	private IfExprElements pIfExpr;
	private OrExprElements pOrExpr;
	private AndExprElements pAndExpr;
	private ComparisonExprElements pComparisonExpr;
	private RangeExprElements pRangeExpr;
	private AdditiveExprElements pAdditiveExpr;
	private MultiplicativeExprElements pMultiplicativeExpr;
	private UnionExprElements pUnionExpr;
	private IntersectExceptExprElements pIntersectExceptExpr;
	private InstanceofExprElements pInstanceofExpr;
	private TreatExprElements pTreatExpr;
	private CastableExprElements pCastableExpr;
	private CastExprElements pCastExpr;
	private UnaryExprElements pUnaryExpr;
	private ValueExprElements pValueExpr;
	private PathExprElements pPathExpr;
	private RelativePathExprElements pRelativePathExpr;
	private ExtraStepExprElements pExtraStepExpr;
	private StepExprElements pStepExpr;
	private AxisStepElements pAxisStep;
	private ForwardStepElements pForwardStep;
	private ForwardAxisElements pForwardAxis;
	private AbbrevForwardStepElements pAbbrevForwardStep;
	private ReverseStepElements pReverseStep;
	private NodeTestElements pNodeTest;
	private NameTestElements pNameTest;
	private WildcardElements pWildcard;
	private FilterExprElements pFilterExpr;
	private PredicateListElements pPredicateList;
	private PredicateElements pPredicate;
	private PrimaryExprElements pPrimaryExpr;
	private LiteralElements pLiteral;
	private NumericLiteralElements pNumericLiteral;
	private VarRefElements pVarRef;
	private VarNameElements pVarName;
	private ParenthesizedExprElements pParenthesizedExpr;
	private FunctionCallElements pFunctionCall;
	private SingleTypeElements pSingleType;
	private SequenceTypeElements pSequenceType;
	private OccurenceIndicatorElements pOccurenceIndicator;
	private ItemTypeElements pItemType;
	private AtomicTypeElements pAtomicType;
	private KindTestElements pKindTest;
	private DocumentTestElements pDocumentTest;
	private PITestElements pPITest;
	private AttributeTestElements pAttributeTest;
	private AttribNameOrWildcardElements pAttribNameOrWildcard;
	private SchemaAttributeTestElements pSchemaAttributeTest;
	private AttributeDeclarationElements pAttributeDeclaration;
	private ElementTestElements pElementTest;
	private ElementNameOrWildcardElements pElementNameOrWildcard;
	private SchemaElementTestElements pSchemaElementTest;
	private ElementDeclarationElements pElementDeclaration;
	private AttributeNameElements pAttributeName;
	private ElementNameElements pElementName;
	private TypeNameElements pTypeName;
	private NCNameElements pNCName;
	private QNameElements pQName;
	private PrefixedNameElements pPrefixedName;
	private UnprefixedNameElements pUnprefixedName;
	private TerminalRule tABBREVREVERSESTEP;
	private TerminalRule tCONTEXTITEMEXPR;
	private TerminalRule tANYKINDTEST;
	private TerminalRule tTEXTTEST;
	private TerminalRule tCOMMENTTEST;
	private TerminalRule tEMPTYITEMTYPE;
	private TerminalRule tEMPTYSEQUENCETYPE;
	private TerminalRule tREVERSEAXIS;
	private TerminalRule tNODECOMP;
	private TerminalRule tVALUECOMP;
	private TerminalRule tGENERALCOMP;
	private TerminalRule tID;
	private TerminalRule tINTLITERAL;
	private TerminalRule tDECIMALLITERAL;
	private TerminalRule tDOUBLELITERAL;
	private TerminalRule tSTRINGLITERAL;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public XPathGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.xpath.XPath".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	////Removed ? from "/" singlePath=RelativePathExpr? in RelativePathExpr because this caused the grammar to be 
	////ambiguous, couldn't work out how to solve this.
	////Did the same for occInd=OccurenceIndicator? This also gave an ambiguity error but should be addressed.
	//Expr:
	//	exprSingle=ExprSingle ("," exprsSingle+=ExprSingle)*;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ExprSingle:
	//	ForExpr | QuantifiedExpr | IfExpr | OrExpr;
	public ExprSingleElements getExprSingleAccess() {
		return (pExprSingle != null) ? pExprSingle : (pExprSingle = new ExprSingleElements());
	}
	
	public ParserRule getExprSingleRule() {
		return getExprSingleAccess().getRule();
	}

	//ForExpr:
	//	for=SimpleForClause "return" return=ExprSingle;
	public ForExprElements getForExprAccess() {
		return (pForExpr != null) ? pForExpr : (pForExpr = new ForExprElements());
	}
	
	public ParserRule getForExprRule() {
		return getForExprAccess().getRule();
	}

	//SimpleForClause:
	//	"for" "$" forVar=VarName "in" in=ExprSingle additionalIn+=AdditionalIn*;
	public SimpleForClauseElements getSimpleForClauseAccess() {
		return (pSimpleForClause != null) ? pSimpleForClause : (pSimpleForClause = new SimpleForClauseElements());
	}
	
	public ParserRule getSimpleForClauseRule() {
		return getSimpleForClauseAccess().getRule();
	}

	//AdditionalIn:
	//	"," "$" variable=VarName "in" in=ExprSingle;
	public AdditionalInElements getAdditionalInAccess() {
		return (pAdditionalIn != null) ? pAdditionalIn : (pAdditionalIn = new AdditionalInElements());
	}
	
	public ParserRule getAdditionalInRule() {
		return getAdditionalInAccess().getRule();
	}

	//QuantifiedExpr:
	//	("some" | "every") "$" variable=VarName "in" in=ExprSingle additionalIn+=AdditionalIn* "satisfies" satisfy=ExprSingle;
	public QuantifiedExprElements getQuantifiedExprAccess() {
		return (pQuantifiedExpr != null) ? pQuantifiedExpr : (pQuantifiedExpr = new QuantifiedExprElements());
	}
	
	public ParserRule getQuantifiedExprRule() {
		return getQuantifiedExprAccess().getRule();
	}

	//IfExpr:
	//	"if" "(" if=Expr ")" "then" then=ExprSingle "else" else=ExprSingle;
	public IfExprElements getIfExprAccess() {
		return (pIfExpr != null) ? pIfExpr : (pIfExpr = new IfExprElements());
	}
	
	public ParserRule getIfExprRule() {
		return getIfExprAccess().getRule();
	}

	//OrExpr:
	//	left=AndExpr ("or" rights+=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return (pOrExpr != null) ? pOrExpr : (pOrExpr = new OrExprElements());
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr:
	//	left=ComparisonExpr ("and" rights+=ComparisonExpr)*;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//ComparisonExpr:
	//	range=RangeExpr ((value=VALUECOMP | gen=GENERALCOMP | node=NODECOMP) otherRange=RangeExpr)?;
	public ComparisonExprElements getComparisonExprAccess() {
		return (pComparisonExpr != null) ? pComparisonExpr : (pComparisonExpr = new ComparisonExprElements());
	}
	
	public ParserRule getComparisonExprRule() {
		return getComparisonExprAccess().getRule();
	}

	//RangeExpr:
	//	from=AdditiveExpr ("to" to=AdditiveExpr)?;
	public RangeExprElements getRangeExprAccess() {
		return (pRangeExpr != null) ? pRangeExpr : (pRangeExpr = new RangeExprElements());
	}
	
	public ParserRule getRangeExprRule() {
		return getRangeExprAccess().getRule();
	}

	//AdditiveExpr:
	//	left=MultiplicativeExpr (("+" | "-") rights+=MultiplicativeExpr)*;
	public AdditiveExprElements getAdditiveExprAccess() {
		return (pAdditiveExpr != null) ? pAdditiveExpr : (pAdditiveExpr = new AdditiveExprElements());
	}
	
	public ParserRule getAdditiveExprRule() {
		return getAdditiveExprAccess().getRule();
	}

	//MultiplicativeExpr:
	//	left=UnionExpr (("*" | "div" | "idiv" | "mod") rights+=UnionExpr)*;
	public MultiplicativeExprElements getMultiplicativeExprAccess() {
		return (pMultiplicativeExpr != null) ? pMultiplicativeExpr : (pMultiplicativeExpr = new MultiplicativeExprElements());
	}
	
	public ParserRule getMultiplicativeExprRule() {
		return getMultiplicativeExprAccess().getRule();
	}

	//UnionExpr:
	//	left=IntersectExceptExpr (("union" | "|") rights+=IntersectExceptExpr)*;
	public UnionExprElements getUnionExprAccess() {
		return (pUnionExpr != null) ? pUnionExpr : (pUnionExpr = new UnionExprElements());
	}
	
	public ParserRule getUnionExprRule() {
		return getUnionExprAccess().getRule();
	}

	//IntersectExceptExpr:
	//	left=InstanceofExpr (("intersect" | "except") rights+=InstanceofExpr)*;
	public IntersectExceptExprElements getIntersectExceptExprAccess() {
		return (pIntersectExceptExpr != null) ? pIntersectExceptExpr : (pIntersectExceptExpr = new IntersectExceptExprElements());
	}
	
	public ParserRule getIntersectExceptExprRule() {
		return getIntersectExceptExprAccess().getRule();
	}

	//InstanceofExpr:
	//	left=TreatExpr ("instance" "of" right=SequenceType)?;
	public InstanceofExprElements getInstanceofExprAccess() {
		return (pInstanceofExpr != null) ? pInstanceofExpr : (pInstanceofExpr = new InstanceofExprElements());
	}
	
	public ParserRule getInstanceofExprRule() {
		return getInstanceofExprAccess().getRule();
	}

	//TreatExpr:
	//	left=CastableExpr ("treat" "as" right=SequenceType)?;
	public TreatExprElements getTreatExprAccess() {
		return (pTreatExpr != null) ? pTreatExpr : (pTreatExpr = new TreatExprElements());
	}
	
	public ParserRule getTreatExprRule() {
		return getTreatExprAccess().getRule();
	}

	//CastableExpr:
	//	left=CastExpr ("castable" "as" right=SingleType)?;
	public CastableExprElements getCastableExprAccess() {
		return (pCastableExpr != null) ? pCastableExpr : (pCastableExpr = new CastableExprElements());
	}
	
	public ParserRule getCastableExprRule() {
		return getCastableExprAccess().getRule();
	}

	//CastExpr:
	//	left=UnaryExpr ("cast" "as" right=SingleType)?;
	public CastExprElements getCastExprAccess() {
		return (pCastExpr != null) ? pCastExpr : (pCastExpr = new CastExprElements());
	}
	
	public ParserRule getCastExprRule() {
		return getCastExprAccess().getRule();
	}

	//UnaryExpr:
	//	("-" | "+")* unary=ValueExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return (pUnaryExpr != null) ? pUnaryExpr : (pUnaryExpr = new UnaryExprElements());
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//ValueExpr:
	//	value=PathExpr;
	public ValueExprElements getValueExprAccess() {
		return (pValueExpr != null) ? pValueExpr : (pValueExpr = new ValueExprElements());
	}
	
	public ParserRule getValueExprRule() {
		return getValueExprAccess().getRule();
	}

	//PathExpr:
	//	"/" RelativePathExpr {RelSingle.relPathExpr=current} | "//" RelativePathExpr {RelDouble.relPathExpr=current} |
	//	RelativePathExpr {RelNoSelector.relPathExpr=current};
	public PathExprElements getPathExprAccess() {
		return (pPathExpr != null) ? pPathExpr : (pPathExpr = new PathExprElements());
	}
	
	public ParserRule getPathExprRule() {
		return getPathExprAccess().getRule();
	}

	//RelativePathExpr:
	//	step=StepExpr extraSteps+=ExtraStepExpr*;
	public RelativePathExprElements getRelativePathExprAccess() {
		return (pRelativePathExpr != null) ? pRelativePathExpr : (pRelativePathExpr = new RelativePathExprElements());
	}
	
	public ParserRule getRelativePathExprRule() {
		return getRelativePathExprAccess().getRule();
	}

	//ExtraStepExpr returns StepExpr:
	//	"/" StepExpr {Single.step=current} | "//" StepExpr {Double.step=current};
	public ExtraStepExprElements getExtraStepExprAccess() {
		return (pExtraStepExpr != null) ? pExtraStepExpr : (pExtraStepExpr = new ExtraStepExprElements());
	}
	
	public ParserRule getExtraStepExprRule() {
		return getExtraStepExprAccess().getRule();
	}

	//StepExpr:
	//	stepExpr=FilterExpr | stepExpr=AxisStep;
	public StepExprElements getStepExprAccess() {
		return (pStepExpr != null) ? pStepExpr : (pStepExpr = new StepExprElements());
	}
	
	public ParserRule getStepExprRule() {
		return getStepExprAccess().getRule();
	}

	//AxisStep:
	//	(step=ReverseStep | step=ForwardStep) predicateList=PredicateList;
	public AxisStepElements getAxisStepAccess() {
		return (pAxisStep != null) ? pAxisStep : (pAxisStep = new AxisStepElements());
	}
	
	public ParserRule getAxisStepRule() {
		return getAxisStepAccess().getRule();
	}

	//ForwardStep:
	//	forward=ForwardAxis test=NodeTest | abbrForward=AbbrevForwardStep;
	public ForwardStepElements getForwardStepAccess() {
		return (pForwardStep != null) ? pForwardStep : (pForwardStep = new ForwardStepElements());
	}
	
	public ParserRule getForwardStepRule() {
		return getForwardStepAccess().getRule();
	}

	//ForwardAxis:
	//	axis="child" "::" | axis="descendant" "::" | axis="attribute" "::" | axis="self" "::" | axis="descendant-or-self" "::"
	//	| axis="following-sibling" "::" | axis="following" "::" | axis="namespace" "::";
	public ForwardAxisElements getForwardAxisAccess() {
		return (pForwardAxis != null) ? pForwardAxis : (pForwardAxis = new ForwardAxisElements());
	}
	
	public ParserRule getForwardAxisRule() {
		return getForwardAxisAccess().getRule();
	}

	//AbbrevForwardStep:
	//	"@" NodeTest {Attribute.test=current} | NodeTest {Element.test=current};
	public AbbrevForwardStepElements getAbbrevForwardStepAccess() {
		return (pAbbrevForwardStep != null) ? pAbbrevForwardStep : (pAbbrevForwardStep = new AbbrevForwardStepElements());
	}
	
	public ParserRule getAbbrevForwardStepRule() {
		return getAbbrevForwardStepAccess().getRule();
	}

	//ReverseStep:
	//	reverse=REVERSEAXIS test=NodeTest | abbrRevSet=ABBREVREVERSESTEP;
	public ReverseStepElements getReverseStepAccess() {
		return (pReverseStep != null) ? pReverseStep : (pReverseStep = new ReverseStepElements());
	}
	
	public ParserRule getReverseStepRule() {
		return getReverseStepAccess().getRule();
	}

	//NodeTest:
	//	test=KindTest | test=NameTest;
	public NodeTestElements getNodeTestAccess() {
		return (pNodeTest != null) ? pNodeTest : (pNodeTest = new NodeTestElements());
	}
	
	public ParserRule getNodeTestRule() {
		return getNodeTestAccess().getRule();
	}

	//NameTest:
	//	qName=QName | wildcard=Wildcard;
	public NameTestElements getNameTestAccess() {
		return (pNameTest != null) ? pNameTest : (pNameTest = new NameTestElements());
	}
	
	public ParserRule getNameTestRule() {
		return getNameTestAccess().getRule();
	}

	//Wildcard:
	//	wild="*" | left=NCName ":" "*" | "*" ":" right=NCName;
	public WildcardElements getWildcardAccess() {
		return (pWildcard != null) ? pWildcard : (pWildcard = new WildcardElements());
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}

	//FilterExpr:
	//	primary=PrimaryExpr predicateList=PredicateList;
	public FilterExprElements getFilterExprAccess() {
		return (pFilterExpr != null) ? pFilterExpr : (pFilterExpr = new FilterExprElements());
	}
	
	public ParserRule getFilterExprRule() {
		return getFilterExprAccess().getRule();
	}

	//PredicateList:
	//	{PredicateList} predicates+=Predicate*;
	public PredicateListElements getPredicateListAccess() {
		return (pPredicateList != null) ? pPredicateList : (pPredicateList = new PredicateListElements());
	}
	
	public ParserRule getPredicateListRule() {
		return getPredicateListAccess().getRule();
	}

	//Predicate:
	//	"[" expr=Expr "]";
	public PredicateElements getPredicateAccess() {
		return (pPredicate != null) ? pPredicate : (pPredicate = new PredicateElements());
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//PrimaryExpr:
	//	literal=Literal | varRef=VarRef | parExpr=ParenthesizedExpr | conItemExpr=CONTEXTITEMEXPR | functionCall=FunctionCall;
	public PrimaryExprElements getPrimaryExprAccess() {
		return (pPrimaryExpr != null) ? pPrimaryExpr : (pPrimaryExpr = new PrimaryExprElements());
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}

	//Literal:
	//	num=NumericLiteral | string=STRINGLITERAL;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericLiteral:
	//	intLit=INTLITERAL | decLit=DECIMALLITERAL | doubleLit=DOUBLELITERAL;
	public NumericLiteralElements getNumericLiteralAccess() {
		return (pNumericLiteral != null) ? pNumericLiteral : (pNumericLiteral = new NumericLiteralElements());
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//VarRef:
	//	"$" VarName;
	public VarRefElements getVarRefAccess() {
		return (pVarRef != null) ? pVarRef : (pVarRef = new VarRefElements());
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}

	//VarName:
	//	qName=QName;
	public VarNameElements getVarNameAccess() {
		return (pVarName != null) ? pVarName : (pVarName = new VarNameElements());
	}
	
	public ParserRule getVarNameRule() {
		return getVarNameAccess().getRule();
	}

	//ParenthesizedExpr:
	//	{ParenthesizedExpr} "(" expr=Expr? ")";
	public ParenthesizedExprElements getParenthesizedExprAccess() {
		return (pParenthesizedExpr != null) ? pParenthesizedExpr : (pParenthesizedExpr = new ParenthesizedExprElements());
	}
	
	public ParserRule getParenthesizedExprRule() {
		return getParenthesizedExprAccess().getRule();
	}

	//FunctionCall:
	//	qName=QName "(" (expr=ExprSingle ("," exprs+=ExprSingle)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//SingleType:
	//	AtomicType "?"?;
	public SingleTypeElements getSingleTypeAccess() {
		return (pSingleType != null) ? pSingleType : (pSingleType = new SingleTypeElements());
	}
	
	public ParserRule getSingleTypeRule() {
		return getSingleTypeAccess().getRule();
	}

	//SequenceType:
	//	empty=EMPTYSEQUENCETYPE | itemType=ItemType occInd=OccurenceIndicator;
	public SequenceTypeElements getSequenceTypeAccess() {
		return (pSequenceType != null) ? pSequenceType : (pSequenceType = new SequenceTypeElements());
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//OccurenceIndicator:
	//	"?" | "*" | "+";
	public OccurenceIndicatorElements getOccurenceIndicatorAccess() {
		return (pOccurenceIndicator != null) ? pOccurenceIndicator : (pOccurenceIndicator = new OccurenceIndicatorElements());
	}
	
	public ParserRule getOccurenceIndicatorRule() {
		return getOccurenceIndicatorAccess().getRule();
	}

	//ItemType:
	//	kindTest=KindTest | empty=EMPTYITEMTYPE | atomicType=AtomicType;
	public ItemTypeElements getItemTypeAccess() {
		return (pItemType != null) ? pItemType : (pItemType = new ItemTypeElements());
	}
	
	public ParserRule getItemTypeRule() {
		return getItemTypeAccess().getRule();
	}

	//AtomicType:
	//	type=ID;
	public AtomicTypeElements getAtomicTypeAccess() {
		return (pAtomicType != null) ? pAtomicType : (pAtomicType = new AtomicTypeElements());
	}
	
	public ParserRule getAtomicTypeRule() {
		return getAtomicTypeAccess().getRule();
	}

	//KindTest:
	//	docTest=DocumentTest | elemTest=ElementTest | attributeTest=AttributeTest | schemaElemTest=SchemaElementTest |
	//	schemaAttributeTest=SchemaAttributeTest | pitTest=PITest | commentTest=COMMENTTEST | textTest=TEXTTEST |
	//	anyKindTest=ANYKINDTEST;
	public KindTestElements getKindTestAccess() {
		return (pKindTest != null) ? pKindTest : (pKindTest = new KindTestElements());
	}
	
	public ParserRule getKindTestRule() {
		return getKindTestAccess().getRule();
	}

	//DocumentTest:
	//	{DocumentTest} "document-node" "(" (elemTest=ElementTest | schemaElemTest=SchemaElementTest)? ")";
	public DocumentTestElements getDocumentTestAccess() {
		return (pDocumentTest != null) ? pDocumentTest : (pDocumentTest = new DocumentTestElements());
	}
	
	public ParserRule getDocumentTestRule() {
		return getDocumentTestAccess().getRule();
	}

	//PITest:
	//	{PITTest} "processing-instruction" "(" (ncName=NCName | string=STRINGLITERAL)? ")";
	public PITestElements getPITestAccess() {
		return (pPITest != null) ? pPITest : (pPITest = new PITestElements());
	}
	
	public ParserRule getPITestRule() {
		return getPITestAccess().getRule();
	}

	//AttributeTest:
	//	{AttributeTest} "attribute" "(" (attrOrWild=AttribNameOrWildcard ("," typeName=TypeName)?)? ")";
	public AttributeTestElements getAttributeTestAccess() {
		return (pAttributeTest != null) ? pAttributeTest : (pAttributeTest = new AttributeTestElements());
	}
	
	public ParserRule getAttributeTestRule() {
		return getAttributeTestAccess().getRule();
	}

	//AttribNameOrWildcard:
	//	attName=AttributeName | {AttribNameOrWildcard} "*";
	public AttribNameOrWildcardElements getAttribNameOrWildcardAccess() {
		return (pAttribNameOrWildcard != null) ? pAttribNameOrWildcard : (pAttribNameOrWildcard = new AttribNameOrWildcardElements());
	}
	
	public ParserRule getAttribNameOrWildcardRule() {
		return getAttribNameOrWildcardAccess().getRule();
	}

	//SchemaAttributeTest:
	//	"schema-attribute" "(" attDec=AttributeDeclaration ")";
	public SchemaAttributeTestElements getSchemaAttributeTestAccess() {
		return (pSchemaAttributeTest != null) ? pSchemaAttributeTest : (pSchemaAttributeTest = new SchemaAttributeTestElements());
	}
	
	public ParserRule getSchemaAttributeTestRule() {
		return getSchemaAttributeTestAccess().getRule();
	}

	//AttributeDeclaration:
	//	attName=AttributeName;
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return (pAttributeDeclaration != null) ? pAttributeDeclaration : (pAttributeDeclaration = new AttributeDeclarationElements());
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}

	//ElementTest:
	//	{ElementTest} "element" "(" (elemOrWild=ElementNameOrWildcard ("," typeName=TypeName "?"?)?)? ")";
	public ElementTestElements getElementTestAccess() {
		return (pElementTest != null) ? pElementTest : (pElementTest = new ElementTestElements());
	}
	
	public ParserRule getElementTestRule() {
		return getElementTestAccess().getRule();
	}

	//ElementNameOrWildcard:
	//	elemName=ElementName | {ElementNameOrWildcard} "*";
	public ElementNameOrWildcardElements getElementNameOrWildcardAccess() {
		return (pElementNameOrWildcard != null) ? pElementNameOrWildcard : (pElementNameOrWildcard = new ElementNameOrWildcardElements());
	}
	
	public ParserRule getElementNameOrWildcardRule() {
		return getElementNameOrWildcardAccess().getRule();
	}

	//SchemaElementTest:
	//	"schema-element" "(" elemDec=ElementDeclaration ")";
	public SchemaElementTestElements getSchemaElementTestAccess() {
		return (pSchemaElementTest != null) ? pSchemaElementTest : (pSchemaElementTest = new SchemaElementTestElements());
	}
	
	public ParserRule getSchemaElementTestRule() {
		return getSchemaElementTestAccess().getRule();
	}

	//ElementDeclaration:
	//	ElementName;
	public ElementDeclarationElements getElementDeclarationAccess() {
		return (pElementDeclaration != null) ? pElementDeclaration : (pElementDeclaration = new ElementDeclarationElements());
	}
	
	public ParserRule getElementDeclarationRule() {
		return getElementDeclarationAccess().getRule();
	}

	//AttributeName:
	//	qName=QName;
	public AttributeNameElements getAttributeNameAccess() {
		return (pAttributeName != null) ? pAttributeName : (pAttributeName = new AttributeNameElements());
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//ElementName:
	//	qName=QName;
	public ElementNameElements getElementNameAccess() {
		return (pElementName != null) ? pElementName : (pElementName = new ElementNameElements());
	}
	
	public ParserRule getElementNameRule() {
		return getElementNameAccess().getRule();
	}

	//TypeName:
	//	qName=QName;
	public TypeNameElements getTypeNameAccess() {
		return (pTypeName != null) ? pTypeName : (pTypeName = new TypeNameElements());
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}

	//NCName:
	//	ncName=ID;
	public NCNameElements getNCNameAccess() {
		return (pNCName != null) ? pNCName : (pNCName = new NCNameElements());
	}
	
	public ParserRule getNCNameRule() {
		return getNCNameAccess().getRule();
	}

	//QName:
	//	PrefixedName | UnprefixedName;
	public QNameElements getQNameAccess() {
		return (pQName != null) ? pQName : (pQName = new QNameElements());
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//PrefixedName:
	//	prefix=NCName ":" localPart=NCName;
	public PrefixedNameElements getPrefixedNameAccess() {
		return (pPrefixedName != null) ? pPrefixedName : (pPrefixedName = new PrefixedNameElements());
	}
	
	public ParserRule getPrefixedNameRule() {
		return getPrefixedNameAccess().getRule();
	}

	//UnprefixedName:
	//	localPart=NCName;
	public UnprefixedNameElements getUnprefixedNameAccess() {
		return (pUnprefixedName != null) ? pUnprefixedName : (pUnprefixedName = new UnprefixedNameElements());
	}
	
	public ParserRule getUnprefixedNameRule() {
		return getUnprefixedNameAccess().getRule();
	}

	//terminal ABBREVREVERSESTEP:
	//	"..";
	public TerminalRule getABBREVREVERSESTEPRule() {
		return (tABBREVREVERSESTEP != null) ? tABBREVREVERSESTEP : (tABBREVREVERSESTEP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ABBREVREVERSESTEP"));
	} 

	//terminal CONTEXTITEMEXPR:
	//	".";
	public TerminalRule getCONTEXTITEMEXPRRule() {
		return (tCONTEXTITEMEXPR != null) ? tCONTEXTITEMEXPR : (tCONTEXTITEMEXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONTEXTITEMEXPR"));
	} 

	//terminal ANYKINDTEST:
	//	"node" "(" ")";
	public TerminalRule getANYKINDTESTRule() {
		return (tANYKINDTEST != null) ? tANYKINDTEST : (tANYKINDTEST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANYKINDTEST"));
	} 

	//terminal TEXTTEST:
	//	"text" "(" ")";
	public TerminalRule getTEXTTESTRule() {
		return (tTEXTTEST != null) ? tTEXTTEST : (tTEXTTEST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXTTEST"));
	} 

	//terminal COMMENTTEST:
	//	"comment" "(" ")";
	public TerminalRule getCOMMENTTESTRule() {
		return (tCOMMENTTEST != null) ? tCOMMENTTEST : (tCOMMENTTEST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENTTEST"));
	} 

	//terminal EMPTYITEMTYPE:
	//	"item" "(" ")";
	public TerminalRule getEMPTYITEMTYPERule() {
		return (tEMPTYITEMTYPE != null) ? tEMPTYITEMTYPE : (tEMPTYITEMTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EMPTYITEMTYPE"));
	} 

	//terminal EMPTYSEQUENCETYPE:
	//	"empty-sequence" "(" ")";
	public TerminalRule getEMPTYSEQUENCETYPERule() {
		return (tEMPTYSEQUENCETYPE != null) ? tEMPTYSEQUENCETYPE : (tEMPTYSEQUENCETYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EMPTYSEQUENCETYPE"));
	} 

	//terminal REVERSEAXIS:
	//	"parent" "::" | "ancestor" "::" | "preceding-sibling" "::" | "preceding" "::" | "ancestor-or-self" "::";
	public TerminalRule getREVERSEAXISRule() {
		return (tREVERSEAXIS != null) ? tREVERSEAXIS : (tREVERSEAXIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REVERSEAXIS"));
	} 

	//terminal NODECOMP:
	//	"is" | "<<" | ">>";
	public TerminalRule getNODECOMPRule() {
		return (tNODECOMP != null) ? tNODECOMP : (tNODECOMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NODECOMP"));
	} 

	//terminal VALUECOMP:
	//	"eq" | "ne" | "lt" | "le" | "gt" | "ge";
	public TerminalRule getVALUECOMPRule() {
		return (tVALUECOMP != null) ? tVALUECOMP : (tVALUECOMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALUECOMP"));
	} 

	//terminal GENERALCOMP:
	//	"=" | "!=" | "<" | "<=" | ">" | ">=";
	public TerminalRule getGENERALCOMPRule() {
		return (tGENERALCOMP != null) ? tGENERALCOMP : (tGENERALCOMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GENERALCOMP"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INTLITERAL returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTLITERALRule() {
		return (tINTLITERAL != null) ? tINTLITERAL : (tINTLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTLITERAL"));
	} 

	//terminal DECIMALLITERAL:
	//	"." INTLITERAL | INTLITERAL "." INTLITERAL;
	public TerminalRule getDECIMALLITERALRule() {
		return (tDECIMALLITERAL != null) ? tDECIMALLITERAL : (tDECIMALLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMALLITERAL"));
	} 

	//terminal DOUBLELITERAL:
	//	("." INTLITERAL | INTLITERAL ("." "0".."9"*)?) ("e" | "E") ("+" | "-")? INTLITERAL;
	public TerminalRule getDOUBLELITERALRule() {
		return (tDOUBLELITERAL != null) ? tDOUBLELITERAL : (tDOUBLELITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLELITERAL"));
	} 

	//terminal STRINGLITERAL:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGLITERALRule() {
		return (tSTRINGLITERAL != null) ? tSTRINGLITERAL : (tSTRINGLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRINGLITERAL"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
