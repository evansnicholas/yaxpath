/**
 * generated by Xtext
 */
package org.xtext.example.xpath.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.xpath.constants.StepChoice;
import org.xtext.example.xpath.xPath.AbbrevForwardStep;
import org.xtext.example.xpath.xPath.AdditionalIn;
import org.xtext.example.xpath.xPath.AdditiveExpr;
import org.xtext.example.xpath.xPath.AndExpr;
import org.xtext.example.xpath.xPath.Attribute;
import org.xtext.example.xpath.xPath.AxisStep;
import org.xtext.example.xpath.xPath.CastExpr;
import org.xtext.example.xpath.xPath.CastableExpr;
import org.xtext.example.xpath.xPath.ComparisonExpr;
import org.xtext.example.xpath.xPath.Element;
import org.xtext.example.xpath.xPath.Expr;
import org.xtext.example.xpath.xPath.ExprSingle;
import org.xtext.example.xpath.xPath.FilterExpr;
import org.xtext.example.xpath.xPath.ForExpr;
import org.xtext.example.xpath.xPath.ForwardAxis;
import org.xtext.example.xpath.xPath.ForwardStep;
import org.xtext.example.xpath.xPath.IfExpr;
import org.xtext.example.xpath.xPath.InstanceofExpr;
import org.xtext.example.xpath.xPath.IntersectExceptExpr;
import org.xtext.example.xpath.xPath.Literal;
import org.xtext.example.xpath.xPath.MultiplicativeExpr;
import org.xtext.example.xpath.xPath.NCName;
import org.xtext.example.xpath.xPath.NameTest;
import org.xtext.example.xpath.xPath.NodeTest;
import org.xtext.example.xpath.xPath.NumericLiteral;
import org.xtext.example.xpath.xPath.OrExpr;
import org.xtext.example.xpath.xPath.PathExpr;
import org.xtext.example.xpath.xPath.Predicate;
import org.xtext.example.xpath.xPath.PredicateList;
import org.xtext.example.xpath.xPath.PrimaryExpr;
import org.xtext.example.xpath.xPath.QName;
import org.xtext.example.xpath.xPath.QuantifiedExpr;
import org.xtext.example.xpath.xPath.RangeExpr;
import org.xtext.example.xpath.xPath.RelDouble;
import org.xtext.example.xpath.xPath.RelNoSelector;
import org.xtext.example.xpath.xPath.RelSingle;
import org.xtext.example.xpath.xPath.RelativePathExpr;
import org.xtext.example.xpath.xPath.SimpleForClause;
import org.xtext.example.xpath.xPath.Single;
import org.xtext.example.xpath.xPath.StepExpr;
import org.xtext.example.xpath.xPath.TreatExpr;
import org.xtext.example.xpath.xPath.UnaryExpr;
import org.xtext.example.xpath.xPath.UnionExpr;
import org.xtext.example.xpath.xPath.UnprefixedName;
import org.xtext.example.xpath.xPath.ValueExpr;
import org.xtext.example.xpath.xPath.Wildcard;
import org.xtext.example.xpath.xPath.Xpath;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class XPathGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Xpath> _filter = Iterables.<Xpath>filter(_iterable, Xpath.class);
    for (final Xpath e : _filter) {
      CharSequence _compile = this.compile(e);
      fsa.generateFile("generation.scala", _compile);
    }
  }
  
  protected CharSequence _compile(final Xpath xe) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def xpath(elem: Elem): IndexedSeq[Any] = {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("val documentElem = Elem(QName(\"documentNode\"))");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("val totalElem = documentElem.withChildren(Vector(elem))");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("var focus = Vector(Focus(totalElem, 1))");
    _builder.newLine();
    _builder.append("  ");
    Expr _xpath = xe.getXpath();
    Object _compile = this.compile(_xpath);
    _builder.append(_compile, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("focus");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  protected CharSequence _compile(final Expr e) {
    StringConcatenation _builder = new StringConcatenation();
    ExprSingle _exprSingle = e.getExprSingle();
    Object _compile = this.compile(_exprSingle);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final ExprSingle es) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _compile(final ForExpr fe) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _compile(final SimpleForClause sfc) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _compile(final AdditionalIn ai) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _compile(final QuantifiedExpr qe) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _compile(final IfExpr ie) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _compile(final OrExpr oe) {
    StringConcatenation _builder = new StringConcatenation();
    AndExpr _left = oe.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final AndExpr ae) {
    StringConcatenation _builder = new StringConcatenation();
    ComparisonExpr _left = ae.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final ComparisonExpr ce) {
    StringConcatenation _builder = new StringConcatenation();
    RangeExpr _left = ce.getLeft();
    Object _compile = this.compile(_left);
    _builder.append(_compile, "");
    {
      EObject _comp = ce.getComp();
      boolean _notEquals = (!Objects.equal(_comp, null));
      if (_notEquals) {
        EObject _comp_1 = ce.getComp();
        Object _compile_1 = this.compile(_comp_1);
        _builder.append(_compile_1, "");
        RangeExpr _right = ce.getRight();
        Object _compile_2 = this.compile(_right);
        _builder.append(_compile_2, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final RangeExpr re) {
    StringConcatenation _builder = new StringConcatenation();
    AdditiveExpr _from = re.getFrom();
    Object _compile = this.compile(_from);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final AdditiveExpr ae) {
    return null;
  }
  
  protected CharSequence _compile(final MultiplicativeExpr me) {
    return null;
  }
  
  protected CharSequence _compile(final UnionExpr ue) {
    return null;
  }
  
  protected CharSequence _compile(final IntersectExceptExpr eie) {
    return null;
  }
  
  protected CharSequence _compile(final InstanceofExpr ioe) {
    return null;
  }
  
  protected CharSequence _compile(final TreatExpr te) {
    return null;
  }
  
  protected CharSequence _compile(final CastableExpr ce) {
    return null;
  }
  
  protected CharSequence _compile(final CastExpr ce) {
    return null;
  }
  
  protected CharSequence _compile(final UnaryExpr ue) {
    StringConcatenation _builder = new StringConcatenation();
    ValueExpr _value = ue.getValue();
    Object _compile = this.compile(_value);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final ValueExpr ve) {
    StringConcatenation _builder = new StringConcatenation();
    PathExpr _value = ve.getValue();
    Object _compile = this.compile(_value);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final RelSingle rs) {
    StringConcatenation _builder = new StringConcatenation();
    RelativePathExpr _relPathExpr = rs.getRelPathExpr();
    StepExpr _step = _relPathExpr.getStep();
    CharSequence _compile = this.compile(_step, StepChoice.SINGLE);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    {
      RelativePathExpr _relPathExpr_1 = rs.getRelPathExpr();
      EList<StepExpr> _extraSteps = _relPathExpr_1.getExtraSteps();
      boolean _notEquals = (!Objects.equal(_extraSteps, null));
      if (_notEquals) {
        {
          RelativePathExpr _relPathExpr_2 = rs.getRelPathExpr();
          EList<StepExpr> _extraSteps_1 = _relPathExpr_2.getExtraSteps();
          for(final StepExpr extra : _extraSteps_1) {
            Object _compile_1 = this.compile(extra);
            _builder.append(_compile_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final RelDouble rd) {
    StringConcatenation _builder = new StringConcatenation();
    RelativePathExpr _relPathExpr = rd.getRelPathExpr();
    StepExpr _step = _relPathExpr.getStep();
    CharSequence _compile = this.compile(_step, StepChoice.DOUBLE);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    {
      RelativePathExpr _relPathExpr_1 = rd.getRelPathExpr();
      EList<StepExpr> _extraSteps = _relPathExpr_1.getExtraSteps();
      boolean _notEquals = (!Objects.equal(_extraSteps, null));
      if (_notEquals) {
        {
          RelativePathExpr _relPathExpr_2 = rd.getRelPathExpr();
          EList<StepExpr> _extraSteps_1 = _relPathExpr_2.getExtraSteps();
          for(final StepExpr extra : _extraSteps_1) {
            Object _compile_1 = this.compile(extra);
            _builder.append(_compile_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final RelNoSelector rns) {
    StringConcatenation _builder = new StringConcatenation();
    RelativePathExpr _relPathExpr = rns.getRelPathExpr();
    StepExpr _step = _relPathExpr.getStep();
    CharSequence _compile = this.compile(_step, StepChoice.NO_SELECTOR);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final Single s) {
    StringConcatenation _builder = new StringConcatenation();
    StepExpr _step = s.getStep();
    CharSequence _compile = this.compile(_step, StepChoice.SINGLE);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final org.xtext.example.xpath.xPath.Double d) {
    StringConcatenation _builder = new StringConcatenation();
    StepExpr _step = d.getStep();
    CharSequence _compile = this.compile(_step, StepChoice.DOUBLE);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final StepExpr se, final StepChoice stepChoice) {
    StringConcatenation _builder = new StringConcatenation();
    EObject _stepExpr = se.getStepExpr();
    Object _compile = this.compile(_stepExpr, stepChoice);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final AxisStep axs, final StepChoice stepChoice) {
    StringConcatenation _builder = new StringConcatenation();
    EObject _step = axs.getStep();
    Object _compile = this.compile(_step, stepChoice);
    _builder.append(_compile, "");
    PredicateList _predicateList = axs.getPredicateList();
    Object _compile_1 = this.compile(_predicateList);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  protected CharSequence _compile(final PredicateList pl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Predicate> _predicates = pl.getPredicates();
      for(final Predicate p : _predicates) {
        Object _compile = this.compile(p);
        _builder.append(_compile, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final Predicate p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("focus = {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("focus filter { outerFocus => ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{ ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("var focus = Vector(outerFocus)");
    _builder.newLine();
    _builder.append("      ");
    Expr _expr = p.getExpr();
    Object _compile = this.compile(_expr);
    _builder.append(_compile, "      ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t  ");
    _builder.append("focus match {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("case Vector(Focus(b:Boolean, pos)) => b");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case Vector(Focus(int:Int, pos)) => outerFocus.position == int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case _ => ???");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final ForwardStep fs, final StepChoice stepChoice) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ForwardAxis _forward = fs.getForward();
      boolean _notEquals = (!Objects.equal(_forward, null));
      if (_notEquals) {
        ForwardAxis _forward_1 = fs.getForward();
        _builder.append(_forward_1, "");
        NodeTest _test = fs.getTest();
        Object _compile = this.compile(_test);
        _builder.append(_compile, "");
      }
    }
    {
      AbbrevForwardStep _abbrForward = fs.getAbbrForward();
      boolean _notEquals_1 = (!Objects.equal(_abbrForward, null));
      if (_notEquals_1) {
        AbbrevForwardStep _abbrForward_1 = fs.getAbbrForward();
        Object _compile_1 = this.compile(_abbrForward_1, stepChoice);
        _builder.append(_compile_1, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final Element e, final StepChoice stepChoice) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (Objects.equal(stepChoice,StepChoice.SINGLE)) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("focus = { ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("val search = focus flatMap { case Focus(contextItem, position) => ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("contextItem match {");
        _builder.newLine();
        _builder.append("  \t  ");
        _builder.append("case elem: Elem => elem.filterChildElems { ");
        NodeTest _test = e.getTest();
        Object _compile = this.compile(_test);
        _builder.append(_compile, "  \t  ");
        _builder.append(" } ");
        _builder.newLineIfNotEmpty();
        _builder.append("  \t  ");
        _builder.append("case _ => ???");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("search.zip(1 until search.size + 1) map { case (result, position) => Focus(result, position) }");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("}");
        _builder.newLine();
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (Objects.equal(stepChoice,StepChoice.DOUBLE)) {
        _matched=true;
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("focus = {");
        _builder_1.newLine();
        _builder_1.append("   ");
        _builder_1.append("val search = focus flatMap { case Focus(contextItem, position) => ");
        _builder_1.newLine();
        _builder_1.append("     ");
        _builder_1.append("contextItem match {");
        _builder_1.newLine();
        _builder_1.append("  \t   ");
        _builder_1.append("case elem: Elem => elem.filterElemsOrSelf { ");
        NodeTest _test_1 = e.getTest();
        Object _compile_1 = this.compile(_test_1);
        _builder_1.append(_compile_1, "  \t   ");
        _builder_1.append(" } ");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("  \t   ");
        _builder_1.append("case _ => ???");
        _builder_1.newLine();
        _builder_1.append("     ");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("   ");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("   ");
        _builder_1.append("search.zip(1 until search.size + 1) map { case (result, position) => Focus(result, position) }");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        _switchResult = _builder_1;
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _compile(final Attribute a, final StepChoice stepChoice) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (Objects.equal(stepChoice,StepChoice.SINGLE)) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("focus = { ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("val search = focus collect {  case Focus(contextItem, position) => ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("contextItem match {");
        _builder.newLine();
        _builder.append("\t  ");
        _builder.append("case elem:Elem if elem.attributeOption(");
        NodeTest _test = a.getTest();
        Object _compile = this.compile(_test);
        _builder.append(_compile, "\t  ");
        _builder.append(").isDefined => elem.attribute(");
        NodeTest _test_1 = a.getTest();
        Object _compile_1 = this.compile(_test_1);
        _builder.append(_compile_1, "\t  ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t  ");
        _builder.append("case _ => ???");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("search.zip(1 until search.size + 1) map { case (result, position) => Focus(result, position) }  ");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (Objects.equal(stepChoice,StepChoice.DOUBLE)) {
        _matched=true;
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("focus = { ");
        _builder_1.newLine();
        _builder_1.append("  ");
        _builder_1.append("val search = focus flatMap { case Focus(contextItem, position) => ");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("contextItem match {");
        _builder_1.newLine();
        _builder_1.append("      ");
        _builder_1.append("case elem:Elem =>\telem.filterElemsOrSelf { _.attributeOption(");
        NodeTest _test_2 = a.getTest();
        Object _compile_2 = this.compile(_test_2);
        _builder_1.append(_compile_2, "      ");
        _builder_1.append(").isDefined }");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t\t\t            ");
        _builder_1.append(".map { _.attribute(");
        NodeTest _test_3 = a.getTest();
        Object _compile_3 = this.compile(_test_3);
        _builder_1.append(_compile_3, "\t\t\t            ");
        _builder_1.append(") }");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("    ");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("  ");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("  ");
        _builder_1.append("search.zip(1 until search.size + 1) map { case (result, position) => Focus(result, position) }\t\t\t                     ");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        _switchResult = _builder_1;
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _compile(final NodeTest not) {
    StringConcatenation _builder = new StringConcatenation();
    EObject _test = not.getTest();
    Object _compile = this.compile(_test);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final NameTest nat) {
    StringConcatenation _builder = new StringConcatenation();
    {
      QName _qName = nat.getQName();
      boolean _notEquals = (!Objects.equal(_qName, null));
      if (_notEquals) {
        QName _qName_1 = nat.getQName();
        Object _compile = this.compile(_qName_1);
        _builder.append(_compile, "");
      }
    }
    {
      Wildcard _wildcard = nat.getWildcard();
      boolean _notEquals_1 = (!Objects.equal(_wildcard, null));
      if (_notEquals_1) {
        Wildcard _wildcard_1 = nat.getWildcard();
        Object _compile_1 = this.compile(_wildcard_1);
        _builder.append(_compile_1, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final FilterExpr f, final StepChoice stepChoice) {
    StringConcatenation _builder = new StringConcatenation();
    PrimaryExpr _primary = f.getPrimary();
    Object _compile = this.compile(_primary);
    _builder.append(_compile, "");
    PredicateList _predicateList = f.getPredicateList();
    Object _compile_1 = this.compile(_predicateList);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  protected CharSequence _compile(final PrimaryExpr pe) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Literal _literal = pe.getLiteral();
      boolean _notEquals = (!Objects.equal(_literal, null));
      if (_notEquals) {
        Literal _literal_1 = pe.getLiteral();
        Object _compile = this.compile(_literal_1);
        _builder.append(_compile, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final Literal l) {
    StringConcatenation _builder = new StringConcatenation();
    {
      NumericLiteral _num = l.getNum();
      boolean _notEquals = (!Objects.equal(_num, null));
      if (_notEquals) {
        _builder.append("focus = Vector(Focus(");
        NumericLiteral _num_1 = l.getNum();
        int _intLit = _num_1.getIntLit();
        _builder.append(_intLit, "");
        _builder.append(", 1))");
      }
    }
    {
      String _string = l.getString();
      boolean _notEquals_1 = (!Objects.equal(_string, null));
      if (_notEquals_1) {
        _builder.append("focus = Vector(Focus(");
        String _string_1 = l.getString();
        _builder.append(_string_1, "");
        _builder.append(", 1))");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final UnprefixedName un) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("EName(\"");
    NCName _localPart = un.getLocalPart();
    String _ncName = _localPart.getNcName();
    _builder.append(_ncName, "");
    _builder.append("\")");
    return _builder;
  }
  
  protected CharSequence _compile(final EObject o) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence compile(final EObject ue) {
    if (ue instanceof UnaryExpr) {
      return _compile((UnaryExpr)ue);
    } else if (ue instanceof CastExpr) {
      return _compile((CastExpr)ue);
    } else if (ue instanceof CastableExpr) {
      return _compile((CastableExpr)ue);
    } else if (ue instanceof TreatExpr) {
      return _compile((TreatExpr)ue);
    } else if (ue instanceof InstanceofExpr) {
      return _compile((InstanceofExpr)ue);
    } else if (ue instanceof IntersectExceptExpr) {
      return _compile((IntersectExceptExpr)ue);
    } else if (ue instanceof UnionExpr) {
      return _compile((UnionExpr)ue);
    } else if (ue instanceof org.xtext.example.xpath.xPath.Double) {
      return _compile((org.xtext.example.xpath.xPath.Double)ue);
    } else if (ue instanceof ForExpr) {
      return _compile((ForExpr)ue);
    } else if (ue instanceof IfExpr) {
      return _compile((IfExpr)ue);
    } else if (ue instanceof MultiplicativeExpr) {
      return _compile((MultiplicativeExpr)ue);
    } else if (ue instanceof NodeTest) {
      return _compile((NodeTest)ue);
    } else if (ue instanceof OrExpr) {
      return _compile((OrExpr)ue);
    } else if (ue instanceof QuantifiedExpr) {
      return _compile((QuantifiedExpr)ue);
    } else if (ue instanceof RelDouble) {
      return _compile((RelDouble)ue);
    } else if (ue instanceof RelNoSelector) {
      return _compile((RelNoSelector)ue);
    } else if (ue instanceof RelSingle) {
      return _compile((RelSingle)ue);
    } else if (ue instanceof Single) {
      return _compile((Single)ue);
    } else if (ue instanceof UnprefixedName) {
      return _compile((UnprefixedName)ue);
    } else if (ue instanceof AdditionalIn) {
      return _compile((AdditionalIn)ue);
    } else if (ue instanceof AdditiveExpr) {
      return _compile((AdditiveExpr)ue);
    } else if (ue instanceof AndExpr) {
      return _compile((AndExpr)ue);
    } else if (ue instanceof ComparisonExpr) {
      return _compile((ComparisonExpr)ue);
    } else if (ue instanceof Expr) {
      return _compile((Expr)ue);
    } else if (ue instanceof ExprSingle) {
      return _compile((ExprSingle)ue);
    } else if (ue instanceof Literal) {
      return _compile((Literal)ue);
    } else if (ue instanceof NameTest) {
      return _compile((NameTest)ue);
    } else if (ue instanceof Predicate) {
      return _compile((Predicate)ue);
    } else if (ue instanceof PredicateList) {
      return _compile((PredicateList)ue);
    } else if (ue instanceof PrimaryExpr) {
      return _compile((PrimaryExpr)ue);
    } else if (ue instanceof RangeExpr) {
      return _compile((RangeExpr)ue);
    } else if (ue instanceof SimpleForClause) {
      return _compile((SimpleForClause)ue);
    } else if (ue instanceof ValueExpr) {
      return _compile((ValueExpr)ue);
    } else if (ue instanceof Xpath) {
      return _compile((Xpath)ue);
    } else if (ue != null) {
      return _compile(ue);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ue).toString());
    }
  }
  
  public CharSequence compile(final EObject a, final StepChoice stepChoice) {
    if (a instanceof Attribute) {
      return _compile((Attribute)a, stepChoice);
    } else if (a instanceof Element) {
      return _compile((Element)a, stepChoice);
    } else if (a instanceof AxisStep) {
      return _compile((AxisStep)a, stepChoice);
    } else if (a instanceof FilterExpr) {
      return _compile((FilterExpr)a, stepChoice);
    } else if (a instanceof ForwardStep) {
      return _compile((ForwardStep)a, stepChoice);
    } else if (a instanceof StepExpr) {
      return _compile((StepExpr)a, stepChoice);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(a, stepChoice).toString());
    }
  }
}
