/**
 * generated by Xtext
 */
package org.xtext.example.xpath.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.xpath.constants.StepChoice;
import org.xtext.example.xpath.xPath.AbbrevForwardStep;
import org.xtext.example.xpath.xPath.Attribute;
import org.xtext.example.xpath.xPath.AxisStep;
import org.xtext.example.xpath.xPath.Element;
import org.xtext.example.xpath.xPath.FilterExpr;
import org.xtext.example.xpath.xPath.ForwardAxis;
import org.xtext.example.xpath.xPath.ForwardStep;
import org.xtext.example.xpath.xPath.Literal;
import org.xtext.example.xpath.xPath.NCName;
import org.xtext.example.xpath.xPath.NameTest;
import org.xtext.example.xpath.xPath.NodeTest;
import org.xtext.example.xpath.xPath.NumericLiteral;
import org.xtext.example.xpath.xPath.PathExpr;
import org.xtext.example.xpath.xPath.PredicateList;
import org.xtext.example.xpath.xPath.PrimaryExpr;
import org.xtext.example.xpath.xPath.QName;
import org.xtext.example.xpath.xPath.RelDouble;
import org.xtext.example.xpath.xPath.RelSingle;
import org.xtext.example.xpath.xPath.RelativePathExpr;
import org.xtext.example.xpath.xPath.Single;
import org.xtext.example.xpath.xPath.StepExpr;
import org.xtext.example.xpath.xPath.UnprefixedName;
import org.xtext.example.xpath.xPath.ValueExpr;
import org.xtext.example.xpath.xPath.Wildcard;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class XPathGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    StringBuilder _stringBuilder = new StringBuilder();
    final StringBuilder sb = _stringBuilder;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<ValueExpr> _filter = Iterables.<ValueExpr>filter(_iterable, ValueExpr.class);
    for (final ValueExpr e : _filter) {
      {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("def xpath(elem: Elem): IndexedSeq[Any] = {");
        _builder.newLine();
        _builder.append("\t\t\t\t  ");
        _builder.append("val documentElem = Elem(QName(\"documentNode\"))");
        _builder.newLine();
        _builder.append("                  ");
        _builder.append("val totalElem = documentElem.withChildren(Vector(elem))");
        _builder.newLine();
        _builder.append("\t\t\t      ");
        CharSequence _compile = this.compile(e);
        _builder.append(_compile, "\t\t\t      ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t   ");
        _builder.append("}");
        _builder.newLine();
        final String compiled = _builder.toString();
        sb.append(compiled);
      }
    }
    fsa.generateFile("generation.scala", sb);
  }
  
  protected CharSequence _compile(final ValueExpr ve) {
    StringConcatenation _builder = new StringConcatenation();
    PathExpr _value = ve.getValue();
    Object _compile = this.compile(_value);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final RelSingle rs) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("totalElem");
    RelativePathExpr _relPathExpr = rs.getRelPathExpr();
    StepExpr _step = _relPathExpr.getStep();
    CharSequence _compile = this.compile(_step, Boolean.valueOf(true), StepChoice.SINGLE);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    {
      RelativePathExpr _relPathExpr_1 = rs.getRelPathExpr();
      EList<StepExpr> _extraSteps = _relPathExpr_1.getExtraSteps();
      boolean _notEquals = (!Objects.equal(_extraSteps, null));
      if (_notEquals) {
        {
          RelativePathExpr _relPathExpr_2 = rs.getRelPathExpr();
          EList<StepExpr> _extraSteps_1 = _relPathExpr_2.getExtraSteps();
          for(final StepExpr extra : _extraSteps_1) {
            _builder.append("\t\t");
            Object _compile_1 = this.compile(extra);
            _builder.append(_compile_1, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final RelDouble rd) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("totalElem");
    RelativePathExpr _relPathExpr = rd.getRelPathExpr();
    StepExpr _step = _relPathExpr.getStep();
    CharSequence _compile = this.compile(_step, Boolean.valueOf(true), StepChoice.DOUBLE);
    _builder.append(_compile, "");
    _builder.newLineIfNotEmpty();
    {
      RelativePathExpr _relPathExpr_1 = rd.getRelPathExpr();
      EList<StepExpr> _extraSteps = _relPathExpr_1.getExtraSteps();
      boolean _notEquals = (!Objects.equal(_extraSteps, null));
      if (_notEquals) {
        {
          RelativePathExpr _relPathExpr_2 = rd.getRelPathExpr();
          EList<StepExpr> _extraSteps_1 = _relPathExpr_2.getExtraSteps();
          for(final StepExpr extra : _extraSteps_1) {
            _builder.append("\t\t");
            Object _compile_1 = this.compile(extra);
            _builder.append(_compile_1, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final Single s) {
    StringConcatenation _builder = new StringConcatenation();
    StepExpr _step = s.getStep();
    CharSequence _compile = this.compile(_step, Boolean.valueOf(false), StepChoice.SINGLE);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final org.xtext.example.xpath.xPath.Double d) {
    StringConcatenation _builder = new StringConcatenation();
    StepExpr _step = d.getStep();
    CharSequence _compile = this.compile(_step, Boolean.valueOf(false), StepChoice.DOUBLE);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final StepExpr se, final Boolean isFirstStep, final StepChoice stepChoice) {
    StringConcatenation _builder = new StringConcatenation();
    EObject _stepExpr = se.getStepExpr();
    Object _compile = this.compile(_stepExpr, isFirstStep, stepChoice);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final AxisStep axs, final Boolean isFirstStep, final StepChoice stepChoice) {
    StringConcatenation _builder = new StringConcatenation();
    EObject _step = axs.getStep();
    Object _compile = this.compile(_step, isFirstStep, stepChoice);
    _builder.append(_compile, "");
    PredicateList _predicateList = axs.getPredicateList();
    Object _compile_1 = this.compile(_predicateList);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  protected CharSequence _compile(final ForwardStep fs, final Boolean isFirstStep, final StepChoice stepChoice) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ForwardAxis _forward = fs.getForward();
      boolean _notEquals = (!Objects.equal(_forward, null));
      if (_notEquals) {
        ForwardAxis _forward_1 = fs.getForward();
        _builder.append(_forward_1, "");
        NodeTest _test = fs.getTest();
        Object _compile = this.compile(_test);
        _builder.append(_compile, "");
      }
    }
    {
      AbbrevForwardStep _abbrForward = fs.getAbbrForward();
      boolean _notEquals_1 = (!Objects.equal(_abbrForward, null));
      if (_notEquals_1) {
        AbbrevForwardStep _abbrForward_1 = fs.getAbbrForward();
        Object _compile_1 = this.compile(_abbrForward_1, isFirstStep, stepChoice);
        _builder.append(_compile_1, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final Element e, final Boolean isFirstStep, final StepChoice stepChoice) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (isFirstStep instanceof Boolean) {
        if (((isFirstStep).booleanValue() == true)) {
          _matched=true;
          CharSequence _switchResult_1 = null;
          boolean _matched_1 = false;
          if (!_matched_1) {
            if (Objects.equal(stepChoice,StepChoice.SINGLE)) {
              _matched_1=true;
              StringConcatenation _builder = new StringConcatenation();
              _builder.append(".filterChildElems { ");
              NodeTest _test = e.getTest();
              Object _compile = this.compile(_test);
              _builder.append(_compile, "");
              _builder.append(" }");
              _switchResult_1 = _builder;
            }
          }
          if (!_matched_1) {
            if (Objects.equal(stepChoice,StepChoice.DOUBLE)) {
              _matched_1=true;
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append(".filterElemsOrSelf { ");
              NodeTest _test_1 = e.getTest();
              Object _compile_1 = this.compile(_test_1);
              _builder_1.append(_compile_1, "");
              _builder_1.append(" }");
              _switchResult_1 = _builder_1;
            }
          }
          _switchResult = _switchResult_1;
        }
      }
    }
    if (!_matched) {
      if (isFirstStep instanceof Boolean) {
        if (((isFirstStep).booleanValue() == false)) {
          _matched=true;
          CharSequence _switchResult_1 = null;
          boolean _matched_1 = false;
          if (!_matched_1) {
            if (Objects.equal(stepChoice,StepChoice.SINGLE)) {
              _matched_1=true;
              StringConcatenation _builder = new StringConcatenation();
              _builder.append(".flatMap {  _.filterChildElems(");
              NodeTest _test = e.getTest();
              Object _compile = this.compile(_test);
              _builder.append(_compile, "");
              _builder.append(") }");
              _switchResult_1 = _builder;
            }
          }
          if (!_matched_1) {
            if (Objects.equal(stepChoice,StepChoice.DOUBLE)) {
              _matched_1=true;
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append(".flatMap { _.filterElemsOrSelf(");
              NodeTest _test_1 = e.getTest();
              Object _compile_1 = this.compile(_test_1);
              _builder_1.append(_compile_1, "");
              _builder_1.append(") }");
              _switchResult_1 = _builder_1;
            }
          }
          _switchResult = _switchResult_1;
        }
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _compile(final Attribute a, final Boolean isFirstStep, final StepChoice stepChoice) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (isFirstStep instanceof Boolean) {
        if (((isFirstStep).booleanValue() == true)) {
          _matched=true;
          CharSequence _switchResult_1 = null;
          boolean _matched_1 = false;
          if (!_matched_1) {
            if (Objects.equal(stepChoice,StepChoice.SINGLE)) {
              _matched_1=true;
              StringConcatenation _builder = new StringConcatenation();
              _builder.append(".filterChildElems { elem => elem.attributeOption(");
              NodeTest _test = a.getTest();
              Object _compile = this.compile(_test);
              _builder.append(_compile, "");
              _builder.append(").isDefined }");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t                     ");
              _builder.append(".map { _.attribute(");
              NodeTest _test_1 = a.getTest();
              Object _compile_1 = this.compile(_test_1);
              _builder.append(_compile_1, "\t\t\t                     ");
              _builder.append(") }");
              _switchResult_1 = _builder;
            }
          }
          if (!_matched_1) {
            if (Objects.equal(stepChoice,StepChoice.DOUBLE)) {
              _matched_1=true;
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append(".filterElemsOrSelf { elem => elem.attributeOption(");
              NodeTest _test_2 = a.getTest();
              Object _compile_2 = this.compile(_test_2);
              _builder_1.append(_compile_2, "");
              _builder_1.append(").isDefined }");
              _builder_1.newLineIfNotEmpty();
              _builder_1.append("\t\t\t                     ");
              _builder_1.append(".map { _.attribute(");
              NodeTest _test_3 = a.getTest();
              Object _compile_3 = this.compile(_test_3);
              _builder_1.append(_compile_3, "\t\t\t                     ");
              _builder_1.append(") }");
              _switchResult_1 = _builder_1;
            }
          }
          _switchResult = _switchResult_1;
        }
      }
    }
    if (!_matched) {
      if (isFirstStep instanceof Boolean) {
        if (((isFirstStep).booleanValue() == false)) {
          _matched=true;
          CharSequence _switchResult_1 = null;
          boolean _matched_1 = false;
          if (!_matched_1) {
            if (Objects.equal(stepChoice,StepChoice.SINGLE)) {
              _matched_1=true;
              StringConcatenation _builder = new StringConcatenation();
              _builder.append(".collect {  case elem if elem.attributeOption(");
              NodeTest _test = a.getTest();
              Object _compile = this.compile(_test);
              _builder.append(_compile, "");
              _builder.append(").isDefined =>  elem.attribute(");
              NodeTest _test_1 = a.getTest();
              Object _compile_1 = this.compile(_test_1);
              _builder.append(_compile_1, "");
              _builder.append(") }");
              _switchResult_1 = _builder;
            }
          }
          if (!_matched_1) {
            if (Objects.equal(stepChoice,StepChoice.DOUBLE)) {
              _matched_1=true;
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append(".flatMap { _.filterElemsOrSelf { elem => elem.attributeOption(");
              NodeTest _test_2 = a.getTest();
              Object _compile_2 = this.compile(_test_2);
              _builder_1.append(_compile_2, "");
              _builder_1.append(").isDefined }");
              _builder_1.newLineIfNotEmpty();
              _builder_1.append("\t\t\t                     ");
              _builder_1.append(".map { _.attribute(");
              NodeTest _test_3 = a.getTest();
              Object _compile_3 = this.compile(_test_3);
              _builder_1.append(_compile_3, "\t\t\t                     ");
              _builder_1.append(") }");
              _switchResult_1 = _builder_1;
            }
          }
          _switchResult = _switchResult_1;
        }
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _compile(final NodeTest not) {
    StringConcatenation _builder = new StringConcatenation();
    EObject _test = not.getTest();
    Object _compile = this.compile(_test);
    _builder.append(_compile, "");
    return _builder;
  }
  
  protected CharSequence _compile(final NameTest nat) {
    StringConcatenation _builder = new StringConcatenation();
    {
      QName _qName = nat.getQName();
      boolean _notEquals = (!Objects.equal(_qName, null));
      if (_notEquals) {
        QName _qName_1 = nat.getQName();
        Object _compile = this.compile(_qName_1);
        _builder.append(_compile, "");
      }
    }
    {
      Wildcard _wildcard = nat.getWildcard();
      boolean _notEquals_1 = (!Objects.equal(_wildcard, null));
      if (_notEquals_1) {
        Wildcard _wildcard_1 = nat.getWildcard();
        Object _compile_1 = this.compile(_wildcard_1);
        _builder.append(_compile_1, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final FilterExpr f) {
    StringConcatenation _builder = new StringConcatenation();
    PrimaryExpr _primary = f.getPrimary();
    Object _compile = this.compile(_primary);
    _builder.append(_compile, "");
    PredicateList _predicateList = f.getPredicateList();
    Object _compile_1 = this.compile(_predicateList);
    _builder.append(_compile_1, "");
    return _builder;
  }
  
  protected CharSequence _compile(final PrimaryExpr pe) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Literal _literal = pe.getLiteral();
      boolean _notEquals = (!Objects.equal(_literal, null));
      if (_notEquals) {
        Literal _literal_1 = pe.getLiteral();
        Object _compile = this.compile(_literal_1);
        _builder.append(_compile, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final Literal l) {
    StringConcatenation _builder = new StringConcatenation();
    {
      NumericLiteral _num = l.getNum();
      boolean _notEquals = (!Objects.equal(_num, null));
      if (_notEquals) {
        NumericLiteral _num_1 = l.getNum();
        _builder.append(_num_1, "");
      }
    }
    {
      String _string = l.getString();
      boolean _notEquals_1 = (!Objects.equal(_string, null));
      if (_notEquals_1) {
        String _string_1 = l.getString();
        _builder.append(_string_1, "");
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final UnprefixedName un) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("EName(\"");
    NCName _localPart = un.getLocalPart();
    String _ncName = _localPart.getNcName();
    _builder.append(_ncName, "");
    _builder.append("\")");
    return _builder;
  }
  
  protected CharSequence _compile(final EObject o) {
    return null;
  }
  
  public CharSequence compile(final EObject d) {
    if (d instanceof org.xtext.example.xpath.xPath.Double) {
      return _compile((org.xtext.example.xpath.xPath.Double)d);
    } else if (d instanceof NodeTest) {
      return _compile((NodeTest)d);
    } else if (d instanceof RelDouble) {
      return _compile((RelDouble)d);
    } else if (d instanceof RelSingle) {
      return _compile((RelSingle)d);
    } else if (d instanceof Single) {
      return _compile((Single)d);
    } else if (d instanceof UnprefixedName) {
      return _compile((UnprefixedName)d);
    } else if (d instanceof FilterExpr) {
      return _compile((FilterExpr)d);
    } else if (d instanceof Literal) {
      return _compile((Literal)d);
    } else if (d instanceof NameTest) {
      return _compile((NameTest)d);
    } else if (d instanceof PrimaryExpr) {
      return _compile((PrimaryExpr)d);
    } else if (d instanceof ValueExpr) {
      return _compile((ValueExpr)d);
    } else if (d != null) {
      return _compile(d);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(d).toString());
    }
  }
  
  public CharSequence compile(final EObject a, final Boolean isFirstStep, final StepChoice stepChoice) {
    if (a instanceof Attribute) {
      return _compile((Attribute)a, isFirstStep, stepChoice);
    } else if (a instanceof Element) {
      return _compile((Element)a, isFirstStep, stepChoice);
    } else if (a instanceof AxisStep) {
      return _compile((AxisStep)a, isFirstStep, stepChoice);
    } else if (a instanceof ForwardStep) {
      return _compile((ForwardStep)a, isFirstStep, stepChoice);
    } else if (a instanceof StepExpr) {
      return _compile((StepExpr)a, isFirstStep, stepChoice);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(a, isFirstStep, stepChoice).toString());
    }
  }
}
