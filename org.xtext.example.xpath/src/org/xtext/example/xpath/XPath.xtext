grammar org.xtext.example.xpath.XPath
hidden(WS)

generate xPath "http://www.xtext.org/example/xpath/XPath"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//Removed ? from "/" singlePath=RelativePathExpr? in RelativePathExpr because this caused the grammar to be 
//ambiguous, couldn't work out how to solve this.
//Did the same for occInd=OccurenceIndicator? This also gave an ambiguity error but should be addressed.

Expr:
	exprSingle=ExprSingle (',' exprsSingle+=ExprSingle)*
;

ExprSingle:
	ForExpr | QuantifiedExpr | IfExpr | OrExpr
;

ForExpr:  	
	for=SimpleForClause 'return' return=ExprSingle
;

SimpleForClause:
  'for' '$' forVar=VarName 'in' in=ExprSingle (additionalIn+=AdditionalIn)*
;

AdditionalIn:
  ',' '$' variable=VarName 'in' in=ExprSingle
;

QuantifiedExpr:
	("some" | "every") "$" variable=VarName "in" in=ExprSingle (additionalIn+=AdditionalIn)* "satisfies" satisfy=ExprSingle
;

IfExpr:
    "if" "(" if=Expr ")" "then" then=ExprSingle "else" else=ExprSingle
;

OrExpr:
 	left=AndExpr ("or" rights+=AndExpr )*
;
 
AndExpr:
	left=ComparisonExpr ("and" rights+=ComparisonExpr )*
;

ComparisonExpr:
	range=RangeExpr ( (value=VALUECOMP | gen=GENERALCOMP | node=NODECOMP) otherRange=RangeExpr )?
;

RangeExpr:
	from=AdditiveExpr ("to" to=AdditiveExpr )?
;

AdditiveExpr:
	left=MultiplicativeExpr ( ("+" | "-") rights+=MultiplicativeExpr )*
;

MultiplicativeExpr:
	left=UnionExpr ( ("*" | "div" | "idiv" | "mod") rights+=UnionExpr )*
;

UnionExpr:
	left=IntersectExceptExpr ( ("union" | "|") rights+=IntersectExceptExpr )*
;

IntersectExceptExpr:
	left=InstanceofExpr ( ("intersect" | "except") rights+=InstanceofExpr )*
;

InstanceofExpr:
	left=TreatExpr ( "instance" "of" right=SequenceType )?
;

TreatExpr:
	left=CastableExpr ( "treat" "as" right=SequenceType )?
;

CastableExpr:
	left=CastExpr ( "castable" "as" right=SingleType )?
;

CastExpr:
	left=UnaryExpr ( "cast" "as" right=SingleType )?
;

UnaryExpr:
	("-" | "+")* unary=ValueExpr
;

ValueExpr:
	value=PathExpr
;

PathExpr:
	{PathExpr} ("/" singlePath=RelativePathExpr) | ("//" doublePath=RelativePathExpr) | path=RelativePathExpr 
;


RelativePathExpr:
	left=StepExpr (("/" | "//") rights+=StepExpr)*
;

StepExpr:
	filter=FilterExpr | step=AxisStep
;

AxisStep:
	(reverse=ReverseStep | forward=ForwardStep) predicate=PredicateList
;

ForwardStep:
	(forward=FORWARDAXIS test=NodeTest) | abbrForward=AbbrevForwardStep
;

AbbrevForwardStep:
	"@"? test=NodeTest
;

ReverseStep:
	(reverse=REVERSEAXIS test=NodeTest) | abbrRevSet=ABBREVREVERSESTEP
;

NodeTest:
	kindTest=KindTest | nodeTest=NameTest
;

NameTest:
	qName=ID | wildcard=Wildcard
;

Wildcard:
	wild="*"
	| (left=NCName ":" "*")
	| ("*" ":" right=NCName)
;

FilterExpr:
	primary=PrimaryExpr predicate=PredicateList
;

PredicateList:
	{PredicateList} predicates+=Predicate*
;

Predicate:
	"[" expr=Expr "]"
;

PrimaryExpr:
	literal=Literal 
	| varRef=VarRef 
	| parExpr=ParenthesizedExpr 
	| conItemExpr=CONTEXTITEMEXPR 
	| functionCall=FunctionCall
;

Literal:
	num=NumericLiteral | string=STRINGLITERAL
;

NumericLiteral:
	intLit=INTLITERAL
	| decLit=DECIMALLITERAL 
	| doubleLit=DOUBLELITERAL
;

VarRef:
	"$" VarName
;

VarName:
  qName=ID	
; 

ParenthesizedExpr:
	{ParenthesizedExpr} "(" expr=Expr? ")"
;

FunctionCall:
	qName=ID "(" (expr=ExprSingle ("," exprs+=ExprSingle)*)? ")"
;

SingleType:
	AtomicType "?"?
;

SequenceType:
	empty=EMPTYSEQUENCETYPE
	| (itemType=ItemType occInd=OccurenceIndicator)
;

OccurenceIndicator:
	"?" | "*" | "+"
;

ItemType:
	kindTest=KindTest | empty=EMPTYITEMTYPE | atomicType=AtomicType
;
	
AtomicType:
	type=ID
;

KindTest:
	docTest=DocumentTest
	| elemTest=ElementTest
	| attributeTest=AttributeTest
	| schemaElemTest=SchemaElementTest
	| schemaAttributeTest=SchemaAttributeTest
	| pitTest=PITest
	| commentTest=COMMENTTEST
	| textTest=TEXTTEST
	| anyKindTest=ANYKINDTEST
;

DocumentTest:
	{DocumentTest} "document-node" "(" (elemTest=ElementTest | schemaElemTest=SchemaElementTest)? ")"
;

PITest:
	{PITTest} "processing-instruction" "(" (ncName=NCName | string=STRINGLITERAL)? ")"
;

AttributeTest:
	{AttributeTest} "attribute" "(" (attrOrWild=AttribNameOrWildcard ("," typeName=TypeName)?)? ")"
;

AttribNameOrWildcard:
	attName=AttributeName | {AttribNameOrWildcard} "*"
;

SchemaAttributeTest:
	"schema-attribute" "(" attDec=AttributeDeclaration ")"
;

AttributeDeclaration:
	attName=AttributeName
;

ElementTest:
	{ElementTest} "element" "(" (elemOrWild=ElementNameOrWildcard ("," typeName=TypeName "?"?)?)? ")"
;

ElementNameOrWildcard:
	elemName = ElementName | {ElementNameOrWildcard} "*"
;

SchemaElementTest:
	"schema-element" "(" elemDec=ElementDeclaration ")"
;

ElementDeclaration:
	ElementName
;

AttributeName:
	qName = ID
;

ElementName:
	qName=ID
;

TypeName:
	qName=ID
;

NCName:
	ncName=ID
;
	
terminal ABBREVREVERSESTEP:
	".."
;

terminal CONTEXTITEMEXPR:
	"."
;

terminal ANYKINDTEST:
	"node" "(" ")"
;

terminal TEXTTEST:
	"text" "(" ")"
;

terminal COMMENTTEST:
	"comment" "(" ")"
;

terminal EMPTYITEMTYPE:
	"item" "(" ")"
;

terminal EMPTYSEQUENCETYPE:
	"empty-sequence" "(" ")"
;

terminal REVERSEAXIS:
	("parent" "::")
	| ("ancestor" "::")
	| ("preceding-sibling" "::")
	| ("preceding" "::")
	| ("ancestor-or-self" "::")
;
	
terminal FORWARDAXIS:
	("child" "::")
	| ("descendant" "::")
	| ("attribute" "::")
	| ("self" "::")
	| ("descendant-or-self" "::")
	| ("following-sibling" "::")
	| ("following" "::")
	| ("namespace" "::")	
;
	
terminal NODECOMP:
	"is" | "<<" | ">>"
;	
	
terminal VALUECOMP:
	"eq" | "ne" | "lt" | "le" | "gt" | "ge"
;

terminal GENERALCOMP :
   "=" | "!=" | "<" | "<=" | ">" | ">="
;	

terminal ID :
	'^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;
	
terminal INTLITERAL returns ecore::EInt:
	('0'..'9')+
;

terminal DECIMALLITERAL: 
	('.' INTLITERAL) | (INTLITERAL '.' INTLITERAL)
;
	
terminal DOUBLELITERAL:
	(("." INTLITERAL) | (INTLITERAL ("." ('0'..'9')*)?)) ('e'|'E') ('+'|'-')? INTLITERAL
;

terminal STRINGLITERAL :
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	"'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
;

terminal WS :
(' '|'\t'|'\r'|'\n')+;

