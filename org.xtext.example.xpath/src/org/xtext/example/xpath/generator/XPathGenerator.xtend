/*
 * generated by Xtext
 */
package org.xtext.example.xpath.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.example.xpath.xPath.*
import org.eclipse.emf.ecore.EObject;

import java.lang.StringBuilder

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class XPathGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val sb = new StringBuilder() 
		for (e: resource.allContents.toIterable.filter(ValueExpr)){
			val compiled = 
			'''def xpath(elem: Elem): IndexedSeq[Elem] = {
				  val documentElem = Elem(QName("documentNode"))
                  val totalElem = documentElem.withChildren(Vector(elem))
			      «e.compile»
			   }
			'''
			sb.append(compiled)
		}
		fsa.generateFile("generation.scala", sb)
	}
	
	def dispatch compile(ValueExpr ve) {
		'''«ve.value.compile»'''
	}
	
	def dispatch compile(RelSingle rs) {
		'''totalElem.filterChildElems(«rs.relPathExpr.step.compile»)
		«IF rs.relPathExpr.extraSteps != null»
		«FOR extra: rs.relPathExpr.extraSteps»
		«extra.compile»
		«ENDFOR»
		«ENDIF»
		'''
	}
	
	def dispatch compile(RelDouble rd) {
		'''totalElem.filterElemsOrSelf(«rd.relPathExpr.step.compile»)
		«IF rd.relPathExpr.extraSteps != null»
		«FOR extra: rd.relPathExpr.extraSteps»
		«extra.compile»
		«ENDFOR»
		«ENDIF»
		'''
	}
	
	def dispatch compile(Single s) {
		'''.flatMap {  _.filterChildElems(«s.step.compile») }'''
	}
	
	def dispatch compile(Double d) {
		'''.flatMap { _.filterElemsOrSelf(«d.step.compile») }'''
	}
	
	def dispatch compile(AxisStep axs) {
		'''«axs.step.compile»«axs.predicateList.compile»'''
	}
	
	def dispatch compile(ForwardStep fs) {
		'''«IF fs.forward != null»«fs.forward»«fs.test.compile»«ENDIF»«IF fs.abbrForward != null»«fs.abbrForward.compile»«ENDIF»'''
	}
	
	def dispatch compile(AbbrevForwardStep afs) {
		'''«IF afs.attr != null»«afs.attr»«ENDIF»«afs.test.compile»'''
	}
	
	def dispatch compile(NodeTest not) {
		'''«not.test.compile»'''
	}
	
	def dispatch compile(NameTest nat) {
		'''«IF nat.QName != null»«nat.QName.compile»«ENDIF»«IF nat.wildcard != null»«nat.wildcard.compile»«ENDIF»'''
	}
	
	def dispatch compile(FilterExpr f) {
		'''«f.primary.compile»«f.predicateList.compile»'''
	}
	
	def dispatch compile(PrimaryExpr pe) {
		'''«IF pe.literal != null»«pe.literal.compile»«ENDIF»'''
	}
	
	def dispatch compile(Literal l) {
		'''«IF l.num != null»«l.num»«ENDIF»«IF l.string != null»«l.string»«ENDIF»'''
	}
	
	def dispatch compile(UnprefixedName un) {
		'''EName("«un.localPart.ncName»")'''
	}
	
	def dispatch compile(EObject o) {
	}
	
}
