/*
* generated by Xtext
*/
grammar InternalXPath;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.xpath.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.xpath.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.xpath.services.XPathGrammarAccess;

}

@parser::members {
 
 	private XPathGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(XPathGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getGroup()); }
(rule__Expr__Group__0)
{ after(grammarAccess.getExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprSingle
entryRuleExprSingle 
:
{ before(grammarAccess.getExprSingleRule()); }
	 ruleExprSingle
{ after(grammarAccess.getExprSingleRule()); } 
	 EOF 
;

// Rule ExprSingle
ruleExprSingle
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprSingleAccess().getAlternatives()); }
(rule__ExprSingle__Alternatives)
{ after(grammarAccess.getExprSingleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForExpr
entryRuleForExpr 
:
{ before(grammarAccess.getForExprRule()); }
	 ruleForExpr
{ after(grammarAccess.getForExprRule()); } 
	 EOF 
;

// Rule ForExpr
ruleForExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForExprAccess().getGroup()); }
(rule__ForExpr__Group__0)
{ after(grammarAccess.getForExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleForClause
entryRuleSimpleForClause 
:
{ before(grammarAccess.getSimpleForClauseRule()); }
	 ruleSimpleForClause
{ after(grammarAccess.getSimpleForClauseRule()); } 
	 EOF 
;

// Rule SimpleForClause
ruleSimpleForClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleForClauseAccess().getGroup()); }
(rule__SimpleForClause__Group__0)
{ after(grammarAccess.getSimpleForClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditionalIn
entryRuleAdditionalIn 
:
{ before(grammarAccess.getAdditionalInRule()); }
	 ruleAdditionalIn
{ after(grammarAccess.getAdditionalInRule()); } 
	 EOF 
;

// Rule AdditionalIn
ruleAdditionalIn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionalInAccess().getGroup()); }
(rule__AdditionalIn__Group__0)
{ after(grammarAccess.getAdditionalInAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifiedExpr
entryRuleQuantifiedExpr 
:
{ before(grammarAccess.getQuantifiedExprRule()); }
	 ruleQuantifiedExpr
{ after(grammarAccess.getQuantifiedExprRule()); } 
	 EOF 
;

// Rule QuantifiedExpr
ruleQuantifiedExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifiedExprAccess().getGroup()); }
(rule__QuantifiedExpr__Group__0)
{ after(grammarAccess.getQuantifiedExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpr
entryRuleIfExpr 
:
{ before(grammarAccess.getIfExprRule()); }
	 ruleIfExpr
{ after(grammarAccess.getIfExprRule()); } 
	 EOF 
;

// Rule IfExpr
ruleIfExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExprAccess().getGroup()); }
(rule__IfExpr__Group__0)
{ after(grammarAccess.getIfExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpr
entryRuleOrExpr 
:
{ before(grammarAccess.getOrExprRule()); }
	 ruleOrExpr
{ after(grammarAccess.getOrExprRule()); } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExprAccess().getGroup()); }
(rule__OrExpr__Group__0)
{ after(grammarAccess.getOrExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpr
entryRuleAndExpr 
:
{ before(grammarAccess.getAndExprRule()); }
	 ruleAndExpr
{ after(grammarAccess.getAndExprRule()); } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExprAccess().getGroup()); }
(rule__AndExpr__Group__0)
{ after(grammarAccess.getAndExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpr
entryRuleComparisonExpr 
:
{ before(grammarAccess.getComparisonExprRule()); }
	 ruleComparisonExpr
{ after(grammarAccess.getComparisonExprRule()); } 
	 EOF 
;

// Rule ComparisonExpr
ruleComparisonExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExprAccess().getGroup()); }
(rule__ComparisonExpr__Group__0)
{ after(grammarAccess.getComparisonExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeExpr
entryRuleRangeExpr 
:
{ before(grammarAccess.getRangeExprRule()); }
	 ruleRangeExpr
{ after(grammarAccess.getRangeExprRule()); } 
	 EOF 
;

// Rule RangeExpr
ruleRangeExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeExprAccess().getGroup()); }
(rule__RangeExpr__Group__0)
{ after(grammarAccess.getRangeExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpr
entryRuleAdditiveExpr 
:
{ before(grammarAccess.getAdditiveExprRule()); }
	 ruleAdditiveExpr
{ after(grammarAccess.getAdditiveExprRule()); } 
	 EOF 
;

// Rule AdditiveExpr
ruleAdditiveExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExprAccess().getGroup()); }
(rule__AdditiveExpr__Group__0)
{ after(grammarAccess.getAdditiveExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpr
entryRuleMultiplicativeExpr 
:
{ before(grammarAccess.getMultiplicativeExprRule()); }
	 ruleMultiplicativeExpr
{ after(grammarAccess.getMultiplicativeExprRule()); } 
	 EOF 
;

// Rule MultiplicativeExpr
ruleMultiplicativeExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getGroup()); }
(rule__MultiplicativeExpr__Group__0)
{ after(grammarAccess.getMultiplicativeExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnionExpr
entryRuleUnionExpr 
:
{ before(grammarAccess.getUnionExprRule()); }
	 ruleUnionExpr
{ after(grammarAccess.getUnionExprRule()); } 
	 EOF 
;

// Rule UnionExpr
ruleUnionExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnionExprAccess().getGroup()); }
(rule__UnionExpr__Group__0)
{ after(grammarAccess.getUnionExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntersectExceptExpr
entryRuleIntersectExceptExpr 
:
{ before(grammarAccess.getIntersectExceptExprRule()); }
	 ruleIntersectExceptExpr
{ after(grammarAccess.getIntersectExceptExprRule()); } 
	 EOF 
;

// Rule IntersectExceptExpr
ruleIntersectExceptExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getGroup()); }
(rule__IntersectExceptExpr__Group__0)
{ after(grammarAccess.getIntersectExceptExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstanceofExpr
entryRuleInstanceofExpr 
:
{ before(grammarAccess.getInstanceofExprRule()); }
	 ruleInstanceofExpr
{ after(grammarAccess.getInstanceofExprRule()); } 
	 EOF 
;

// Rule InstanceofExpr
ruleInstanceofExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceofExprAccess().getGroup()); }
(rule__InstanceofExpr__Group__0)
{ after(grammarAccess.getInstanceofExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTreatExpr
entryRuleTreatExpr 
:
{ before(grammarAccess.getTreatExprRule()); }
	 ruleTreatExpr
{ after(grammarAccess.getTreatExprRule()); } 
	 EOF 
;

// Rule TreatExpr
ruleTreatExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTreatExprAccess().getGroup()); }
(rule__TreatExpr__Group__0)
{ after(grammarAccess.getTreatExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastableExpr
entryRuleCastableExpr 
:
{ before(grammarAccess.getCastableExprRule()); }
	 ruleCastableExpr
{ after(grammarAccess.getCastableExprRule()); } 
	 EOF 
;

// Rule CastableExpr
ruleCastableExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastableExprAccess().getGroup()); }
(rule__CastableExpr__Group__0)
{ after(grammarAccess.getCastableExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastExpr
entryRuleCastExpr 
:
{ before(grammarAccess.getCastExprRule()); }
	 ruleCastExpr
{ after(grammarAccess.getCastExprRule()); } 
	 EOF 
;

// Rule CastExpr
ruleCastExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastExprAccess().getGroup()); }
(rule__CastExpr__Group__0)
{ after(grammarAccess.getCastExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr 
:
{ before(grammarAccess.getUnaryExprRule()); }
	 ruleUnaryExpr
{ after(grammarAccess.getUnaryExprRule()); } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExprAccess().getGroup()); }
(rule__UnaryExpr__Group__0)
{ after(grammarAccess.getUnaryExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpr
entryRuleValueExpr 
:
{ before(grammarAccess.getValueExprRule()); }
	 ruleValueExpr
{ after(grammarAccess.getValueExprRule()); } 
	 EOF 
;

// Rule ValueExpr
ruleValueExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueExprAccess().getValueAssignment()); }
(rule__ValueExpr__ValueAssignment)
{ after(grammarAccess.getValueExprAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePathExpr
entryRulePathExpr 
:
{ before(grammarAccess.getPathExprRule()); }
	 rulePathExpr
{ after(grammarAccess.getPathExprRule()); } 
	 EOF 
;

// Rule PathExpr
rulePathExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPathExprAccess().getAlternatives()); }
(rule__PathExpr__Alternatives)
{ after(grammarAccess.getPathExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelativePathExpr
entryRuleRelativePathExpr 
:
{ before(grammarAccess.getRelativePathExprRule()); }
	 ruleRelativePathExpr
{ after(grammarAccess.getRelativePathExprRule()); } 
	 EOF 
;

// Rule RelativePathExpr
ruleRelativePathExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelativePathExprAccess().getGroup()); }
(rule__RelativePathExpr__Group__0)
{ after(grammarAccess.getRelativePathExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExtraStepExpr
entryRuleExtraStepExpr 
:
{ before(grammarAccess.getExtraStepExprRule()); }
	 ruleExtraStepExpr
{ after(grammarAccess.getExtraStepExprRule()); } 
	 EOF 
;

// Rule ExtraStepExpr
ruleExtraStepExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtraStepExprAccess().getAlternatives()); }
(rule__ExtraStepExpr__Alternatives)
{ after(grammarAccess.getExtraStepExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStepExpr
entryRuleStepExpr 
:
{ before(grammarAccess.getStepExprRule()); }
	 ruleStepExpr
{ after(grammarAccess.getStepExprRule()); } 
	 EOF 
;

// Rule StepExpr
ruleStepExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepExprAccess().getAlternatives()); }
(rule__StepExpr__Alternatives)
{ after(grammarAccess.getStepExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAxisStep
entryRuleAxisStep 
:
{ before(grammarAccess.getAxisStepRule()); }
	 ruleAxisStep
{ after(grammarAccess.getAxisStepRule()); } 
	 EOF 
;

// Rule AxisStep
ruleAxisStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAxisStepAccess().getGroup()); }
(rule__AxisStep__Group__0)
{ after(grammarAccess.getAxisStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForwardStep
entryRuleForwardStep 
:
{ before(grammarAccess.getForwardStepRule()); }
	 ruleForwardStep
{ after(grammarAccess.getForwardStepRule()); } 
	 EOF 
;

// Rule ForwardStep
ruleForwardStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForwardStepAccess().getAlternatives()); }
(rule__ForwardStep__Alternatives)
{ after(grammarAccess.getForwardStepAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbbrevForwardStep
entryRuleAbbrevForwardStep 
:
{ before(grammarAccess.getAbbrevForwardStepRule()); }
	 ruleAbbrevForwardStep
{ after(grammarAccess.getAbbrevForwardStepRule()); } 
	 EOF 
;

// Rule AbbrevForwardStep
ruleAbbrevForwardStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getGroup()); }
(rule__AbbrevForwardStep__Group__0)
{ after(grammarAccess.getAbbrevForwardStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReverseStep
entryRuleReverseStep 
:
{ before(grammarAccess.getReverseStepRule()); }
	 ruleReverseStep
{ after(grammarAccess.getReverseStepRule()); } 
	 EOF 
;

// Rule ReverseStep
ruleReverseStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReverseStepAccess().getAlternatives()); }
(rule__ReverseStep__Alternatives)
{ after(grammarAccess.getReverseStepAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeTest
entryRuleNodeTest 
:
{ before(grammarAccess.getNodeTestRule()); }
	 ruleNodeTest
{ after(grammarAccess.getNodeTestRule()); } 
	 EOF 
;

// Rule NodeTest
ruleNodeTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeTestAccess().getAlternatives()); }
(rule__NodeTest__Alternatives)
{ after(grammarAccess.getNodeTestAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNameTest
entryRuleNameTest 
:
{ before(grammarAccess.getNameTestRule()); }
	 ruleNameTest
{ after(grammarAccess.getNameTestRule()); } 
	 EOF 
;

// Rule NameTest
ruleNameTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameTestAccess().getAlternatives()); }
(rule__NameTest__Alternatives)
{ after(grammarAccess.getNameTestAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWildcard
entryRuleWildcard 
:
{ before(grammarAccess.getWildcardRule()); }
	 ruleWildcard
{ after(grammarAccess.getWildcardRule()); } 
	 EOF 
;

// Rule Wildcard
ruleWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWildcardAccess().getAlternatives()); }
(rule__Wildcard__Alternatives)
{ after(grammarAccess.getWildcardAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFilterExpr
entryRuleFilterExpr 
:
{ before(grammarAccess.getFilterExprRule()); }
	 ruleFilterExpr
{ after(grammarAccess.getFilterExprRule()); } 
	 EOF 
;

// Rule FilterExpr
ruleFilterExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFilterExprAccess().getGroup()); }
(rule__FilterExpr__Group__0)
{ after(grammarAccess.getFilterExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePredicateList
entryRulePredicateList 
:
{ before(grammarAccess.getPredicateListRule()); }
	 rulePredicateList
{ after(grammarAccess.getPredicateListRule()); } 
	 EOF 
;

// Rule PredicateList
rulePredicateList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateListAccess().getGroup()); }
(rule__PredicateList__Group__0)
{ after(grammarAccess.getPredicateListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePredicate
entryRulePredicate 
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateAccess().getGroup()); }
(rule__Predicate__Group__0)
{ after(grammarAccess.getPredicateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr 
:
{ before(grammarAccess.getPrimaryExprRule()); }
	 rulePrimaryExpr
{ after(grammarAccess.getPrimaryExprRule()); } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
(rule__PrimaryExpr__Alternatives)
{ after(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral 
:
{ before(grammarAccess.getNumericLiteralRule()); }
	 ruleNumericLiteral
{ after(grammarAccess.getNumericLiteralRule()); } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
(rule__NumericLiteral__Alternatives)
{ after(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarRef
entryRuleVarRef 
:
{ before(grammarAccess.getVarRefRule()); }
	 ruleVarRef
{ after(grammarAccess.getVarRefRule()); } 
	 EOF 
;

// Rule VarRef
ruleVarRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarRefAccess().getGroup()); }
(rule__VarRef__Group__0)
{ after(grammarAccess.getVarRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarName
entryRuleVarName 
:
{ before(grammarAccess.getVarNameRule()); }
	 ruleVarName
{ after(grammarAccess.getVarNameRule()); } 
	 EOF 
;

// Rule VarName
ruleVarName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarNameAccess().getQNameAssignment()); }
(rule__VarName__QNameAssignment)
{ after(grammarAccess.getVarNameAccess().getQNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpr
entryRuleParenthesizedExpr 
:
{ before(grammarAccess.getParenthesizedExprRule()); }
	 ruleParenthesizedExpr
{ after(grammarAccess.getParenthesizedExprRule()); } 
	 EOF 
;

// Rule ParenthesizedExpr
ruleParenthesizedExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExprAccess().getGroup()); }
(rule__ParenthesizedExpr__Group__0)
{ after(grammarAccess.getParenthesizedExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleType
entryRuleSingleType 
:
{ before(grammarAccess.getSingleTypeRule()); }
	 ruleSingleType
{ after(grammarAccess.getSingleTypeRule()); } 
	 EOF 
;

// Rule SingleType
ruleSingleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleTypeAccess().getGroup()); }
(rule__SingleType__Group__0)
{ after(grammarAccess.getSingleTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequenceType
entryRuleSequenceType 
:
{ before(grammarAccess.getSequenceTypeRule()); }
	 ruleSequenceType
{ after(grammarAccess.getSequenceTypeRule()); } 
	 EOF 
;

// Rule SequenceType
ruleSequenceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceTypeAccess().getAlternatives()); }
(rule__SequenceType__Alternatives)
{ after(grammarAccess.getSequenceTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOccurenceIndicator
entryRuleOccurenceIndicator 
:
{ before(grammarAccess.getOccurenceIndicatorRule()); }
	 ruleOccurenceIndicator
{ after(grammarAccess.getOccurenceIndicatorRule()); } 
	 EOF 
;

// Rule OccurenceIndicator
ruleOccurenceIndicator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOccurenceIndicatorAccess().getAlternatives()); }
(rule__OccurenceIndicator__Alternatives)
{ after(grammarAccess.getOccurenceIndicatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleItemType
entryRuleItemType 
:
{ before(grammarAccess.getItemTypeRule()); }
	 ruleItemType
{ after(grammarAccess.getItemTypeRule()); } 
	 EOF 
;

// Rule ItemType
ruleItemType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getItemTypeAccess().getAlternatives()); }
(rule__ItemType__Alternatives)
{ after(grammarAccess.getItemTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicType
entryRuleAtomicType 
:
{ before(grammarAccess.getAtomicTypeRule()); }
	 ruleAtomicType
{ after(grammarAccess.getAtomicTypeRule()); } 
	 EOF 
;

// Rule AtomicType
ruleAtomicType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicTypeAccess().getTypeAssignment()); }
(rule__AtomicType__TypeAssignment)
{ after(grammarAccess.getAtomicTypeAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKindTest
entryRuleKindTest 
:
{ before(grammarAccess.getKindTestRule()); }
	 ruleKindTest
{ after(grammarAccess.getKindTestRule()); } 
	 EOF 
;

// Rule KindTest
ruleKindTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKindTestAccess().getAlternatives()); }
(rule__KindTest__Alternatives)
{ after(grammarAccess.getKindTestAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDocumentTest
entryRuleDocumentTest 
:
{ before(grammarAccess.getDocumentTestRule()); }
	 ruleDocumentTest
{ after(grammarAccess.getDocumentTestRule()); } 
	 EOF 
;

// Rule DocumentTest
ruleDocumentTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDocumentTestAccess().getGroup()); }
(rule__DocumentTest__Group__0)
{ after(grammarAccess.getDocumentTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePITest
entryRulePITest 
:
{ before(grammarAccess.getPITestRule()); }
	 rulePITest
{ after(grammarAccess.getPITestRule()); } 
	 EOF 
;

// Rule PITest
rulePITest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPITestAccess().getGroup()); }
(rule__PITest__Group__0)
{ after(grammarAccess.getPITestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeTest
entryRuleAttributeTest 
:
{ before(grammarAccess.getAttributeTestRule()); }
	 ruleAttributeTest
{ after(grammarAccess.getAttributeTestRule()); } 
	 EOF 
;

// Rule AttributeTest
ruleAttributeTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeTestAccess().getGroup()); }
(rule__AttributeTest__Group__0)
{ after(grammarAccess.getAttributeTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribNameOrWildcard
entryRuleAttribNameOrWildcard 
:
{ before(grammarAccess.getAttribNameOrWildcardRule()); }
	 ruleAttribNameOrWildcard
{ after(grammarAccess.getAttribNameOrWildcardRule()); } 
	 EOF 
;

// Rule AttribNameOrWildcard
ruleAttribNameOrWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getAlternatives()); }
(rule__AttribNameOrWildcard__Alternatives)
{ after(grammarAccess.getAttribNameOrWildcardAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemaAttributeTest
entryRuleSchemaAttributeTest 
:
{ before(grammarAccess.getSchemaAttributeTestRule()); }
	 ruleSchemaAttributeTest
{ after(grammarAccess.getSchemaAttributeTestRule()); } 
	 EOF 
;

// Rule SchemaAttributeTest
ruleSchemaAttributeTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getGroup()); }
(rule__SchemaAttributeTest__Group__0)
{ after(grammarAccess.getSchemaAttributeTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration 
:
{ before(grammarAccess.getAttributeDeclarationRule()); }
	 ruleAttributeDeclaration
{ after(grammarAccess.getAttributeDeclarationRule()); } 
	 EOF 
;

// Rule AttributeDeclaration
ruleAttributeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getAttNameAssignment()); }
(rule__AttributeDeclaration__AttNameAssignment)
{ after(grammarAccess.getAttributeDeclarationAccess().getAttNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementTest
entryRuleElementTest 
:
{ before(grammarAccess.getElementTestRule()); }
	 ruleElementTest
{ after(grammarAccess.getElementTestRule()); } 
	 EOF 
;

// Rule ElementTest
ruleElementTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementTestAccess().getGroup()); }
(rule__ElementTest__Group__0)
{ after(grammarAccess.getElementTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementNameOrWildcard
entryRuleElementNameOrWildcard 
:
{ before(grammarAccess.getElementNameOrWildcardRule()); }
	 ruleElementNameOrWildcard
{ after(grammarAccess.getElementNameOrWildcardRule()); } 
	 EOF 
;

// Rule ElementNameOrWildcard
ruleElementNameOrWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getAlternatives()); }
(rule__ElementNameOrWildcard__Alternatives)
{ after(grammarAccess.getElementNameOrWildcardAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemaElementTest
entryRuleSchemaElementTest 
:
{ before(grammarAccess.getSchemaElementTestRule()); }
	 ruleSchemaElementTest
{ after(grammarAccess.getSchemaElementTestRule()); } 
	 EOF 
;

// Rule SchemaElementTest
ruleSchemaElementTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemaElementTestAccess().getGroup()); }
(rule__SchemaElementTest__Group__0)
{ after(grammarAccess.getSchemaElementTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementDeclaration
entryRuleElementDeclaration 
:
{ before(grammarAccess.getElementDeclarationRule()); }
	 ruleElementDeclaration
{ after(grammarAccess.getElementDeclarationRule()); } 
	 EOF 
;

// Rule ElementDeclaration
ruleElementDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementDeclarationAccess().getElementNameParserRuleCall()); }
	ruleElementName
{ after(grammarAccess.getElementDeclarationAccess().getElementNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeName
entryRuleAttributeName 
:
{ before(grammarAccess.getAttributeNameRule()); }
	 ruleAttributeName
{ after(grammarAccess.getAttributeNameRule()); } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeNameAccess().getQNameAssignment()); }
(rule__AttributeName__QNameAssignment)
{ after(grammarAccess.getAttributeNameAccess().getQNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementName
entryRuleElementName 
:
{ before(grammarAccess.getElementNameRule()); }
	 ruleElementName
{ after(grammarAccess.getElementNameRule()); } 
	 EOF 
;

// Rule ElementName
ruleElementName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementNameAccess().getQNameAssignment()); }
(rule__ElementName__QNameAssignment)
{ after(grammarAccess.getElementNameAccess().getQNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeName
entryRuleTypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeNameAccess().getQNameAssignment()); }
(rule__TypeName__QNameAssignment)
{ after(grammarAccess.getTypeNameAccess().getQNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNCName
entryRuleNCName 
:
{ before(grammarAccess.getNCNameRule()); }
	 ruleNCName
{ after(grammarAccess.getNCNameRule()); } 
	 EOF 
;

// Rule NCName
ruleNCName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNCNameAccess().getNcNameAssignment()); }
(rule__NCName__NcNameAssignment)
{ after(grammarAccess.getNCNameAccess().getNcNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQName
entryRuleQName 
:
{ before(grammarAccess.getQNameRule()); }
	 ruleQName
{ after(grammarAccess.getQNameRule()); } 
	 EOF 
;

// Rule QName
ruleQName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQNameAccess().getAlternatives()); }
(rule__QName__Alternatives)
{ after(grammarAccess.getQNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefixedName
entryRulePrefixedName 
:
{ before(grammarAccess.getPrefixedNameRule()); }
	 rulePrefixedName
{ after(grammarAccess.getPrefixedNameRule()); } 
	 EOF 
;

// Rule PrefixedName
rulePrefixedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixedNameAccess().getGroup()); }
(rule__PrefixedName__Group__0)
{ after(grammarAccess.getPrefixedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnprefixedName
entryRuleUnprefixedName 
:
{ before(grammarAccess.getUnprefixedNameRule()); }
	 ruleUnprefixedName
{ after(grammarAccess.getUnprefixedNameRule()); } 
	 EOF 
;

// Rule UnprefixedName
ruleUnprefixedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnprefixedNameAccess().getLocalPartAssignment()); }
(rule__UnprefixedName__LocalPartAssignment)
{ after(grammarAccess.getUnprefixedNameAccess().getLocalPartAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ExprSingle__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSingleAccess().getForExprParserRuleCall_0()); }
	ruleForExpr
{ after(grammarAccess.getExprSingleAccess().getForExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExprSingleAccess().getQuantifiedExprParserRuleCall_1()); }
	ruleQuantifiedExpr
{ after(grammarAccess.getExprSingleAccess().getQuantifiedExprParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExprSingleAccess().getIfExprParserRuleCall_2()); }
	ruleIfExpr
{ after(grammarAccess.getExprSingleAccess().getIfExprParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExprSingleAccess().getOrExprParserRuleCall_3()); }
	ruleOrExpr
{ after(grammarAccess.getExprSingleAccess().getOrExprParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getSomeKeyword_0_0()); }

	'some' 

{ after(grammarAccess.getQuantifiedExprAccess().getSomeKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedExprAccess().getEveryKeyword_0_1()); }

	'every' 

{ after(grammarAccess.getQuantifiedExprAccess().getEveryKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getValueAssignment_1_0_0()); }
(rule__ComparisonExpr__ValueAssignment_1_0_0)
{ after(grammarAccess.getComparisonExprAccess().getValueAssignment_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonExprAccess().getGenAssignment_1_0_1()); }
(rule__ComparisonExpr__GenAssignment_1_0_1)
{ after(grammarAccess.getComparisonExprAccess().getGenAssignment_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonExprAccess().getNodeAssignment_1_0_2()); }
(rule__ComparisonExpr__NodeAssignment_1_0_2)
{ after(grammarAccess.getComparisonExprAccess().getNodeAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getPlusSignKeyword_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExprAccess().getPlusSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExprAccess().getHyphenMinusKeyword_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExprAccess().getHyphenMinusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getAsteriskKeyword_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExprAccess().getAsteriskKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExprAccess().getDivKeyword_1_0_1()); }

	'div' 

{ after(grammarAccess.getMultiplicativeExprAccess().getDivKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExprAccess().getIdivKeyword_1_0_2()); }

	'idiv' 

{ after(grammarAccess.getMultiplicativeExprAccess().getIdivKeyword_1_0_2()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExprAccess().getModKeyword_1_0_3()); }

	'mod' 

{ after(grammarAccess.getMultiplicativeExprAccess().getModKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getUnionKeyword_1_0_0()); }

	'union' 

{ after(grammarAccess.getUnionExprAccess().getUnionKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnionExprAccess().getVerticalLineKeyword_1_0_1()); }

	'|' 

{ after(grammarAccess.getUnionExprAccess().getVerticalLineKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getIntersectKeyword_1_0_0()); }

	'intersect' 

{ after(grammarAccess.getIntersectExceptExprAccess().getIntersectKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getIntersectExceptExprAccess().getExceptKeyword_1_0_1()); }

	'except' 

{ after(grammarAccess.getIntersectExceptExprAccess().getExceptKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryExprAccess().getPlusSignKeyword_0_1()); }

	'+' 

{ after(grammarAccess.getUnaryExprAccess().getPlusSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getGroup_0()); }
(rule__PathExpr__Group_0__0)
{ after(grammarAccess.getPathExprAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPathExprAccess().getGroup_1()); }
(rule__PathExpr__Group_1__0)
{ after(grammarAccess.getPathExprAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPathExprAccess().getGroup_2()); }
(rule__PathExpr__Group_2__0)
{ after(grammarAccess.getPathExprAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraStepExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtraStepExprAccess().getGroup_0()); }
(rule__ExtraStepExpr__Group_0__0)
{ after(grammarAccess.getExtraStepExprAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExtraStepExprAccess().getGroup_1()); }
(rule__ExtraStepExpr__Group_1__0)
{ after(grammarAccess.getExtraStepExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StepExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepExprAccess().getFilterExprParserRuleCall_0()); }
	ruleFilterExpr
{ after(grammarAccess.getStepExprAccess().getFilterExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStepExprAccess().getAxisStepParserRuleCall_1()); }
	ruleAxisStep
{ after(grammarAccess.getStepExprAccess().getAxisStepParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getStepAssignment_0_0()); }
(rule__AxisStep__StepAssignment_0_0)
{ after(grammarAccess.getAxisStepAccess().getStepAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getAxisStepAccess().getStepAssignment_0_1()); }
(rule__AxisStep__StepAssignment_0_1)
{ after(grammarAccess.getAxisStepAccess().getStepAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getGroup_0()); }
(rule__ForwardStep__Group_0__0)
{ after(grammarAccess.getForwardStepAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getForwardStepAccess().getAbbrForwardAssignment_1()); }
(rule__ForwardStep__AbbrForwardAssignment_1)
{ after(grammarAccess.getForwardStepAccess().getAbbrForwardAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getGroup_0()); }
(rule__ReverseStep__Group_0__0)
{ after(grammarAccess.getReverseStepAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getReverseStepAccess().getAbbrRevSetAssignment_1()); }
(rule__ReverseStep__AbbrRevSetAssignment_1)
{ after(grammarAccess.getReverseStepAccess().getAbbrRevSetAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTest__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTestAccess().getTestAssignment_0()); }
(rule__NodeTest__TestAssignment_0)
{ after(grammarAccess.getNodeTestAccess().getTestAssignment_0()); }
)

    |(
{ before(grammarAccess.getNodeTestAccess().getTestAssignment_1()); }
(rule__NodeTest__TestAssignment_1)
{ after(grammarAccess.getNodeTestAccess().getTestAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameTest__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameTestAccess().getQNameAssignment_0()); }
(rule__NameTest__QNameAssignment_0)
{ after(grammarAccess.getNameTestAccess().getQNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getNameTestAccess().getWildcardAssignment_1()); }
(rule__NameTest__WildcardAssignment_1)
{ after(grammarAccess.getNameTestAccess().getWildcardAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getWildAssignment_0()); }
(rule__Wildcard__WildAssignment_0)
{ after(grammarAccess.getWildcardAccess().getWildAssignment_0()); }
)

    |(
{ before(grammarAccess.getWildcardAccess().getGroup_1()); }
(rule__Wildcard__Group_1__0)
{ after(grammarAccess.getWildcardAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getWildcardAccess().getGroup_2()); }
(rule__Wildcard__Group_2__0)
{ after(grammarAccess.getWildcardAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getLiteralAssignment_0()); }
(rule__PrimaryExpr__LiteralAssignment_0)
{ after(grammarAccess.getPrimaryExprAccess().getLiteralAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getVarRefAssignment_1()); }
(rule__PrimaryExpr__VarRefAssignment_1)
{ after(grammarAccess.getPrimaryExprAccess().getVarRefAssignment_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getParExprAssignment_2()); }
(rule__PrimaryExpr__ParExprAssignment_2)
{ after(grammarAccess.getPrimaryExprAccess().getParExprAssignment_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getConItemExprAssignment_3()); }
(rule__PrimaryExpr__ConItemExprAssignment_3)
{ after(grammarAccess.getPrimaryExprAccess().getConItemExprAssignment_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getFunctionCallAssignment_4()); }
(rule__PrimaryExpr__FunctionCallAssignment_4)
{ after(grammarAccess.getPrimaryExprAccess().getFunctionCallAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumAssignment_0()); }
(rule__Literal__NumAssignment_0)
{ after(grammarAccess.getLiteralAccess().getNumAssignment_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringAssignment_1()); }
(rule__Literal__StringAssignment_1)
{ after(grammarAccess.getLiteralAccess().getStringAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericLiteralAccess().getIntLitAssignment_0()); }
(rule__NumericLiteral__IntLitAssignment_0)
{ after(grammarAccess.getNumericLiteralAccess().getIntLitAssignment_0()); }
)

    |(
{ before(grammarAccess.getNumericLiteralAccess().getDecLitAssignment_1()); }
(rule__NumericLiteral__DecLitAssignment_1)
{ after(grammarAccess.getNumericLiteralAccess().getDecLitAssignment_1()); }
)

    |(
{ before(grammarAccess.getNumericLiteralAccess().getDoubleLitAssignment_2()); }
(rule__NumericLiteral__DoubleLitAssignment_2)
{ after(grammarAccess.getNumericLiteralAccess().getDoubleLitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getEmptyAssignment_0()); }
(rule__SequenceType__EmptyAssignment_0)
{ after(grammarAccess.getSequenceTypeAccess().getEmptyAssignment_0()); }
)

    |(
{ before(grammarAccess.getSequenceTypeAccess().getGroup_1()); }
(rule__SequenceType__Group_1__0)
{ after(grammarAccess.getSequenceTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OccurenceIndicator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOccurenceIndicatorAccess().getQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getOccurenceIndicatorAccess().getQuestionMarkKeyword_0()); }
)

    |(
{ before(grammarAccess.getOccurenceIndicatorAccess().getAsteriskKeyword_1()); }

	'*' 

{ after(grammarAccess.getOccurenceIndicatorAccess().getAsteriskKeyword_1()); }
)

    |(
{ before(grammarAccess.getOccurenceIndicatorAccess().getPlusSignKeyword_2()); }

	'+' 

{ after(grammarAccess.getOccurenceIndicatorAccess().getPlusSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getKindTestAssignment_0()); }
(rule__ItemType__KindTestAssignment_0)
{ after(grammarAccess.getItemTypeAccess().getKindTestAssignment_0()); }
)

    |(
{ before(grammarAccess.getItemTypeAccess().getEmptyAssignment_1()); }
(rule__ItemType__EmptyAssignment_1)
{ after(grammarAccess.getItemTypeAccess().getEmptyAssignment_1()); }
)

    |(
{ before(grammarAccess.getItemTypeAccess().getAtomicTypeAssignment_2()); }
(rule__ItemType__AtomicTypeAssignment_2)
{ after(grammarAccess.getItemTypeAccess().getAtomicTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getDocTestAssignment_0()); }
(rule__KindTest__DocTestAssignment_0)
{ after(grammarAccess.getKindTestAccess().getDocTestAssignment_0()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getElemTestAssignment_1()); }
(rule__KindTest__ElemTestAssignment_1)
{ after(grammarAccess.getKindTestAccess().getElemTestAssignment_1()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getAttributeTestAssignment_2()); }
(rule__KindTest__AttributeTestAssignment_2)
{ after(grammarAccess.getKindTestAccess().getAttributeTestAssignment_2()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getSchemaElemTestAssignment_3()); }
(rule__KindTest__SchemaElemTestAssignment_3)
{ after(grammarAccess.getKindTestAccess().getSchemaElemTestAssignment_3()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getSchemaAttributeTestAssignment_4()); }
(rule__KindTest__SchemaAttributeTestAssignment_4)
{ after(grammarAccess.getKindTestAccess().getSchemaAttributeTestAssignment_4()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getPitTestAssignment_5()); }
(rule__KindTest__PitTestAssignment_5)
{ after(grammarAccess.getKindTestAccess().getPitTestAssignment_5()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getCommentTestAssignment_6()); }
(rule__KindTest__CommentTestAssignment_6)
{ after(grammarAccess.getKindTestAccess().getCommentTestAssignment_6()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getTextTestAssignment_7()); }
(rule__KindTest__TextTestAssignment_7)
{ after(grammarAccess.getKindTestAccess().getTextTestAssignment_7()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getAnyKindTestAssignment_8()); }
(rule__KindTest__AnyKindTestAssignment_8)
{ after(grammarAccess.getKindTestAccess().getAnyKindTestAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getElemTestAssignment_3_0()); }
(rule__DocumentTest__ElemTestAssignment_3_0)
{ after(grammarAccess.getDocumentTestAccess().getElemTestAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getDocumentTestAccess().getSchemaElemTestAssignment_3_1()); }
(rule__DocumentTest__SchemaElemTestAssignment_3_1)
{ after(grammarAccess.getDocumentTestAccess().getSchemaElemTestAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getNcNameAssignment_3_0()); }
(rule__PITest__NcNameAssignment_3_0)
{ after(grammarAccess.getPITestAccess().getNcNameAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getPITestAccess().getStringAssignment_3_1()); }
(rule__PITest__StringAssignment_3_1)
{ after(grammarAccess.getPITestAccess().getStringAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttribNameOrWildcard__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getAttNameAssignment_0()); }
(rule__AttribNameOrWildcard__AttNameAssignment_0)
{ after(grammarAccess.getAttribNameOrWildcardAccess().getAttNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getGroup_1()); }
(rule__AttribNameOrWildcard__Group_1__0)
{ after(grammarAccess.getAttribNameOrWildcardAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementNameOrWildcard__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getElemNameAssignment_0()); }
(rule__ElementNameOrWildcard__ElemNameAssignment_0)
{ after(grammarAccess.getElementNameOrWildcardAccess().getElemNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getElementNameOrWildcardAccess().getGroup_1()); }
(rule__ElementNameOrWildcard__Group_1__0)
{ after(grammarAccess.getElementNameOrWildcardAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getPrefixedNameParserRuleCall_0()); }
	rulePrefixedName
{ after(grammarAccess.getQNameAccess().getPrefixedNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getQNameAccess().getUnprefixedNameParserRuleCall_1()); }
	ruleUnprefixedName
{ after(grammarAccess.getQNameAccess().getUnprefixedNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Expr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group__0__Impl
	rule__Expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExprSingleAssignment_0()); }
(rule__Expr__ExprSingleAssignment_0)
{ after(grammarAccess.getExprAccess().getExprSingleAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getGroup_1()); }
(rule__Expr__Group_1__0)*
{ after(grammarAccess.getExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group_1__0__Impl
	rule__Expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExprAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExprsSingleAssignment_1_1()); }
(rule__Expr__ExprsSingleAssignment_1_1)
{ after(grammarAccess.getExprAccess().getExprsSingleAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForExpr__Group__0__Impl
	rule__ForExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getForAssignment_0()); }
(rule__ForExpr__ForAssignment_0)
{ after(grammarAccess.getForExprAccess().getForAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForExpr__Group__1__Impl
	rule__ForExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getReturnKeyword_1()); }

	'return' 

{ after(grammarAccess.getForExprAccess().getReturnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForExpr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getReturnAssignment_2()); }
(rule__ForExpr__ReturnAssignment_2)
{ after(grammarAccess.getForExprAccess().getReturnAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleForClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__0__Impl
	rule__SimpleForClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getSimpleForClauseAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__1__Impl
	rule__SimpleForClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_1()); }

	'$' 

{ after(grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__2__Impl
	rule__SimpleForClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getForVarAssignment_2()); }
(rule__SimpleForClause__ForVarAssignment_2)
{ after(grammarAccess.getSimpleForClauseAccess().getForVarAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__3__Impl
	rule__SimpleForClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getSimpleForClauseAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__4__Impl
	rule__SimpleForClause__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getInAssignment_4()); }
(rule__SimpleForClause__InAssignment_4)
{ after(grammarAccess.getSimpleForClauseAccess().getInAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getAdditionalInAssignment_5()); }
(rule__SimpleForClause__AdditionalInAssignment_5)*
{ after(grammarAccess.getSimpleForClauseAccess().getAdditionalInAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AdditionalIn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionalIn__Group__0__Impl
	rule__AdditionalIn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalIn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalInAccess().getCommaKeyword_0()); }

	',' 

{ after(grammarAccess.getAdditionalInAccess().getCommaKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionalIn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionalIn__Group__1__Impl
	rule__AdditionalIn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalIn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalInAccess().getDollarSignKeyword_1()); }

	'$' 

{ after(grammarAccess.getAdditionalInAccess().getDollarSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionalIn__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionalIn__Group__2__Impl
	rule__AdditionalIn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalIn__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalInAccess().getVariableAssignment_2()); }
(rule__AdditionalIn__VariableAssignment_2)
{ after(grammarAccess.getAdditionalInAccess().getVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionalIn__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionalIn__Group__3__Impl
	rule__AdditionalIn__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalIn__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalInAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getAdditionalInAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionalIn__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionalIn__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalIn__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalInAccess().getInAssignment_4()); }
(rule__AdditionalIn__InAssignment_4)
{ after(grammarAccess.getAdditionalInAccess().getInAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__QuantifiedExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__0__Impl
	rule__QuantifiedExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getAlternatives_0()); }
(rule__QuantifiedExpr__Alternatives_0)
{ after(grammarAccess.getQuantifiedExprAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__1__Impl
	rule__QuantifiedExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_1()); }

	'$' 

{ after(grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__2__Impl
	rule__QuantifiedExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getVariableAssignment_2()); }
(rule__QuantifiedExpr__VariableAssignment_2)
{ after(grammarAccess.getQuantifiedExprAccess().getVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__3__Impl
	rule__QuantifiedExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getQuantifiedExprAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__4__Impl
	rule__QuantifiedExpr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getInAssignment_4()); }
(rule__QuantifiedExpr__InAssignment_4)
{ after(grammarAccess.getQuantifiedExprAccess().getInAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__5__Impl
	rule__QuantifiedExpr__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getAdditionalInAssignment_5()); }
(rule__QuantifiedExpr__AdditionalInAssignment_5)*
{ after(grammarAccess.getQuantifiedExprAccess().getAdditionalInAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__6__Impl
	rule__QuantifiedExpr__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getSatisfiesKeyword_6()); }

	'satisfies' 

{ after(grammarAccess.getQuantifiedExprAccess().getSatisfiesKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getSatisfyAssignment_7()); }
(rule__QuantifiedExpr__SatisfyAssignment_7)
{ after(grammarAccess.getQuantifiedExprAccess().getSatisfyAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__IfExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__0__Impl
	rule__IfExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfExprAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__1__Impl
	rule__IfExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfExprAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__2__Impl
	rule__IfExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getIfAssignment_2()); }
(rule__IfExpr__IfAssignment_2)
{ after(grammarAccess.getIfExprAccess().getIfAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__3__Impl
	rule__IfExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfExprAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__4__Impl
	rule__IfExpr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getIfExprAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__5__Impl
	rule__IfExpr__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getThenAssignment_5()); }
(rule__IfExpr__ThenAssignment_5)
{ after(grammarAccess.getIfExprAccess().getThenAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__6__Impl
	rule__IfExpr__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseKeyword_6()); }

	'else' 

{ after(grammarAccess.getIfExprAccess().getElseKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseAssignment_7()); }
(rule__IfExpr__ElseAssignment_7)
{ after(grammarAccess.getIfExprAccess().getElseAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__OrExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group__0__Impl
	rule__OrExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getLeftAssignment_0()); }
(rule__OrExpr__LeftAssignment_0)
{ after(grammarAccess.getOrExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getGroup_1()); }
(rule__OrExpr__Group_1__0)*
{ after(grammarAccess.getOrExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group_1__0__Impl
	rule__OrExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getOrKeyword_1_0()); }

	'or' 

{ after(grammarAccess.getOrExprAccess().getOrKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getRightsAssignment_1_1()); }
(rule__OrExpr__RightsAssignment_1_1)
{ after(grammarAccess.getOrExprAccess().getRightsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group__0__Impl
	rule__AndExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getLeftAssignment_0()); }
(rule__AndExpr__LeftAssignment_0)
{ after(grammarAccess.getAndExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getGroup_1()); }
(rule__AndExpr__Group_1__0)*
{ after(grammarAccess.getAndExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group_1__0__Impl
	rule__AndExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getAndKeyword_1_0()); }

	'and' 

{ after(grammarAccess.getAndExprAccess().getAndKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getRightsAssignment_1_1()); }
(rule__AndExpr__RightsAssignment_1_1)
{ after(grammarAccess.getAndExprAccess().getRightsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpr__Group__0__Impl
	rule__ComparisonExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getRangeAssignment_0()); }
(rule__ComparisonExpr__RangeAssignment_0)
{ after(grammarAccess.getComparisonExprAccess().getRangeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getGroup_1()); }
(rule__ComparisonExpr__Group_1__0)?
{ after(grammarAccess.getComparisonExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpr__Group_1__0__Impl
	rule__ComparisonExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getAlternatives_1_0()); }
(rule__ComparisonExpr__Alternatives_1_0)
{ after(grammarAccess.getComparisonExprAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getOtherRangeAssignment_1_1()); }
(rule__ComparisonExpr__OtherRangeAssignment_1_1)
{ after(grammarAccess.getComparisonExprAccess().getOtherRangeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpr__Group__0__Impl
	rule__RangeExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getFromAssignment_0()); }
(rule__RangeExpr__FromAssignment_0)
{ after(grammarAccess.getRangeExprAccess().getFromAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getGroup_1()); }
(rule__RangeExpr__Group_1__0)?
{ after(grammarAccess.getRangeExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpr__Group_1__0__Impl
	rule__RangeExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getToKeyword_1_0()); }

	'to' 

{ after(grammarAccess.getRangeExprAccess().getToKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getToAssignment_1_1()); }
(rule__RangeExpr__ToAssignment_1_1)
{ after(grammarAccess.getRangeExprAccess().getToAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpr__Group__0__Impl
	rule__AdditiveExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getLeftAssignment_0()); }
(rule__AdditiveExpr__LeftAssignment_0)
{ after(grammarAccess.getAdditiveExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getGroup_1()); }
(rule__AdditiveExpr__Group_1__0)*
{ after(grammarAccess.getAdditiveExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpr__Group_1__0__Impl
	rule__AdditiveExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getAlternatives_1_0()); }
(rule__AdditiveExpr__Alternatives_1_0)
{ after(grammarAccess.getAdditiveExprAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getRightsAssignment_1_1()); }
(rule__AdditiveExpr__RightsAssignment_1_1)
{ after(grammarAccess.getAdditiveExprAccess().getRightsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpr__Group__0__Impl
	rule__MultiplicativeExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getLeftAssignment_0()); }
(rule__MultiplicativeExpr__LeftAssignment_0)
{ after(grammarAccess.getMultiplicativeExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getGroup_1()); }
(rule__MultiplicativeExpr__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpr__Group_1__0__Impl
	rule__MultiplicativeExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getAlternatives_1_0()); }
(rule__MultiplicativeExpr__Alternatives_1_0)
{ after(grammarAccess.getMultiplicativeExprAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getRightsAssignment_1_1()); }
(rule__MultiplicativeExpr__RightsAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExprAccess().getRightsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnionExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionExpr__Group__0__Impl
	rule__UnionExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getLeftAssignment_0()); }
(rule__UnionExpr__LeftAssignment_0)
{ after(grammarAccess.getUnionExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getGroup_1()); }
(rule__UnionExpr__Group_1__0)*
{ after(grammarAccess.getUnionExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnionExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionExpr__Group_1__0__Impl
	rule__UnionExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getAlternatives_1_0()); }
(rule__UnionExpr__Alternatives_1_0)
{ after(grammarAccess.getUnionExprAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getRightsAssignment_1_1()); }
(rule__UnionExpr__RightsAssignment_1_1)
{ after(grammarAccess.getUnionExprAccess().getRightsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntersectExceptExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntersectExceptExpr__Group__0__Impl
	rule__IntersectExceptExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getLeftAssignment_0()); }
(rule__IntersectExceptExpr__LeftAssignment_0)
{ after(grammarAccess.getIntersectExceptExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntersectExceptExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntersectExceptExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getGroup_1()); }
(rule__IntersectExceptExpr__Group_1__0)*
{ after(grammarAccess.getIntersectExceptExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntersectExceptExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntersectExceptExpr__Group_1__0__Impl
	rule__IntersectExceptExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getAlternatives_1_0()); }
(rule__IntersectExceptExpr__Alternatives_1_0)
{ after(grammarAccess.getIntersectExceptExprAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntersectExceptExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntersectExceptExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getRightsAssignment_1_1()); }
(rule__IntersectExceptExpr__RightsAssignment_1_1)
{ after(grammarAccess.getIntersectExceptExprAccess().getRightsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceofExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group__0__Impl
	rule__InstanceofExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getLeftAssignment_0()); }
(rule__InstanceofExpr__LeftAssignment_0)
{ after(grammarAccess.getInstanceofExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getGroup_1()); }
(rule__InstanceofExpr__Group_1__0)?
{ after(grammarAccess.getInstanceofExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceofExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group_1__0__Impl
	rule__InstanceofExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getInstanceKeyword_1_0()); }

	'instance' 

{ after(grammarAccess.getInstanceofExprAccess().getInstanceKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group_1__1__Impl
	rule__InstanceofExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getOfKeyword_1_1()); }

	'of' 

{ after(grammarAccess.getInstanceofExprAccess().getOfKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getRightAssignment_1_2()); }
(rule__InstanceofExpr__RightAssignment_1_2)
{ after(grammarAccess.getInstanceofExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TreatExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group__0__Impl
	rule__TreatExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getLeftAssignment_0()); }
(rule__TreatExpr__LeftAssignment_0)
{ after(grammarAccess.getTreatExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TreatExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getGroup_1()); }
(rule__TreatExpr__Group_1__0)?
{ after(grammarAccess.getTreatExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TreatExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group_1__0__Impl
	rule__TreatExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getTreatKeyword_1_0()); }

	'treat' 

{ after(grammarAccess.getTreatExprAccess().getTreatKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TreatExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group_1__1__Impl
	rule__TreatExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getAsKeyword_1_1()); }

	'as' 

{ after(grammarAccess.getTreatExprAccess().getAsKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TreatExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getRightAssignment_1_2()); }
(rule__TreatExpr__RightAssignment_1_2)
{ after(grammarAccess.getTreatExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CastableExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group__0__Impl
	rule__CastableExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getLeftAssignment_0()); }
(rule__CastableExpr__LeftAssignment_0)
{ after(grammarAccess.getCastableExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastableExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getGroup_1()); }
(rule__CastableExpr__Group_1__0)?
{ after(grammarAccess.getCastableExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CastableExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group_1__0__Impl
	rule__CastableExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getCastableKeyword_1_0()); }

	'castable' 

{ after(grammarAccess.getCastableExprAccess().getCastableKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastableExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group_1__1__Impl
	rule__CastableExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getAsKeyword_1_1()); }

	'as' 

{ after(grammarAccess.getCastableExprAccess().getAsKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastableExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getRightAssignment_1_2()); }
(rule__CastableExpr__RightAssignment_1_2)
{ after(grammarAccess.getCastableExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CastExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group__0__Impl
	rule__CastExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getLeftAssignment_0()); }
(rule__CastExpr__LeftAssignment_0)
{ after(grammarAccess.getCastExprAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getGroup_1()); }
(rule__CastExpr__Group_1__0)?
{ after(grammarAccess.getCastExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CastExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group_1__0__Impl
	rule__CastExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getCastKeyword_1_0()); }

	'cast' 

{ after(grammarAccess.getCastExprAccess().getCastKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group_1__1__Impl
	rule__CastExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getAsKeyword_1_1()); }

	'as' 

{ after(grammarAccess.getCastExprAccess().getAsKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getRightAssignment_1_2()); }
(rule__CastExpr__RightAssignment_1_2)
{ after(grammarAccess.getCastExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpr__Group__0__Impl
	rule__UnaryExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getAlternatives_0()); }
(rule__UnaryExpr__Alternatives_0)*
{ after(grammarAccess.getUnaryExprAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getUnaryAssignment_1()); }
(rule__UnaryExpr__UnaryAssignment_1)
{ after(grammarAccess.getUnaryExprAccess().getUnaryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PathExpr__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_0__0__Impl
	rule__PathExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getSolidusKeyword_0_0()); }

	'/' 

{ after(grammarAccess.getPathExprAccess().getSolidusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpr__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_0__1__Impl
	rule__PathExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelativePathExprParserRuleCall_0_1()); }
	ruleRelativePathExpr
{ after(grammarAccess.getPathExprAccess().getRelativePathExprParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpr__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelSingleRelPathExprAction_0_2()); }
(

)
{ after(grammarAccess.getPathExprAccess().getRelSingleRelPathExprAction_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PathExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_1__0__Impl
	rule__PathExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getSolidusSolidusKeyword_1_0()); }

	'//' 

{ after(grammarAccess.getPathExprAccess().getSolidusSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_1__1__Impl
	rule__PathExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelativePathExprParserRuleCall_1_1()); }
	ruleRelativePathExpr
{ after(grammarAccess.getPathExprAccess().getRelativePathExprParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelDoubleRelPathExprAction_1_2()); }
(

)
{ after(grammarAccess.getPathExprAccess().getRelDoubleRelPathExprAction_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PathExpr__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_2__0__Impl
	rule__PathExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelativePathExprParserRuleCall_2_0()); }
	ruleRelativePathExpr
{ after(grammarAccess.getPathExprAccess().getRelativePathExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpr__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelNoSelectorRelPathExprAction_2_1()); }
(

)
{ after(grammarAccess.getPathExprAccess().getRelNoSelectorRelPathExprAction_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelativePathExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativePathExpr__Group__0__Impl
	rule__RelativePathExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getStepAssignment_0()); }
(rule__RelativePathExpr__StepAssignment_0)
{ after(grammarAccess.getRelativePathExprAccess().getStepAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativePathExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativePathExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getExtraStepsAssignment_1()); }
(rule__RelativePathExpr__ExtraStepsAssignment_1)*
{ after(grammarAccess.getRelativePathExprAccess().getExtraStepsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExtraStepExpr__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtraStepExpr__Group_0__0__Impl
	rule__ExtraStepExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraStepExpr__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtraStepExprAccess().getSolidusKeyword_0_0()); }

	'/' 

{ after(grammarAccess.getExtraStepExprAccess().getSolidusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtraStepExpr__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtraStepExpr__Group_0__1__Impl
	rule__ExtraStepExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraStepExpr__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtraStepExprAccess().getStepExprParserRuleCall_0_1()); }
	ruleStepExpr
{ after(grammarAccess.getExtraStepExprAccess().getStepExprParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtraStepExpr__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtraStepExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraStepExpr__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtraStepExprAccess().getSingleStepAction_0_2()); }
(

)
{ after(grammarAccess.getExtraStepExprAccess().getSingleStepAction_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExtraStepExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtraStepExpr__Group_1__0__Impl
	rule__ExtraStepExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraStepExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtraStepExprAccess().getSolidusSolidusKeyword_1_0()); }

	'//' 

{ after(grammarAccess.getExtraStepExprAccess().getSolidusSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtraStepExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtraStepExpr__Group_1__1__Impl
	rule__ExtraStepExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraStepExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtraStepExprAccess().getStepExprParserRuleCall_1_1()); }
	ruleStepExpr
{ after(grammarAccess.getExtraStepExprAccess().getStepExprParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtraStepExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtraStepExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraStepExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtraStepExprAccess().getDoubleStepAction_1_2()); }
(

)
{ after(grammarAccess.getExtraStepExprAccess().getDoubleStepAction_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AxisStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AxisStep__Group__0__Impl
	rule__AxisStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getAlternatives_0()); }
(rule__AxisStep__Alternatives_0)
{ after(grammarAccess.getAxisStepAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AxisStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AxisStep__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getPredicateListAssignment_1()); }
(rule__AxisStep__PredicateListAssignment_1)
{ after(grammarAccess.getAxisStepAccess().getPredicateListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForwardStep__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardStep__Group_0__0__Impl
	rule__ForwardStep__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getForwardAssignment_0_0()); }
(rule__ForwardStep__ForwardAssignment_0_0)
{ after(grammarAccess.getForwardStepAccess().getForwardAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardStep__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardStep__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getTestAssignment_0_1()); }
(rule__ForwardStep__TestAssignment_0_1)
{ after(grammarAccess.getForwardStepAccess().getTestAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AbbrevForwardStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbbrevForwardStep__Group__0__Impl
	rule__AbbrevForwardStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbbrevForwardStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getAttrAssignment_0()); }
(rule__AbbrevForwardStep__AttrAssignment_0)?
{ after(grammarAccess.getAbbrevForwardStepAccess().getAttrAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbbrevForwardStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbbrevForwardStep__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbbrevForwardStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getTestAssignment_1()); }
(rule__AbbrevForwardStep__TestAssignment_1)
{ after(grammarAccess.getAbbrevForwardStepAccess().getTestAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReverseStep__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReverseStep__Group_0__0__Impl
	rule__ReverseStep__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getReverseAssignment_0_0()); }
(rule__ReverseStep__ReverseAssignment_0_0)
{ after(grammarAccess.getReverseStepAccess().getReverseAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReverseStep__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReverseStep__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getTestAssignment_0_1()); }
(rule__ReverseStep__TestAssignment_0_1)
{ after(grammarAccess.getReverseStepAccess().getTestAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Wildcard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_1__0__Impl
	rule__Wildcard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getLeftAssignment_1_0()); }
(rule__Wildcard__LeftAssignment_1_0)
{ after(grammarAccess.getWildcardAccess().getLeftAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_1__1__Impl
	rule__Wildcard__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getWildcardAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getAsteriskKeyword_1_2()); }

	'*' 

{ after(grammarAccess.getWildcardAccess().getAsteriskKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Wildcard__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_2__0__Impl
	rule__Wildcard__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getAsteriskKeyword_2_0()); }

	'*' 

{ after(grammarAccess.getWildcardAccess().getAsteriskKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_2__1__Impl
	rule__Wildcard__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getColonKeyword_2_1()); }

	':' 

{ after(grammarAccess.getWildcardAccess().getColonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getRightAssignment_2_2()); }
(rule__Wildcard__RightAssignment_2_2)
{ after(grammarAccess.getWildcardAccess().getRightAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FilterExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterExpr__Group__0__Impl
	rule__FilterExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterExprAccess().getPrimaryAssignment_0()); }
(rule__FilterExpr__PrimaryAssignment_0)
{ after(grammarAccess.getFilterExprAccess().getPrimaryAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterExprAccess().getPredicateListAssignment_1()); }
(rule__FilterExpr__PredicateListAssignment_1)
{ after(grammarAccess.getFilterExprAccess().getPredicateListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PredicateList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateList__Group__0__Impl
	rule__PredicateList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateListAccess().getPredicateListAction_0()); }
(

)
{ after(grammarAccess.getPredicateListAccess().getPredicateListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateListAccess().getPredicatesAssignment_1()); }
(rule__PredicateList__PredicatesAssignment_1)*
{ after(grammarAccess.getPredicateListAccess().getPredicatesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Predicate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__1__Impl
	rule__Predicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getExprAssignment_1()); }
(rule__Predicate__ExprAssignment_1)
{ after(grammarAccess.getPredicateAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VarRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarRef__Group__0__Impl
	rule__VarRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarRefAccess().getDollarSignKeyword_0()); }

	'$' 

{ after(grammarAccess.getVarRefAccess().getDollarSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarRefAccess().getVarNameParserRuleCall_1()); }
	ruleVarName
{ after(grammarAccess.getVarRefAccess().getVarNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpr__Group__0__Impl
	rule__ParenthesizedExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getParenthesizedExprAction_0()); }
(

)
{ after(grammarAccess.getParenthesizedExprAccess().getParenthesizedExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpr__Group__1__Impl
	rule__ParenthesizedExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getParenthesizedExprAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpr__Group__2__Impl
	rule__ParenthesizedExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getExprAssignment_2()); }
(rule__ParenthesizedExpr__ExprAssignment_2)?
{ after(grammarAccess.getParenthesizedExprAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpr__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getParenthesizedExprAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getQNameAssignment_0()); }
(rule__FunctionCall__QNameAssignment_0)
{ after(grammarAccess.getFunctionCallAccess().getQNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2()); }
(rule__FunctionCall__Group_2__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2__0__Impl
	rule__FunctionCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getExprAssignment_2_0()); }
(rule__FunctionCall__ExprAssignment_2_0)
{ after(grammarAccess.getFunctionCallAccess().getExprAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
(rule__FunctionCall__Group_2_1__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_1__0__Impl
	rule__FunctionCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getExprsAssignment_2_1_1()); }
(rule__FunctionCall__ExprsAssignment_2_1_1)
{ after(grammarAccess.getFunctionCallAccess().getExprsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleType__Group__0__Impl
	rule__SingleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeAccess().getAtomicTypeParserRuleCall_0()); }
	ruleAtomicType
{ after(grammarAccess.getSingleTypeAccess().getAtomicTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeAccess().getQuestionMarkKeyword_1()); }
(
	'?' 
)?
{ after(grammarAccess.getSingleTypeAccess().getQuestionMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group_1__0__Impl
	rule__SequenceType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getItemTypeAssignment_1_0()); }
(rule__SequenceType__ItemTypeAssignment_1_0)
{ after(grammarAccess.getSequenceTypeAccess().getItemTypeAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getOccIndAssignment_1_1()); }
(rule__SequenceType__OccIndAssignment_1_1)
{ after(grammarAccess.getSequenceTypeAccess().getOccIndAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DocumentTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group__0__Impl
	rule__DocumentTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getDocumentTestAction_0()); }
(

)
{ after(grammarAccess.getDocumentTestAccess().getDocumentTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group__1__Impl
	rule__DocumentTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getDocumentNodeKeyword_1()); }

	'document-node' 

{ after(grammarAccess.getDocumentTestAccess().getDocumentNodeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group__2__Impl
	rule__DocumentTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getDocumentTestAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group__3__Impl
	rule__DocumentTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getAlternatives_3()); }
(rule__DocumentTest__Alternatives_3)?
{ after(grammarAccess.getDocumentTestAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentTest__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getDocumentTestAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PITest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group__0__Impl
	rule__PITest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getPITTestAction_0()); }
(

)
{ after(grammarAccess.getPITestAccess().getPITTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PITest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group__1__Impl
	rule__PITest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getProcessingInstructionKeyword_1()); }

	'processing-instruction' 

{ after(grammarAccess.getPITestAccess().getProcessingInstructionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PITest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group__2__Impl
	rule__PITest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPITestAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PITest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group__3__Impl
	rule__PITest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getAlternatives_3()); }
(rule__PITest__Alternatives_3)?
{ after(grammarAccess.getPITestAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PITest__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getPITestAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AttributeTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group__0__Impl
	rule__AttributeTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getAttributeTestAction_0()); }
(

)
{ after(grammarAccess.getAttributeTestAccess().getAttributeTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group__1__Impl
	rule__AttributeTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getAttributeKeyword_1()); }

	'attribute' 

{ after(grammarAccess.getAttributeTestAccess().getAttributeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group__2__Impl
	rule__AttributeTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getAttributeTestAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group__3__Impl
	rule__AttributeTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getGroup_3()); }
(rule__AttributeTest__Group_3__0)?
{ after(grammarAccess.getAttributeTestAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAttributeTestAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AttributeTest__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_3__0__Impl
	rule__AttributeTest__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getAttrOrWildAssignment_3_0()); }
(rule__AttributeTest__AttrOrWildAssignment_3_0)
{ after(grammarAccess.getAttributeTestAccess().getAttrOrWildAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getGroup_3_1()); }
(rule__AttributeTest__Group_3_1__0)?
{ after(grammarAccess.getAttributeTestAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeTest__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_3_1__0__Impl
	rule__AttributeTest__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getAttributeTestAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getTypeNameAssignment_3_1_1()); }
(rule__AttributeTest__TypeNameAssignment_3_1_1)
{ after(grammarAccess.getAttributeTestAccess().getTypeNameAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttribNameOrWildcard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttribNameOrWildcard__Group_1__0__Impl
	rule__AttribNameOrWildcard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttribNameOrWildcard__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getAttribNameOrWildcardAction_1_0()); }
(

)
{ after(grammarAccess.getAttribNameOrWildcardAccess().getAttribNameOrWildcardAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttribNameOrWildcard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttribNameOrWildcard__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttribNameOrWildcard__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getAttribNameOrWildcardAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemaAttributeTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaAttributeTest__Group__0__Impl
	rule__SchemaAttributeTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getSchemaAttributeKeyword_0()); }

	'schema-attribute' 

{ after(grammarAccess.getSchemaAttributeTestAccess().getSchemaAttributeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaAttributeTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaAttributeTest__Group__1__Impl
	rule__SchemaAttributeTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSchemaAttributeTestAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaAttributeTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaAttributeTest__Group__2__Impl
	rule__SchemaAttributeTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getAttDecAssignment_2()); }
(rule__SchemaAttributeTest__AttDecAssignment_2)
{ after(grammarAccess.getSchemaAttributeTestAccess().getAttDecAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaAttributeTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaAttributeTest__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getSchemaAttributeTestAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ElementTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group__0__Impl
	rule__ElementTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getElementTestAction_0()); }
(

)
{ after(grammarAccess.getElementTestAccess().getElementTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group__1__Impl
	rule__ElementTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getElementKeyword_1()); }

	'element' 

{ after(grammarAccess.getElementTestAccess().getElementKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group__2__Impl
	rule__ElementTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getElementTestAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group__3__Impl
	rule__ElementTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getGroup_3()); }
(rule__ElementTest__Group_3__0)?
{ after(grammarAccess.getElementTestAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getElementTestAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ElementTest__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_3__0__Impl
	rule__ElementTest__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getElemOrWildAssignment_3_0()); }
(rule__ElementTest__ElemOrWildAssignment_3_0)
{ after(grammarAccess.getElementTestAccess().getElemOrWildAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getGroup_3_1()); }
(rule__ElementTest__Group_3_1__0)?
{ after(grammarAccess.getElementTestAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElementTest__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_3_1__0__Impl
	rule__ElementTest__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getElementTestAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_3_1__1__Impl
	rule__ElementTest__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getTypeNameAssignment_3_1_1()); }
(rule__ElementTest__TypeNameAssignment_3_1_1)
{ after(grammarAccess.getElementTestAccess().getTypeNameAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_3_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_3_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getQuestionMarkKeyword_3_1_2()); }
(
	'?' 
)?
{ after(grammarAccess.getElementTestAccess().getQuestionMarkKeyword_3_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ElementNameOrWildcard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementNameOrWildcard__Group_1__0__Impl
	rule__ElementNameOrWildcard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementNameOrWildcard__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getElementNameOrWildcardAction_1_0()); }
(

)
{ after(grammarAccess.getElementNameOrWildcardAccess().getElementNameOrWildcardAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementNameOrWildcard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementNameOrWildcard__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementNameOrWildcard__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getElementNameOrWildcardAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SchemaElementTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaElementTest__Group__0__Impl
	rule__SchemaElementTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getSchemaElementKeyword_0()); }

	'schema-element' 

{ after(grammarAccess.getSchemaElementTestAccess().getSchemaElementKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaElementTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaElementTest__Group__1__Impl
	rule__SchemaElementTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSchemaElementTestAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaElementTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaElementTest__Group__2__Impl
	rule__SchemaElementTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getElemDecAssignment_2()); }
(rule__SchemaElementTest__ElemDecAssignment_2)
{ after(grammarAccess.getSchemaElementTestAccess().getElemDecAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaElementTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaElementTest__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getSchemaElementTestAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PrefixedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixedName__Group__0__Impl
	rule__PrefixedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getPrefixAssignment_0()); }
(rule__PrefixedName__PrefixAssignment_0)
{ after(grammarAccess.getPrefixedNameAccess().getPrefixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixedName__Group__1__Impl
	rule__PrefixedName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getPrefixedNameAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixedName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixedName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getLocalPartAssignment_2()); }
(rule__PrefixedName__LocalPartAssignment_2)
{ after(grammarAccess.getPrefixedNameAccess().getLocalPartAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Expr__ExprSingleAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExprSingleExprSingleParserRuleCall_0_0()); }
	ruleExprSingle{ after(grammarAccess.getExprAccess().getExprSingleExprSingleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__ExprsSingleAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExprsSingleExprSingleParserRuleCall_1_1_0()); }
	ruleExprSingle{ after(grammarAccess.getExprAccess().getExprsSingleExprSingleParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__ForAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getForSimpleForClauseParserRuleCall_0_0()); }
	ruleSimpleForClause{ after(grammarAccess.getForExprAccess().getForSimpleForClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__ReturnAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getReturnExprSingleParserRuleCall_2_0()); }
	ruleExprSingle{ after(grammarAccess.getForExprAccess().getReturnExprSingleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__ForVarAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getForVarVarNameParserRuleCall_2_0()); }
	ruleVarName{ after(grammarAccess.getSimpleForClauseAccess().getForVarVarNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__InAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getInExprSingleParserRuleCall_4_0()); }
	ruleExprSingle{ after(grammarAccess.getSimpleForClauseAccess().getInExprSingleParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__AdditionalInAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getAdditionalInAdditionalInParserRuleCall_5_0()); }
	ruleAdditionalIn{ after(grammarAccess.getSimpleForClauseAccess().getAdditionalInAdditionalInParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalIn__VariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalInAccess().getVariableVarNameParserRuleCall_2_0()); }
	ruleVarName{ after(grammarAccess.getAdditionalInAccess().getVariableVarNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalIn__InAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalInAccess().getInExprSingleParserRuleCall_4_0()); }
	ruleExprSingle{ after(grammarAccess.getAdditionalInAccess().getInExprSingleParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__VariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_2_0()); }
	ruleVarName{ after(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__InAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getInExprSingleParserRuleCall_4_0()); }
	ruleExprSingle{ after(grammarAccess.getQuantifiedExprAccess().getInExprSingleParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__AdditionalInAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getAdditionalInAdditionalInParserRuleCall_5_0()); }
	ruleAdditionalIn{ after(grammarAccess.getQuantifiedExprAccess().getAdditionalInAdditionalInParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__SatisfyAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getSatisfyExprSingleParserRuleCall_7_0()); }
	ruleExprSingle{ after(grammarAccess.getQuantifiedExprAccess().getSatisfyExprSingleParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__IfAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getIfExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getIfExprAccess().getIfExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__ThenAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getThenExprSingleParserRuleCall_5_0()); }
	ruleExprSingle{ after(grammarAccess.getIfExprAccess().getThenExprSingleParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__ElseAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseExprSingleParserRuleCall_7_0()); }
	ruleExprSingle{ after(grammarAccess.getIfExprAccess().getElseExprSingleParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getLeftAndExprParserRuleCall_0_0()); }
	ruleAndExpr{ after(grammarAccess.getOrExprAccess().getLeftAndExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__RightsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getRightsAndExprParserRuleCall_1_1_0()); }
	ruleAndExpr{ after(grammarAccess.getOrExprAccess().getRightsAndExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getLeftComparisonExprParserRuleCall_0_0()); }
	ruleComparisonExpr{ after(grammarAccess.getAndExprAccess().getLeftComparisonExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__RightsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getRightsComparisonExprParserRuleCall_1_1_0()); }
	ruleComparisonExpr{ after(grammarAccess.getAndExprAccess().getRightsComparisonExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__RangeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getRangeRangeExprParserRuleCall_0_0()); }
	ruleRangeExpr{ after(grammarAccess.getComparisonExprAccess().getRangeRangeExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__ValueAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getValueVALUECOMPTerminalRuleCall_1_0_0_0()); }
	RULE_VALUECOMP{ after(grammarAccess.getComparisonExprAccess().getValueVALUECOMPTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__GenAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getGenGENERALCOMPTerminalRuleCall_1_0_1_0()); }
	RULE_GENERALCOMP{ after(grammarAccess.getComparisonExprAccess().getGenGENERALCOMPTerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__NodeAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getNodeNODECOMPTerminalRuleCall_1_0_2_0()); }
	RULE_NODECOMP{ after(grammarAccess.getComparisonExprAccess().getNodeNODECOMPTerminalRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__OtherRangeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getOtherRangeRangeExprParserRuleCall_1_1_0()); }
	ruleRangeExpr{ after(grammarAccess.getComparisonExprAccess().getOtherRangeRangeExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__FromAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getFromAdditiveExprParserRuleCall_0_0()); }
	ruleAdditiveExpr{ after(grammarAccess.getRangeExprAccess().getFromAdditiveExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__ToAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getToAdditiveExprParserRuleCall_1_1_0()); }
	ruleAdditiveExpr{ after(grammarAccess.getRangeExprAccess().getToAdditiveExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getLeftMultiplicativeExprParserRuleCall_0_0()); }
	ruleMultiplicativeExpr{ after(grammarAccess.getAdditiveExprAccess().getLeftMultiplicativeExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__RightsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getRightsMultiplicativeExprParserRuleCall_1_1_0()); }
	ruleMultiplicativeExpr{ after(grammarAccess.getAdditiveExprAccess().getRightsMultiplicativeExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getLeftUnionExprParserRuleCall_0_0()); }
	ruleUnionExpr{ after(grammarAccess.getMultiplicativeExprAccess().getLeftUnionExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__RightsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getRightsUnionExprParserRuleCall_1_1_0()); }
	ruleUnionExpr{ after(grammarAccess.getMultiplicativeExprAccess().getRightsUnionExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getLeftIntersectExceptExprParserRuleCall_0_0()); }
	ruleIntersectExceptExpr{ after(grammarAccess.getUnionExprAccess().getLeftIntersectExceptExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__RightsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getRightsIntersectExceptExprParserRuleCall_1_1_0()); }
	ruleIntersectExceptExpr{ after(grammarAccess.getUnionExprAccess().getRightsIntersectExceptExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getLeftInstanceofExprParserRuleCall_0_0()); }
	ruleInstanceofExpr{ after(grammarAccess.getIntersectExceptExprAccess().getLeftInstanceofExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__RightsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getRightsInstanceofExprParserRuleCall_1_1_0()); }
	ruleInstanceofExpr{ after(grammarAccess.getIntersectExceptExprAccess().getRightsInstanceofExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getLeftTreatExprParserRuleCall_0_0()); }
	ruleTreatExpr{ after(grammarAccess.getInstanceofExprAccess().getLeftTreatExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getRightSequenceTypeParserRuleCall_1_2_0()); }
	ruleSequenceType{ after(grammarAccess.getInstanceofExprAccess().getRightSequenceTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getLeftCastableExprParserRuleCall_0_0()); }
	ruleCastableExpr{ after(grammarAccess.getTreatExprAccess().getLeftCastableExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getRightSequenceTypeParserRuleCall_1_2_0()); }
	ruleSequenceType{ after(grammarAccess.getTreatExprAccess().getRightSequenceTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getLeftCastExprParserRuleCall_0_0()); }
	ruleCastExpr{ after(grammarAccess.getCastableExprAccess().getLeftCastExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getRightSingleTypeParserRuleCall_1_2_0()); }
	ruleSingleType{ after(grammarAccess.getCastableExprAccess().getRightSingleTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getLeftUnaryExprParserRuleCall_0_0()); }
	ruleUnaryExpr{ after(grammarAccess.getCastExprAccess().getLeftUnaryExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getRightSingleTypeParserRuleCall_1_2_0()); }
	ruleSingleType{ after(grammarAccess.getCastExprAccess().getRightSingleTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__UnaryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getUnaryValueExprParserRuleCall_1_0()); }
	ruleValueExpr{ after(grammarAccess.getUnaryExprAccess().getUnaryValueExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpr__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExprAccess().getValuePathExprParserRuleCall_0()); }
	rulePathExpr{ after(grammarAccess.getValueExprAccess().getValuePathExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__StepAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getStepStepExprParserRuleCall_0_0()); }
	ruleStepExpr{ after(grammarAccess.getRelativePathExprAccess().getStepStepExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__ExtraStepsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getExtraStepsExtraStepExprParserRuleCall_1_0()); }
	ruleExtraStepExpr{ after(grammarAccess.getRelativePathExprAccess().getExtraStepsExtraStepExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__StepAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getStepReverseStepParserRuleCall_0_0_0()); }
	ruleReverseStep{ after(grammarAccess.getAxisStepAccess().getStepReverseStepParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__StepAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getStepForwardStepParserRuleCall_0_1_0()); }
	ruleForwardStep{ after(grammarAccess.getAxisStepAccess().getStepForwardStepParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__PredicateListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getPredicateListPredicateListParserRuleCall_1_0()); }
	rulePredicateList{ after(grammarAccess.getAxisStepAccess().getPredicateListPredicateListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__ForwardAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getForwardFORWARDAXISTerminalRuleCall_0_0_0()); }
	RULE_FORWARDAXIS{ after(grammarAccess.getForwardStepAccess().getForwardFORWARDAXISTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__TestAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getTestNodeTestParserRuleCall_0_1_0()); }
	ruleNodeTest{ after(grammarAccess.getForwardStepAccess().getTestNodeTestParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__AbbrForwardAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getAbbrForwardAbbrevForwardStepParserRuleCall_1_0()); }
	ruleAbbrevForwardStep{ after(grammarAccess.getForwardStepAccess().getAbbrForwardAbbrevForwardStepParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbbrevForwardStep__AttrAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getAttrCommercialAtKeyword_0_0()); }
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getAttrCommercialAtKeyword_0_0()); }

	'@' 

{ after(grammarAccess.getAbbrevForwardStepAccess().getAttrCommercialAtKeyword_0_0()); }
)

{ after(grammarAccess.getAbbrevForwardStepAccess().getAttrCommercialAtKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbbrevForwardStep__TestAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getTestNodeTestParserRuleCall_1_0()); }
	ruleNodeTest{ after(grammarAccess.getAbbrevForwardStepAccess().getTestNodeTestParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__ReverseAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getReverseREVERSEAXISTerminalRuleCall_0_0_0()); }
	RULE_REVERSEAXIS{ after(grammarAccess.getReverseStepAccess().getReverseREVERSEAXISTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__TestAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getTestNodeTestParserRuleCall_0_1_0()); }
	ruleNodeTest{ after(grammarAccess.getReverseStepAccess().getTestNodeTestParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__AbbrRevSetAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getAbbrRevSetABBREVREVERSESTEPTerminalRuleCall_1_0()); }
	RULE_ABBREVREVERSESTEP{ after(grammarAccess.getReverseStepAccess().getAbbrRevSetABBREVREVERSESTEPTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTest__TestAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTestAccess().getTestKindTestParserRuleCall_0_0()); }
	ruleKindTest{ after(grammarAccess.getNodeTestAccess().getTestKindTestParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTest__TestAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTestAccess().getTestNameTestParserRuleCall_1_0()); }
	ruleNameTest{ after(grammarAccess.getNodeTestAccess().getTestNameTestParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameTest__QNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameTestAccess().getQNameQNameParserRuleCall_0_0()); }
	ruleQName{ after(grammarAccess.getNameTestAccess().getQNameQNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameTest__WildcardAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameTestAccess().getWildcardWildcardParserRuleCall_1_0()); }
	ruleWildcard{ after(grammarAccess.getNameTestAccess().getWildcardWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__WildAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getWildAsteriskKeyword_0_0()); }
(
{ before(grammarAccess.getWildcardAccess().getWildAsteriskKeyword_0_0()); }

	'*' 

{ after(grammarAccess.getWildcardAccess().getWildAsteriskKeyword_0_0()); }
)

{ after(grammarAccess.getWildcardAccess().getWildAsteriskKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__LeftAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getLeftNCNameParserRuleCall_1_0_0()); }
	ruleNCName{ after(grammarAccess.getWildcardAccess().getLeftNCNameParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__RightAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getRightNCNameParserRuleCall_2_2_0()); }
	ruleNCName{ after(grammarAccess.getWildcardAccess().getRightNCNameParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpr__PrimaryAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterExprAccess().getPrimaryPrimaryExprParserRuleCall_0_0()); }
	rulePrimaryExpr{ after(grammarAccess.getFilterExprAccess().getPrimaryPrimaryExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterExpr__PredicateListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterExprAccess().getPredicateListPredicateListParserRuleCall_1_0()); }
	rulePredicateList{ after(grammarAccess.getFilterExprAccess().getPredicateListPredicateListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateList__PredicatesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateListAccess().getPredicatesPredicateParserRuleCall_1_0()); }
	rulePredicate{ after(grammarAccess.getPredicateListAccess().getPredicatesPredicateParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getExprExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getPredicateAccess().getExprExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__LiteralAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getLiteralLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getPrimaryExprAccess().getLiteralLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__VarRefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getVarRefVarRefParserRuleCall_1_0()); }
	ruleVarRef{ after(grammarAccess.getPrimaryExprAccess().getVarRefVarRefParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__ParExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getParExprParenthesizedExprParserRuleCall_2_0()); }
	ruleParenthesizedExpr{ after(grammarAccess.getPrimaryExprAccess().getParExprParenthesizedExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__ConItemExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getConItemExprCONTEXTITEMEXPRTerminalRuleCall_3_0()); }
	RULE_CONTEXTITEMEXPR{ after(grammarAccess.getPrimaryExprAccess().getConItemExprCONTEXTITEMEXPRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__FunctionCallAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getFunctionCallFunctionCallParserRuleCall_4_0()); }
	ruleFunctionCall{ after(grammarAccess.getPrimaryExprAccess().getFunctionCallFunctionCallParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NumAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumNumericLiteralParserRuleCall_0_0()); }
	ruleNumericLiteral{ after(grammarAccess.getLiteralAccess().getNumNumericLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__StringAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getStringSTRINGLITERALTerminalRuleCall_1_0()); }
	RULE_STRINGLITERAL{ after(grammarAccess.getLiteralAccess().getStringSTRINGLITERALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__IntLitAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericLiteralAccess().getIntLitINTLITERALTerminalRuleCall_0_0()); }
	RULE_INTLITERAL{ after(grammarAccess.getNumericLiteralAccess().getIntLitINTLITERALTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__DecLitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericLiteralAccess().getDecLitDECIMALLITERALTerminalRuleCall_1_0()); }
	RULE_DECIMALLITERAL{ after(grammarAccess.getNumericLiteralAccess().getDecLitDECIMALLITERALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__DoubleLitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericLiteralAccess().getDoubleLitDOUBLELITERALTerminalRuleCall_2_0()); }
	RULE_DOUBLELITERAL{ after(grammarAccess.getNumericLiteralAccess().getDoubleLitDOUBLELITERALTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarName__QNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarNameAccess().getQNameQNameParserRuleCall_0()); }
	ruleQName{ after(grammarAccess.getVarNameAccess().getQNameQNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getExprExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getParenthesizedExprAccess().getExprExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__QNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getQNameQNameParserRuleCall_0_0()); }
	ruleQName{ after(grammarAccess.getFunctionCallAccess().getQNameQNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ExprAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getExprExprSingleParserRuleCall_2_0_0()); }
	ruleExprSingle{ after(grammarAccess.getFunctionCallAccess().getExprExprSingleParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ExprsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getExprsExprSingleParserRuleCall_2_1_1_0()); }
	ruleExprSingle{ after(grammarAccess.getFunctionCallAccess().getExprsExprSingleParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__EmptyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getEmptyEMPTYSEQUENCETYPETerminalRuleCall_0_0()); }
	RULE_EMPTYSEQUENCETYPE{ after(grammarAccess.getSequenceTypeAccess().getEmptyEMPTYSEQUENCETYPETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__ItemTypeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getItemTypeItemTypeParserRuleCall_1_0_0()); }
	ruleItemType{ after(grammarAccess.getSequenceTypeAccess().getItemTypeItemTypeParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__OccIndAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getOccIndOccurenceIndicatorParserRuleCall_1_1_0()); }
	ruleOccurenceIndicator{ after(grammarAccess.getSequenceTypeAccess().getOccIndOccurenceIndicatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__KindTestAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getKindTestKindTestParserRuleCall_0_0()); }
	ruleKindTest{ after(grammarAccess.getItemTypeAccess().getKindTestKindTestParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__EmptyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getEmptyEMPTYITEMTYPETerminalRuleCall_1_0()); }
	RULE_EMPTYITEMTYPE{ after(grammarAccess.getItemTypeAccess().getEmptyEMPTYITEMTYPETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__AtomicTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getAtomicTypeAtomicTypeParserRuleCall_2_0()); }
	ruleAtomicType{ after(grammarAccess.getItemTypeAccess().getAtomicTypeAtomicTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicType__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicTypeAccess().getTypeIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getAtomicTypeAccess().getTypeIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__DocTestAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getDocTestDocumentTestParserRuleCall_0_0()); }
	ruleDocumentTest{ after(grammarAccess.getKindTestAccess().getDocTestDocumentTestParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__ElemTestAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getElemTestElementTestParserRuleCall_1_0()); }
	ruleElementTest{ after(grammarAccess.getKindTestAccess().getElemTestElementTestParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__AttributeTestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getAttributeTestAttributeTestParserRuleCall_2_0()); }
	ruleAttributeTest{ after(grammarAccess.getKindTestAccess().getAttributeTestAttributeTestParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__SchemaElemTestAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getSchemaElemTestSchemaElementTestParserRuleCall_3_0()); }
	ruleSchemaElementTest{ after(grammarAccess.getKindTestAccess().getSchemaElemTestSchemaElementTestParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__SchemaAttributeTestAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getSchemaAttributeTestSchemaAttributeTestParserRuleCall_4_0()); }
	ruleSchemaAttributeTest{ after(grammarAccess.getKindTestAccess().getSchemaAttributeTestSchemaAttributeTestParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__PitTestAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getPitTestPITestParserRuleCall_5_0()); }
	rulePITest{ after(grammarAccess.getKindTestAccess().getPitTestPITestParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__CommentTestAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getCommentTestCOMMENTTESTTerminalRuleCall_6_0()); }
	RULE_COMMENTTEST{ after(grammarAccess.getKindTestAccess().getCommentTestCOMMENTTESTTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__TextTestAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getTextTestTEXTTESTTerminalRuleCall_7_0()); }
	RULE_TEXTTEST{ after(grammarAccess.getKindTestAccess().getTextTestTEXTTESTTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__AnyKindTestAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getAnyKindTestANYKINDTESTTerminalRuleCall_8_0()); }
	RULE_ANYKINDTEST{ after(grammarAccess.getKindTestAccess().getAnyKindTestANYKINDTESTTerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__ElemTestAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getElemTestElementTestParserRuleCall_3_0_0()); }
	ruleElementTest{ after(grammarAccess.getDocumentTestAccess().getElemTestElementTestParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__SchemaElemTestAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getSchemaElemTestSchemaElementTestParserRuleCall_3_1_0()); }
	ruleSchemaElementTest{ after(grammarAccess.getDocumentTestAccess().getSchemaElemTestSchemaElementTestParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__NcNameAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getNcNameNCNameParserRuleCall_3_0_0()); }
	ruleNCName{ after(grammarAccess.getPITestAccess().getNcNameNCNameParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__StringAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getStringSTRINGLITERALTerminalRuleCall_3_1_0()); }
	RULE_STRINGLITERAL{ after(grammarAccess.getPITestAccess().getStringSTRINGLITERALTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__AttrOrWildAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getAttrOrWildAttribNameOrWildcardParserRuleCall_3_0_0()); }
	ruleAttribNameOrWildcard{ after(grammarAccess.getAttributeTestAccess().getAttrOrWildAttribNameOrWildcardParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__TypeNameAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getTypeNameTypeNameParserRuleCall_3_1_1_0()); }
	ruleTypeName{ after(grammarAccess.getAttributeTestAccess().getTypeNameTypeNameParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttribNameOrWildcard__AttNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getAttNameAttributeNameParserRuleCall_0_0()); }
	ruleAttributeName{ after(grammarAccess.getAttribNameOrWildcardAccess().getAttNameAttributeNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__AttDecAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getAttDecAttributeDeclarationParserRuleCall_2_0()); }
	ruleAttributeDeclaration{ after(grammarAccess.getSchemaAttributeTestAccess().getAttDecAttributeDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__AttNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getAttNameAttributeNameParserRuleCall_0()); }
	ruleAttributeName{ after(grammarAccess.getAttributeDeclarationAccess().getAttNameAttributeNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__ElemOrWildAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getElemOrWildElementNameOrWildcardParserRuleCall_3_0_0()); }
	ruleElementNameOrWildcard{ after(grammarAccess.getElementTestAccess().getElemOrWildElementNameOrWildcardParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__TypeNameAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getTypeNameTypeNameParserRuleCall_3_1_1_0()); }
	ruleTypeName{ after(grammarAccess.getElementTestAccess().getTypeNameTypeNameParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementNameOrWildcard__ElemNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getElemNameElementNameParserRuleCall_0_0()); }
	ruleElementName{ after(grammarAccess.getElementNameOrWildcardAccess().getElemNameElementNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__ElemDecAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getElemDecElementDeclarationParserRuleCall_2_0()); }
	ruleElementDeclaration{ after(grammarAccess.getSchemaElementTestAccess().getElemDecElementDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__QNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getQNameQNameParserRuleCall_0()); }
	ruleQName{ after(grammarAccess.getAttributeNameAccess().getQNameQNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementName__QNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementNameAccess().getQNameQNameParserRuleCall_0()); }
	ruleQName{ after(grammarAccess.getElementNameAccess().getQNameQNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__QNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getQNameQNameParserRuleCall_0()); }
	ruleQName{ after(grammarAccess.getTypeNameAccess().getQNameQNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NCName__NcNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNCNameAccess().getNcNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getNCNameAccess().getNcNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__PrefixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getPrefixNCNameParserRuleCall_0_0()); }
	ruleNCName{ after(grammarAccess.getPrefixedNameAccess().getPrefixNCNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__LocalPartAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getLocalPartNCNameParserRuleCall_2_0()); }
	ruleNCName{ after(grammarAccess.getPrefixedNameAccess().getLocalPartNCNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnprefixedName__LocalPartAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnprefixedNameAccess().getLocalPartNCNameParserRuleCall_0()); }
	ruleNCName{ after(grammarAccess.getUnprefixedNameAccess().getLocalPartNCNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ABBREVREVERSESTEP : '..';

RULE_CONTEXTITEMEXPR : '.';

RULE_ANYKINDTEST : 'node' '(' ')';

RULE_TEXTTEST : 'text' '(' ')';

RULE_COMMENTTEST : 'comment' '(' ')';

RULE_EMPTYITEMTYPE : 'item' '(' ')';

RULE_EMPTYSEQUENCETYPE : 'empty-sequence' '(' ')';

RULE_REVERSEAXIS : ('parent' '::'|'ancestor' '::'|'preceding-sibling' '::'|'preceding' '::'|'ancestor-or-self' '::');

RULE_FORWARDAXIS : ('child' '::'|'descendant' '::'|'attribute' '::'|'self' '::'|'descendant-or-self' '::'|'following-sibling' '::'|'following' '::'|'namespace' '::');

RULE_NODECOMP : ('is'|'<<'|'>>');

RULE_VALUECOMP : ('eq'|'ne'|'lt'|'le'|'gt'|'ge');

RULE_GENERALCOMP : ('='|'!='|'<'|'<='|'>'|'>=');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INTLITERAL : ('0'..'9')+;

RULE_DECIMALLITERAL : ('.' RULE_INTLITERAL|RULE_INTLITERAL '.' RULE_INTLITERAL);

RULE_DOUBLELITERAL : ('.' RULE_INTLITERAL|RULE_INTLITERAL ('.' ('0'..'9')*)?) ('e'|'E') ('+'|'-')? RULE_INTLITERAL;

RULE_STRINGLITERAL : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;


